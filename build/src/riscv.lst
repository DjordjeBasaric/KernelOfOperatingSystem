GAS LISTING /tmp/cccZMOqD.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB32:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/_thread.hpp"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  15              		.loc 1 12 1
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  23              		.loc 1 13 5
  24              		.loc 1 13 39 is_stmt 0
  25              	 #APP
  26              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile ("sret");
  27              		csrw sepc, ra
  28              	# 0 "" 2
  29              		.loc 1 14 5 is_stmt 1
  30              		.loc 1 14 30 is_stmt 0
  31              	# 14 "src/riscv.cpp" 1
  15              	}
  32              		sret
  33              	# 0 "" 2
  34              		.loc 1 15 1
  35              	 #NO_APP
  36 0014 03348100 		ld	s0,8(sp)
  37              		.cfi_restore 8
  38              		.cfi_def_cfa 2, 16
  39 0018 13010101 		addi	sp,sp,16
  40              		.cfi_def_cfa_offset 0
  41 001c 67800000 		jr	ra
  42              		.cfi_endproc
  43              	.LFE32:
GAS LISTING /tmp/cccZMOqD.s 			page 2


  45              		.section	.rodata.str1.8,"aMS",@progbits,1
  46              		.align	3
  47              	.LC0:
  48 0000 0A52617A 		.string	"\nRazlog greske scause: "
  48      6C6F6720 
  48      67726573 
  48      6B652073 
  48      63617573 
  49              		.align	3
  50              	.LC1:
  51 0018 4E656C65 		.string	"Nelegelna instrukcija"
  51      67656C6E 
  51      6120696E 
  51      73747275 
  51      6B63696A 
  52 002e 0000     		.align	3
  53              	.LC2:
  54 0030 4E65646F 		.string	"Nedozvoljena adresa citanja"
  54      7A766F6C 
  54      6A656E61 
  54      20616472 
  54      65736120 
  55 004c 00000000 		.align	3
  56              	.LC3:
  57 0050 4E65646F 		.string	"Nedozvoljena adresa upisa"
  57      7A766F6C 
  57      6A656E61 
  57      20616472 
  57      65736120 
  58 006a 00000000 		.align	3
  58      0000
  59              	.LC4:
  60 0070 4F737461 		.string	"Ostalo"
  60      6C6F00
  61              		.text
  62              		.align	2
  63              		.globl	_ZN5Riscv23interruptRoutineHandlerEv
  65              	_ZN5Riscv23interruptRoutineHandlerEv:
  66              	.LFB33:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::interruptRoutineHandler(){
  67              		.loc 1 17 38 is_stmt 1
  68              		.cfi_startproc
  69 0020 130101F9 		addi	sp,sp,-112
  70              		.cfi_def_cfa_offset 112
  71 0024 23341106 		sd	ra,104(sp)
  72 0028 23308106 		sd	s0,96(sp)
  73 002c 233C9104 		sd	s1,88(sp)
  74              		.cfi_offset 1, -8
  75              		.cfi_offset 8, -16
  76              		.cfi_offset 9, -24
  77 0030 13040107 		addi	s0,sp,112
  78              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp ****     uint64 volatile fcode, handle, start_routine, arg;
  79              		.loc 1 18 5
  19:src/riscv.cpp ****     asm volatile("mv %0, a0" : "=r" (fcode));
  80              		.loc 1 19 5
GAS LISTING /tmp/cccZMOqD.s 			page 3


  81              		.loc 1 19 45 is_stmt 0
  82              	 #APP
  83              	# 19 "src/riscv.cpp" 1
  20              	    asm volatile("mv %0, a1" : "=r" (handle));    //thread_t* handle
  84              		mv a5, a0
  85              	# 0 "" 2
  86              	 #NO_APP
  87 0038 233CF4FC 		sd	a5,-40(s0)
  88              		.loc 1 20 5 is_stmt 1
  89              		.loc 1 20 46 is_stmt 0
  90              	 #APP
  91              	# 20 "src/riscv.cpp" 1
  21              	    asm volatile("mv %0, a2" : "=r" (start_routine));    //void (*function)(void*)
  92              		mv a5, a1
  93              	# 0 "" 2
  94              	 #NO_APP
  95 0040 2338F4FC 		sd	a5,-48(s0)
  96              		.loc 1 21 5 is_stmt 1
  97              		.loc 1 21 53 is_stmt 0
  98              	 #APP
  99              	# 21 "src/riscv.cpp" 1
  22              	    asm volatile("mv %0, a3" : "=r" (arg));
 100              		mv a5, a2
 101              	# 0 "" 2
 102              	 #NO_APP
 103 0048 2334F4FC 		sd	a5,-56(s0)
 104              		.loc 1 22 5 is_stmt 1
 105              		.loc 1 22 43 is_stmt 0
 106              	 #APP
 107              	# 22 "src/riscv.cpp" 1
  23              	
 108              		mv a5, a3
 109              	# 0 "" 2
 110              	 #NO_APP
 111 0050 2330F4FC 		sd	a5,-64(s0)
  24:src/riscv.cpp ****     uint64 retval = 0;
 112              		.loc 1 24 5 is_stmt 1
 113              	.LVL0:
  25:src/riscv.cpp **** 
  26:src/riscv.cpp ****     uint64 scause = r_scause(); // scause -> razlog prekida
 114              		.loc 1 26 5
 115              	.LBB19:
 116              	.LBB20:
 117              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS_PROJEKAT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS_PROJEKAT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** 
   9:src/../h/riscv.hpp **** #include "../lib/hw.h"
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** class Riscv
  13:src/../h/riscv.hpp **** {
GAS LISTING /tmp/cccZMOqD.s 			page 4


  14:src/../h/riscv.hpp **** public:
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     //preko name manlinga uazi se u definiciju koja je napisana u fajlu preko asemblera
  17:src/../h/riscv.hpp ****     static void interruptRoutine();
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  20:src/../h/riscv.hpp ****     static void popSppSpie();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  23:src/../h/riscv.hpp ****     static void pushRegisters();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  26:src/../h/riscv.hpp ****     static void popRegisters();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register scause
  29:src/../h/riscv.hpp ****     static uint64 r_scause();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register scause
  32:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register sepc
  35:src/../h/riscv.hpp ****     static uint64 r_sepc();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register sepc
  38:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stvec
  41:src/../h/riscv.hpp ****     static uint64 r_stvec();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stvec
  44:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     // read register stval
  47:src/../h/riscv.hpp ****     static uint64 r_stval();
  48:src/../h/riscv.hpp **** 
  49:src/../h/riscv.hpp ****     // write register stval
  50:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     enum BitMaskSip
  53:src/../h/riscv.hpp ****     {
  54:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  55:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  56:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  57:src/../h/riscv.hpp ****     };
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // mask set register sip
  60:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // mask clear register sip
  63:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     // read register sip
  66:src/../h/riscv.hpp ****     static uint64 r_sip();
  67:src/../h/riscv.hpp **** 
  68:src/../h/riscv.hpp ****     // write register sip
  69:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  70:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cccZMOqD.s 			page 5


  71:src/../h/riscv.hpp ****     enum BitMaskSstatus
  72:src/../h/riscv.hpp ****     {
  73:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  74:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  75:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  76:src/../h/riscv.hpp ****     };
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // mask set register sstatus
  79:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // mask clear register sstatus
  82:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // read register sstatus
  85:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     // write register sstatus
  88:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp **** private:
  91:src/../h/riscv.hpp ****     static void interruptRoutineHandler();
  92:src/../h/riscv.hpp **** };
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  95:src/../h/riscv.hpp **** {
  96:src/../h/riscv.hpp ****     uint64 volatile scause;
 118              		.loc 2 96 5
  97:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 119              		.loc 2 97 5
 120              		.loc 2 97 72 is_stmt 0
 121              	 #APP
 122              	# 97 "src/../h/riscv.hpp" 1
  98              	    return scause;
 123              		csrr a5, scause
 124              	# 0 "" 2
 125              	 #NO_APP
 126 0058 2334F4FA 		sd	a5,-88(s0)
 127              		.loc 2 98 5 is_stmt 1
 128              		.loc 2 98 12 is_stmt 0
 129 005c 833484FA 		ld	s1,-88(s0)
 130              	.LVL1:
 131              	.LBE20:
 132              	.LBE19:
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){
 133              		.loc 1 28 5 is_stmt 1
 134              	.LBB21:
 135              		.loc 1 28 40 is_stmt 0
 136 0060 138784FF 		addi	a4,s1,-8
 137              		.loc 1 28 5
 138 0064 93071000 		li	a5,1
 139 0068 63F6E706 		bleu	a4,a5,.L15
  29:src/riscv.cpp ****         //softverski prekid, sistemski poziv iz koristnickog ili sistemskog rezima
  30:src/riscv.cpp **** 
  31:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  33:src/riscv.cpp **** 
GAS LISTING /tmp/cccZMOqD.s 			page 6


  34:src/riscv.cpp ****         switch(fcode){
  35:src/riscv.cpp ****             case 0x11: {
  36:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
  37:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
  38:src/riscv.cpp ****                                                 (void *) stack_space);
  39:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  40:src/riscv.cpp ****                 break;
  41:src/riscv.cpp ****                 }
  42:src/riscv.cpp ****             case 0x12: {
  43:src/riscv.cpp ****                 _thread::thread_exit();
  44:src/riscv.cpp ****                 break;
  45:src/riscv.cpp ****                 }
  46:src/riscv.cpp ****             case 0x13:
  47:src/riscv.cpp ****                 _thread::yield();
  48:src/riscv.cpp ****                 break;
  49:src/riscv.cpp ****             default:
  50:src/riscv.cpp ****                 break;
  51:src/riscv.cpp **** 
  52:src/riscv.cpp ****         }
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****         w_sepc(sepc);
  55:src/riscv.cpp ****         w_sstatus(sstatus);
  56:src/riscv.cpp ****     }
  57:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL){
 140              		.loc 1 57 10 is_stmt 1
 141 006c 9307F0FF 		li	a5,-1
 142 0070 9397F703 		slli	a5,a5,63
 143 0074 93871700 		addi	a5,a5,1
 144 0078 6382F410 		beq	s1,a5,.L16
  58:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  59:src/riscv.cpp ****     }
  60:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL){
 145              		.loc 1 60 10
 146 007c 9307F0FF 		li	a5,-1
 147 0080 9397F703 		slli	a5,a5,63
 148 0084 93879700 		addi	a5,a5,9
 149 0088 6380F410 		beq	s1,a5,.L17
  61:src/riscv.cpp ****         console_handler();
  62:src/riscv.cpp ****     }
  63:src/riscv.cpp ****     else{
  64:src/riscv.cpp ****         printString("\nRazlog greske scause: ");
 150              		.loc 1 64 9
 151              		.loc 1 64 20 is_stmt 0
 152 008c 17050000 		lla	a0,.LC0
 152      13050500 
 153 0094 97000000 		call	_Z11printStringPKc
 153      E7800000 
 154              	.LVL2:
  65:src/riscv.cpp ****         printInteger(scause);
 155              		.loc 1 65 9 is_stmt 1
 156              		.loc 1 65 21 is_stmt 0
 157 009c 13850400 		mv	a0,s1
 158 00a0 97000000 		call	_Z12printIntegerm
 158      E7800000 
 159              	.LVL3:
  66:src/riscv.cpp ****         switch(scause) {
 160              		.loc 1 66 9 is_stmt 1
GAS LISTING /tmp/cccZMOqD.s 			page 7


 161 00a8 93075000 		li	a5,5
 162 00ac 638EF40E 		beq	s1,a5,.L11
 163 00b0 93077000 		li	a5,7
 164 00b4 6384F410 		beq	s1,a5,.L12
 165 00b8 93072000 		li	a5,2
 166 00bc 638CF40C 		beq	s1,a5,.L18
  67:src/riscv.cpp ****             case 2:
  68:src/riscv.cpp ****                 printString("Nelegelna instrukcija");
  69:src/riscv.cpp ****                 break;
  70:src/riscv.cpp ****             case 5:
  71:src/riscv.cpp ****                 printString("Nedozvoljena adresa citanja");
  72:src/riscv.cpp ****                 break;
  73:src/riscv.cpp ****             case 7:
  74:src/riscv.cpp ****                 printString("Nedozvoljena adresa upisa");
  75:src/riscv.cpp ****                 break;
  76:src/riscv.cpp ****             default:
 167              		.loc 1 76 13
  77:src/riscv.cpp ****                 printString("Ostalo");
 168              		.loc 1 77 17
 169              		.loc 1 77 28 is_stmt 0
 170 00c0 17050000 		lla	a0,.LC4
 170      13050500 
 171 00c8 97000000 		call	_Z11printStringPKc
 171      E7800000 
 172              	.LVL4:
  78:src/riscv.cpp ****                 break;
 173              		.loc 1 78 17 is_stmt 1
 174              	.LBE21:
  79:src/riscv.cpp ****         }
  80:src/riscv.cpp ****     }
  81:src/riscv.cpp **** }...
 175              		.loc 1 81 1 is_stmt 0
 176 00d0 6F004005 		j	.L3
 177              	.L15:
 178              	.LBB38:
 179              	.LBB22:
  31:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 180              		.loc 1 31 9 is_stmt 1
 181              	.LBB23:
 182              	.LBB24:
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 107:src/../h/riscv.hpp **** {
 108:src/../h/riscv.hpp ****     uint64 volatile sepc;
 183              		.loc 2 108 5
 109:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 184              		.loc 2 109 5
 185              		.loc 2 109 64 is_stmt 0
 186              	 #APP
 187              	# 109 "src/../h/riscv.hpp" 1
 110              	    return sepc;
GAS LISTING /tmp/cccZMOqD.s 			page 8


 188              		csrr a5, sepc
 189              	# 0 "" 2
 190              	 #NO_APP
 191 00d8 233CF4FA 		sd	a5,-72(s0)
 192              		.loc 2 110 5 is_stmt 1
 193              		.loc 2 110 12 is_stmt 0
 194 00dc 833784FB 		ld	a5,-72(s0)
 195              	.LBE24:
 196              	.LBE23:
  31:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 197              		.loc 1 31 41
 198 00e0 93874700 		addi	a5,a5,4
  31:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 199              		.loc 1 31 43
 200 00e4 233CF4F8 		sd	a5,-104(s0)
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 201              		.loc 1 32 9 is_stmt 1
 202              	.LBB25:
 203              	.LBB26:
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 119:src/../h/riscv.hpp **** {
 120:src/../h/riscv.hpp ****     uint64 volatile stvec;
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 122:src/../h/riscv.hpp ****     return stvec;
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 131:src/../h/riscv.hpp **** {
 132:src/../h/riscv.hpp ****     uint64 volatile stval;
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 134:src/../h/riscv.hpp ****     return stval;
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 148:src/../h/riscv.hpp **** {
GAS LISTING /tmp/cccZMOqD.s 			page 9


 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     uint64 volatile sip;
 155:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 156:src/../h/riscv.hpp ****     return sip;
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 204              		.loc 2 176 5
 177:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 205              		.loc 2 177 5
 206              		.loc 2 177 76 is_stmt 0
 207              	 #APP
 208              	# 177 "src/../h/riscv.hpp" 1
 178              	    return sstatus;
 209              		csrr a5, sstatus
 210              	# 0 "" 2
 211              	 #NO_APP
 212 00ec 2338F4FA 		sd	a5,-80(s0)
 213              		.loc 2 178 5 is_stmt 1
 214              		.loc 2 178 12 is_stmt 0
 215 00f0 833704FB 		ld	a5,-80(s0)
 216              	.LBE26:
 217              	.LBE25:
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 218              		.loc 1 32 45
 219 00f4 2330F4FA 		sd	a5,-96(s0)
  34:src/riscv.cpp ****         switch(fcode){
 220              		.loc 1 34 9 is_stmt 1
 221              	.LBB27:
  34:src/riscv.cpp ****         switch(fcode){
 222              		.loc 1 34 16 is_stmt 0
 223 00f8 833784FD 		ld	a5,-40(s0)
  34:src/riscv.cpp ****         switch(fcode){
 224              		.loc 1 34 9
 225 00fc 13072001 		li	a4,18
 226 0100 6382E706 		beq	a5,a4,.L5
GAS LISTING /tmp/cccZMOqD.s 			page 10


 227 0104 13073001 		li	a4,19
 228 0108 6384E706 		beq	a5,a4,.L6
 229 010c 13071001 		li	a4,17
 230 0110 6384E702 		beq	a5,a4,.L19
 231              	.LVL5:
 232              	.L7:
 233              	.LBE27:
  54:src/riscv.cpp ****         w_sepc(sepc);
 234              		.loc 1 54 9 is_stmt 1
  54:src/riscv.cpp ****         w_sepc(sepc);
 235              		.loc 1 54 15 is_stmt 0
 236 0114 833784F9 		ld	a5,-104(s0)
 237              	.LVL6:
 238              	.LBB30:
 239              	.LBB31:
 115:src/../h/riscv.hpp **** }
 240              		.loc 2 115 5 is_stmt 1
 115:src/../h/riscv.hpp **** }
 241              		.loc 2 115 65 is_stmt 0
 242              	 #APP
 243              	# 115 "src/../h/riscv.hpp" 1
 244              		csrw sepc, a5
 245              	# 0 "" 2
 246              	.LVL7:
 247              	 #NO_APP
 248              	.LBE31:
 249              	.LBE30:
  55:src/riscv.cpp ****         w_sstatus(sstatus);
 250              		.loc 1 55 9 is_stmt 1
  55:src/riscv.cpp ****         w_sstatus(sstatus);
 251              		.loc 1 55 18 is_stmt 0
 252 011c 833704FA 		ld	a5,-96(s0)
 253              	.LVL8:
 254              	.LBB32:
 255              	.LBB33:
 179:src/../h/riscv.hpp **** }
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 256              		.loc 2 183 5 is_stmt 1
 257              		.loc 2 183 77 is_stmt 0
 258              	 #APP
 259              	# 183 "src/../h/riscv.hpp" 1
 184              	}
 260              		csrw sstatus, a5
 261              	# 0 "" 2
 262              	.LVL9:
 263              	 #NO_APP
 264              	.L3:
 265              	.LBE33:
 266              	.LBE32:
 267              	.LBE22:
 268              	.LBE38:
 269              		.loc 1 81 1
 270 0124 83308106 		ld	ra,104(sp)
 271              		.cfi_remember_state
GAS LISTING /tmp/cccZMOqD.s 			page 11


 272              		.cfi_restore 1
 273 0128 03340106 		ld	s0,96(sp)
 274              		.cfi_restore 8
 275              		.cfi_def_cfa 2, 112
 276 012c 83348105 		ld	s1,88(sp)
 277              		.cfi_restore 9
 278              	.LVL10:
 279 0130 13010107 		addi	sp,sp,112
 280              		.cfi_def_cfa_offset 0
 281 0134 67800000 		jr	ra
 282              	.LVL11:
 283              	.L19:
 284              		.cfi_restore_state
 285              	.LBB39:
 286              	.LBB35:
 287              	.LBB34:
 288              	.LBB28:
  35:src/riscv.cpp ****             case 0x11: {
 289              		.loc 1 35 13 is_stmt 1
  35:src/riscv.cpp ****             case 0x11: {
 290              		.loc 1 35 24
 291              	.LBB29:
  36:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
 292              		.loc 1 36 17
  36:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
 293              		.loc 1 36 68 is_stmt 0
 294 0138 37850000 		li	a0,32768
 295 013c 97000000 		call	_Znam
 295      E7800000 
 296              	.LVL12:
 297 0144 93060500 		mv	a3,a0
 298              	.LVL13:
  37:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
 299              		.loc 1 37 17 is_stmt 1
  37:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
 300              		.loc 1 37 48 is_stmt 0
 301 0148 033504FD 		ld	a0,-48(s0)
 302              	.LVL14:
 303 014c 833584FC 		ld	a1,-56(s0)
 304 0150 033604FC 		ld	a2,-64(s0)
 305 0154 97000000 		call	_ZN7_thread13create_threadEPPS_PFvvEPvS4_
 305      E7800000 
 306              	.LVL15:
  39:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 307              		.loc 1 39 17 is_stmt 1
  39:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 308              		.loc 1 39 59 is_stmt 0
 309              	 #APP
 310              	# 39 "src/riscv.cpp" 1
  40:src/riscv.cpp ****                 break;
 311              		mv a0, a0
 312              	# 0 "" 2
 313              		.loc 1 40 17 is_stmt 1
 314              	 #NO_APP
 315 0160 6FF05FFB 		j	.L7
 316              	.LVL16:
 317              	.L5:
GAS LISTING /tmp/cccZMOqD.s 			page 12


 318              	.LBE29:
  42:src/riscv.cpp ****             case 0x12: {
 319              		.loc 1 42 13
  42:src/riscv.cpp ****             case 0x12: {
 320              		.loc 1 42 24
  43:src/riscv.cpp ****                 _thread::thread_exit();
 321              		.loc 1 43 17
  43:src/riscv.cpp ****                 _thread::thread_exit();
 322              		.loc 1 43 37 is_stmt 0
 323 0164 97000000 		call	_ZN7_thread11thread_exitEv
 323      E7800000 
 324              	.LVL17:
  44:src/riscv.cpp ****                 break;
 325              		.loc 1 44 17 is_stmt 1
 326 016c 6FF09FFA 		j	.L7
 327              	.L6:
  46:src/riscv.cpp ****             case 0x13:
 328              		.loc 1 46 13
  47:src/riscv.cpp ****                 _thread::yield();
 329              		.loc 1 47 17
  47:src/riscv.cpp ****                 _thread::yield();
 330              		.loc 1 47 31 is_stmt 0
 331 0170 97000000 		call	_ZN7_thread5yieldEv
 331      E7800000 
 332              	.LVL18:
  48:src/riscv.cpp ****                 break;
 333              		.loc 1 48 17 is_stmt 1
 334 0178 6FF0DFF9 		j	.L7
 335              	.L16:
 336              	.LBE28:
 337              	.LBE34:
 338              	.LBE35:
  58:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 339              		.loc 1 58 9
 340              	.LVL19:
 341              	.LBB36:
 342              	.LBB37:
 149:src/../h/riscv.hpp **** }
 343              		.loc 2 149 5
 149:src/../h/riscv.hpp **** }
 344              		.loc 2 149 64 is_stmt 0
 345 017c 93072000 		li	a5,2
 346              	 #APP
 347              	# 149 "src/../h/riscv.hpp" 1
 150:src/../h/riscv.hpp **** 
 348              		csrc sip, a5
 349              	# 0 "" 2
 350              		.loc 2 150 1
 351              	 #NO_APP
 352 0184 6FF01FFA 		j	.L3
 353              	.LVL20:
 354              	.L17:
 355              	.LBE37:
 356              	.LBE36:
  61:src/riscv.cpp ****         console_handler();
 357              		.loc 1 61 9 is_stmt 1
  61:src/riscv.cpp ****         console_handler();
GAS LISTING /tmp/cccZMOqD.s 			page 13


 358              		.loc 1 61 24 is_stmt 0
 359 0188 97000000 		call	console_handler
 359      E7800000 
 360              	.LVL21:
 361 0190 6FF05FF9 		j	.L3
 362              	.L18:
  67:src/riscv.cpp ****             case 2:
 363              		.loc 1 67 13 is_stmt 1
  68:src/riscv.cpp ****                 printString("Nelegelna instrukcija");
 364              		.loc 1 68 17
  68:src/riscv.cpp ****                 printString("Nelegelna instrukcija");
 365              		.loc 1 68 28 is_stmt 0
 366 0194 17050000 		lla	a0,.LC1
 366      13050500 
 367 019c 97000000 		call	_Z11printStringPKc
 367      E7800000 
 368              	.LVL22:
  69:src/riscv.cpp ****                 break;
 369              		.loc 1 69 17 is_stmt 1
 370 01a4 6FF01FF8 		j	.L3
 371              	.L11:
  70:src/riscv.cpp ****             case 5:
 372              		.loc 1 70 13
  71:src/riscv.cpp ****                 printString("Nedozvoljena adresa citanja");
 373              		.loc 1 71 17
  71:src/riscv.cpp ****                 printString("Nedozvoljena adresa citanja");
 374              		.loc 1 71 28 is_stmt 0
 375 01a8 17050000 		lla	a0,.LC2
 375      13050500 
 376 01b0 97000000 		call	_Z11printStringPKc
 376      E7800000 
 377              	.LVL23:
  72:src/riscv.cpp ****                 break;
 378              		.loc 1 72 17 is_stmt 1
 379 01b8 6FF0DFF6 		j	.L3
 380              	.L12:
  73:src/riscv.cpp ****             case 7:
 381              		.loc 1 73 13
  74:src/riscv.cpp ****                 printString("Nedozvoljena adresa upisa");
 382              		.loc 1 74 17
  74:src/riscv.cpp ****                 printString("Nedozvoljena adresa upisa");
 383              		.loc 1 74 28 is_stmt 0
 384 01bc 17050000 		lla	a0,.LC3
 384      13050500 
 385 01c4 97000000 		call	_Z11printStringPKc
 385      E7800000 
 386              	.LVL24:
  75:src/riscv.cpp ****                 break;
 387              		.loc 1 75 17 is_stmt 1
 388 01cc 6FF09FF5 		j	.L3
 389              	.LBE39:
 390              		.cfi_endproc
 391              	.LFE33:
 393              	.Letext0:
 394              		.file 3 "src/../h/../lib/hw.h"
 395              		.file 4 "src/../h/_thread.hpp"
 396              		.file 5 "src/../h/print.hpp"
GAS LISTING /tmp/cccZMOqD.s 			page 14


 397              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/cccZMOqD.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cccZMOqD.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cccZMOqD.s:16     .text:0000000000000000 .L0 
     /tmp/cccZMOqD.s:17     .text:0000000000000000 .L0 
     /tmp/cccZMOqD.s:18     .text:0000000000000004 .L0 
     /tmp/cccZMOqD.s:20     .text:0000000000000008 .L0 
     /tmp/cccZMOqD.s:22     .text:000000000000000c .L0 
     /tmp/cccZMOqD.s:24     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/cccZMOqD.s:30     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/cccZMOqD.s:36     .text:0000000000000014 .L0 
     /tmp/cccZMOqD.s:37     .text:0000000000000018 .L0 
     /tmp/cccZMOqD.s:38     .text:0000000000000018 .L0 
     /tmp/cccZMOqD.s:40     .text:000000000000001c .L0 
     /tmp/cccZMOqD.s:42     .text:0000000000000020 .L0 
     /tmp/cccZMOqD.s:65     .text:0000000000000020 _ZN5Riscv23interruptRoutineHandlerEv
     /tmp/cccZMOqD.s:68     .text:0000000000000020 .L0 
     /tmp/cccZMOqD.s:69     .text:0000000000000020 .L0 
     /tmp/cccZMOqD.s:70     .text:0000000000000024 .L0 
     /tmp/cccZMOqD.s:74     .text:0000000000000030 .L0 
     /tmp/cccZMOqD.s:75     .text:0000000000000030 .L0 
     /tmp/cccZMOqD.s:76     .text:0000000000000030 .L0 
     /tmp/cccZMOqD.s:78     .text:0000000000000034 .L0 
     /tmp/cccZMOqD.s:80     .text:0000000000000034 .L0 
     /tmp/cccZMOqD.s:81     .text:0000000000000034 .L0 
       src/riscv.cpp:19     .text:0000000000000034 .L0 
     /tmp/cccZMOqD.s:89     .text:000000000000003c .L0 
       src/riscv.cpp:20     .text:000000000000003c .L0 
     /tmp/cccZMOqD.s:97     .text:0000000000000044 .L0 
       src/riscv.cpp:21     .text:0000000000000044 .L0 
     /tmp/cccZMOqD.s:105    .text:000000000000004c .L0 
       src/riscv.cpp:22     .text:000000000000004c .L0 
     /tmp/cccZMOqD.s:114    .text:0000000000000054 .L0 
     /tmp/cccZMOqD.s:118    .text:0000000000000054 .L0 
     /tmp/cccZMOqD.s:119    .text:0000000000000054 .L0 
     /tmp/cccZMOqD.s:120    .text:0000000000000054 .L0 
  src/../h/riscv.hpp:97     .text:0000000000000054 .L0 
     /tmp/cccZMOqD.s:128    .text:000000000000005c .L0 
     /tmp/cccZMOqD.s:129    .text:000000000000005c .L0 
     /tmp/cccZMOqD.s:135    .text:0000000000000060 .L0 
     /tmp/cccZMOqD.s:136    .text:0000000000000060 .L0 
     /tmp/cccZMOqD.s:138    .text:0000000000000064 .L0 
     /tmp/cccZMOqD.s:141    .text:000000000000006c .L0 
     /tmp/cccZMOqD.s:146    .text:000000000000007c .L0 
     /tmp/cccZMOqD.s:151    .text:000000000000008c .L0 
     /tmp/cccZMOqD.s:152    .text:000000000000008c .L0 
     /tmp/cccZMOqD.s:156    .text:000000000000009c .L0 
     /tmp/cccZMOqD.s:157    .text:000000000000009c .L0 
     /tmp/cccZMOqD.s:161    .text:00000000000000a8 .L0 
     /tmp/cccZMOqD.s:168    .text:00000000000000c0 .L0 
     /tmp/cccZMOqD.s:169    .text:00000000000000c0 .L0 
     /tmp/cccZMOqD.s:170    .text:00000000000000c0 .L0 
     /tmp/cccZMOqD.s:175    .text:00000000000000d0 .L0 
     /tmp/cccZMOqD.s:176    .text:00000000000000d0 .L0 
     /tmp/cccZMOqD.s:183    .text:00000000000000d4 .L0 
GAS LISTING /tmp/cccZMOqD.s 			page 16


     /tmp/cccZMOqD.s:184    .text:00000000000000d4 .L0 
     /tmp/cccZMOqD.s:185    .text:00000000000000d4 .L0 
  src/../h/riscv.hpp:109    .text:00000000000000d4 .L0 
     /tmp/cccZMOqD.s:193    .text:00000000000000dc .L0 
     /tmp/cccZMOqD.s:194    .text:00000000000000dc .L0 
     /tmp/cccZMOqD.s:198    .text:00000000000000e0 .L0 
     /tmp/cccZMOqD.s:200    .text:00000000000000e4 .L0 
     /tmp/cccZMOqD.s:204    .text:00000000000000e8 .L0 
     /tmp/cccZMOqD.s:205    .text:00000000000000e8 .L0 
     /tmp/cccZMOqD.s:206    .text:00000000000000e8 .L0 
  src/../h/riscv.hpp:177    .text:00000000000000e8 .L0 
     /tmp/cccZMOqD.s:214    .text:00000000000000f0 .L0 
     /tmp/cccZMOqD.s:215    .text:00000000000000f0 .L0 
     /tmp/cccZMOqD.s:219    .text:00000000000000f4 .L0 
     /tmp/cccZMOqD.s:222    .text:00000000000000f8 .L0 
     /tmp/cccZMOqD.s:223    .text:00000000000000f8 .L0 
     /tmp/cccZMOqD.s:225    .text:00000000000000fc .L0 
     /tmp/cccZMOqD.s:235    .text:0000000000000114 .L0 
     /tmp/cccZMOqD.s:236    .text:0000000000000114 .L0 
     /tmp/cccZMOqD.s:241    .text:0000000000000118 .L0 
  src/../h/riscv.hpp:115    .text:0000000000000118 .L0 
     /tmp/cccZMOqD.s:251    .text:000000000000011c .L0 
     /tmp/cccZMOqD.s:252    .text:000000000000011c .L0 
     /tmp/cccZMOqD.s:257    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:183    .text:0000000000000120 .L0 
     /tmp/cccZMOqD.s:270    .text:0000000000000124 .L0 
     /tmp/cccZMOqD.s:271    .text:0000000000000128 .L0 
     /tmp/cccZMOqD.s:272    .text:0000000000000128 .L0 
     /tmp/cccZMOqD.s:274    .text:000000000000012c .L0 
     /tmp/cccZMOqD.s:275    .text:000000000000012c .L0 
     /tmp/cccZMOqD.s:277    .text:0000000000000130 .L0 
     /tmp/cccZMOqD.s:280    .text:0000000000000134 .L0 
     /tmp/cccZMOqD.s:284    .text:0000000000000138 .L0 
     /tmp/cccZMOqD.s:290    .text:0000000000000138 .L0 
     /tmp/cccZMOqD.s:292    .text:0000000000000138 .L0 
     /tmp/cccZMOqD.s:293    .text:0000000000000138 .L0 
     /tmp/cccZMOqD.s:294    .text:0000000000000138 .L0 
     /tmp/cccZMOqD.s:300    .text:0000000000000148 .L0 
     /tmp/cccZMOqD.s:301    .text:0000000000000148 .L0 
     /tmp/cccZMOqD.s:308    .text:000000000000015c .L0 
       src/riscv.cpp:39     .text:000000000000015c .L0 
     /tmp/cccZMOqD.s:315    .text:0000000000000160 .L0 
     /tmp/cccZMOqD.s:320    .text:0000000000000164 .L0 
     /tmp/cccZMOqD.s:321    .text:0000000000000164 .L0 
     /tmp/cccZMOqD.s:322    .text:0000000000000164 .L0 
     /tmp/cccZMOqD.s:323    .text:0000000000000164 .L0 
     /tmp/cccZMOqD.s:326    .text:000000000000016c .L0 
     /tmp/cccZMOqD.s:329    .text:0000000000000170 .L0 
     /tmp/cccZMOqD.s:330    .text:0000000000000170 .L0 
     /tmp/cccZMOqD.s:331    .text:0000000000000170 .L0 
     /tmp/cccZMOqD.s:334    .text:0000000000000178 .L0 
     /tmp/cccZMOqD.s:343    .text:000000000000017c .L0 
     /tmp/cccZMOqD.s:344    .text:000000000000017c .L0 
     /tmp/cccZMOqD.s:345    .text:000000000000017c .L0 
     /tmp/cccZMOqD.s:352    .text:0000000000000184 .L0 
     /tmp/cccZMOqD.s:358    .text:0000000000000188 .L0 
     /tmp/cccZMOqD.s:359    .text:0000000000000188 .L0 
GAS LISTING /tmp/cccZMOqD.s 			page 17


     /tmp/cccZMOqD.s:364    .text:0000000000000194 .L0 
     /tmp/cccZMOqD.s:365    .text:0000000000000194 .L0 
     /tmp/cccZMOqD.s:366    .text:0000000000000194 .L0 
     /tmp/cccZMOqD.s:370    .text:00000000000001a4 .L0 
     /tmp/cccZMOqD.s:373    .text:00000000000001a8 .L0 
     /tmp/cccZMOqD.s:374    .text:00000000000001a8 .L0 
     /tmp/cccZMOqD.s:375    .text:00000000000001a8 .L0 
     /tmp/cccZMOqD.s:379    .text:00000000000001b8 .L0 
     /tmp/cccZMOqD.s:382    .text:00000000000001bc .L0 
     /tmp/cccZMOqD.s:383    .text:00000000000001bc .L0 
     /tmp/cccZMOqD.s:384    .text:00000000000001bc .L0 
     /tmp/cccZMOqD.s:388    .text:00000000000001cc .L0 
     /tmp/cccZMOqD.s:390    .text:00000000000001d0 .L0 
     /tmp/cccZMOqD.s:398    .text:00000000000001d0 .L0 
     /tmp/cccZMOqD.s:47     .rodata.str1.8:0000000000000000 .LC0
     /tmp/cccZMOqD.s:152    .text:000000000000008c .L0 
     /tmp/cccZMOqD.s:59     .rodata.str1.8:0000000000000070 .LC4
     /tmp/cccZMOqD.s:170    .text:00000000000000c0 .L0 
     /tmp/cccZMOqD.s:50     .rodata.str1.8:0000000000000018 .LC1
     /tmp/cccZMOqD.s:366    .text:0000000000000194 .L0 
     /tmp/cccZMOqD.s:53     .rodata.str1.8:0000000000000030 .LC2
     /tmp/cccZMOqD.s:375    .text:00000000000001a8 .L0 
     /tmp/cccZMOqD.s:56     .rodata.str1.8:0000000000000050 .LC3
     /tmp/cccZMOqD.s:384    .text:00000000000001bc .L0 
     /tmp/cccZMOqD.s:177    .text:00000000000000d4 .L15
     /tmp/cccZMOqD.s:335    .text:000000000000017c .L16
     /tmp/cccZMOqD.s:354    .text:0000000000000188 .L17
     /tmp/cccZMOqD.s:371    .text:00000000000001a8 .L11
     /tmp/cccZMOqD.s:380    .text:00000000000001bc .L12
     /tmp/cccZMOqD.s:362    .text:0000000000000194 .L18
     /tmp/cccZMOqD.s:264    .text:0000000000000124 .L3
     /tmp/cccZMOqD.s:317    .text:0000000000000164 .L5
     /tmp/cccZMOqD.s:327    .text:0000000000000170 .L6
     /tmp/cccZMOqD.s:283    .text:0000000000000138 .L19
     /tmp/cccZMOqD.s:232    .text:0000000000000114 .L7
     /tmp/cccZMOqD.s:1331   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cccZMOqD.s:2234   .debug_str:0000000000000086 .LASF97
     /tmp/cccZMOqD.s:2354   .debug_str:0000000000000500 .LASF98
     /tmp/cccZMOqD.s:2244   .debug_str:000000000000017f .LASF99
     /tmp/cccZMOqD.s:8      .text:0000000000000000 .Ltext0
     /tmp/cccZMOqD.s:393    .text:00000000000001d0 .Letext0
     /tmp/cccZMOqD.s:2208   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cccZMOqD.s:2336   .debug_str:00000000000004a1 .LASF0
     /tmp/cccZMOqD.s:2350   .debug_str:00000000000004da .LASF1
     /tmp/cccZMOqD.s:2324   .debug_str:000000000000043e .LASF2
     /tmp/cccZMOqD.s:2300   .debug_str:0000000000000384 .LASF4
     /tmp/cccZMOqD.s:2384   .debug_str:00000000000005e7 .LASF3
     /tmp/cccZMOqD.s:2236   .debug_str:000000000000014a .LASF5
     /tmp/cccZMOqD.s:2352   .debug_str:00000000000004ed .LASF6
     /tmp/cccZMOqD.s:2334   .debug_str:000000000000048e .LASF7
     /tmp/cccZMOqD.s:2410   .debug_str:000000000000068f .LASF8
     /tmp/cccZMOqD.s:2284   .debug_str:00000000000002ee .LASF9
     /tmp/cccZMOqD.s:2364   .debug_str:000000000000054d .LASF10
     /tmp/cccZMOqD.s:2404   .debug_str:0000000000000665 .LASF11
     /tmp/cccZMOqD.s:2238   .debug_str:0000000000000151 .LASF12
     /tmp/cccZMOqD.s:2216   .debug_str:000000000000002b .LASF13
     /tmp/cccZMOqD.s:2326   .debug_str:000000000000044c .LASF14
GAS LISTING /tmp/cccZMOqD.s 			page 18


     /tmp/cccZMOqD.s:2376   .debug_str:00000000000005a3 .LASF15
     /tmp/cccZMOqD.s:2252   .debug_str:00000000000001f5 .LASF16
     /tmp/cccZMOqD.s:2346   .debug_str:00000000000004c9 .LASF60
     /tmp/cccZMOqD.s:2310   .debug_str:00000000000003aa .LASF100
     /tmp/cccZMOqD.s:2388   .debug_str:0000000000000600 .LASF17
     /tmp/cccZMOqD.s:2344   .debug_str:00000000000004c0 .LASF18
     /tmp/cccZMOqD.s:2306   .debug_str:0000000000000399 .LASF19
     /tmp/cccZMOqD.s:2294   .debug_str:0000000000000355 .LASF20
     /tmp/cccZMOqD.s:2362   .debug_str:000000000000052f .LASF22
     /tmp/cccZMOqD.s:2374   .debug_str:0000000000000598 .LASF21
     /tmp/cccZMOqD.s:2420   .debug_str:00000000000006db .LASF23
     /tmp/cccZMOqD.s:2232   .debug_str:0000000000000078 .LASF24
     /tmp/cccZMOqD.s:2264   .debug_str:0000000000000253 .LASF25
     /tmp/cccZMOqD.s:2390   .debug_str:0000000000000609 .LASF26
     /tmp/cccZMOqD.s:2214   .debug_str:0000000000000011 .LASF27
     /tmp/cccZMOqD.s:2218   .debug_str:000000000000003b .LASF28
     /tmp/cccZMOqD.s:2268   .debug_str:0000000000000276 .LASF30
     /tmp/cccZMOqD.s:2262   .debug_str:000000000000024a .LASF32
     /tmp/cccZMOqD.s:2260   .debug_str:0000000000000235 .LASF34
     /tmp/cccZMOqD.s:2386   .debug_str:00000000000005f9 .LASF29
     /tmp/cccZMOqD.s:2368   .debug_str:0000000000000561 .LASF31
     /tmp/cccZMOqD.s:2400   .debug_str:0000000000000656 .LASF33
     /tmp/cccZMOqD.s:2394   .debug_str:000000000000061d .LASF35
     /tmp/cccZMOqD.s:2276   .debug_str:00000000000002b7 .LASF36
     /tmp/cccZMOqD.s:2254   .debug_str:000000000000020b .LASF37
     /tmp/cccZMOqD.s:2212   .debug_str:0000000000000009 .LASF38
     /tmp/cccZMOqD.s:2292   .debug_str:0000000000000341 .LASF39
     /tmp/cccZMOqD.s:2402   .debug_str:000000000000065d .LASF40
     /tmp/cccZMOqD.s:2240   .debug_str:0000000000000161 .LASF41
     /tmp/cccZMOqD.s:2424   .debug_str:00000000000006fe .LASF42
     /tmp/cccZMOqD.s:2270   .debug_str:000000000000028b .LASF43
     /tmp/cccZMOqD.s:2338   .debug_str:00000000000004ae .LASF44
     /tmp/cccZMOqD.s:2418   .debug_str:00000000000006c8 .LASF45
     /tmp/cccZMOqD.s:2230   .debug_str:0000000000000071 .LASF46
     /tmp/cccZMOqD.s:2274   .debug_str:00000000000002a4 .LASF47
     /tmp/cccZMOqD.s:2282   .debug_str:00000000000002e8 .LASF48
     /tmp/cccZMOqD.s:2398   .debug_str:0000000000000644 .LASF49
     /tmp/cccZMOqD.s:2228   .debug_str:000000000000006b .LASF50
     /tmp/cccZMOqD.s:2428   .debug_str:0000000000000712 .LASF51
     /tmp/cccZMOqD.s:2422   .debug_str:00000000000006f3 .LASF52
     /tmp/cccZMOqD.s:2382   .debug_str:00000000000005cf .LASF53
     /tmp/cccZMOqD.s:2348   .debug_str:00000000000004cf .LASF54
     /tmp/cccZMOqD.s:2312   .debug_str:00000000000003b5 .LASF55
     /tmp/cccZMOqD.s:2242   .debug_str:0000000000000175 .LASF56
     /tmp/cccZMOqD.s:2296   .debug_str:0000000000000366 .LASF57
     /tmp/cccZMOqD.s:2332   .debug_str:0000000000000484 .LASF58
     /tmp/cccZMOqD.s:2290   .debug_str:000000000000032b .LASF59
     /tmp/cccZMOqD.s:2372   .debug_str:0000000000000580 .LASF77
     /tmp/cccZMOqD.s:2246   .debug_str:00000000000001a1 .LASF79
     /tmp/cccZMOqD.s:2298   .debug_str:000000000000037c .LASF61
     /tmp/cccZMOqD.s:2224   .debug_str:0000000000000057 .LASF101
     /tmp/cccZMOqD.s:2266   .debug_str:000000000000026e .LASF102
     /tmp/cccZMOqD.s:2406   .debug_str:0000000000000674 .LASF62
     /tmp/cccZMOqD.s:2358   .debug_str:0000000000000519 .LASF64
     /tmp/cccZMOqD.s:2356   .debug_str:000000000000050e .LASF103
     /tmp/cccZMOqD.s:2320   .debug_str:000000000000041c .LASF104
     /tmp/cccZMOqD.s:2370   .debug_str:0000000000000574 .LASF63
GAS LISTING /tmp/cccZMOqD.s 			page 19


     /tmp/cccZMOqD.s:2318   .debug_str:0000000000000401 .LASF65
     /tmp/cccZMOqD.s:2412   .debug_str:000000000000069f .LASF66
     /tmp/cccZMOqD.s:2286   .debug_str:00000000000002fc .LASF67
     /tmp/cccZMOqD.s:2366   .debug_str:000000000000055c .LASF105
     /tmp/cccZMOqD.s:2378   .debug_str:00000000000005b9 .LASF68
     /tmp/cccZMOqD.s:2396   .debug_str:0000000000000630 .LASF69
     /tmp/cccZMOqD.s:2226   .debug_str:000000000000005f .LASF70
     /tmp/cccZMOqD.s:2280   .debug_str:00000000000002cd .LASF71
     /tmp/cccZMOqD.s:2328   .debug_str:0000000000000458 .LASF72
     /tmp/cccZMOqD.s:2304   .debug_str:0000000000000394 .LASF73
     /tmp/cccZMOqD.s:2340   .debug_str:00000000000004b5 .LASF74
     /tmp/cccZMOqD.s:2308   .debug_str:00000000000003a2 .LASF75
     /tmp/cccZMOqD.s:2302   .debug_str:000000000000038b .LASF76
     /tmp/cccZMOqD.s:2414   .debug_str:00000000000006ad .LASF106
     /tmp/cccZMOqD.s:2316   .debug_str:00000000000003d5 .LASF107
     /tmp/cccZMOqD.s:2248   .debug_str:00000000000001c6 .LASF78
     /tmp/cccZMOqD.s:2250   .debug_str:00000000000001d6 .LASF80
     /tmp/cccZMOqD.s:2210   .debug_str:0000000000000000 .LASF81
     /tmp/cccZMOqD.s:2272   .debug_str:000000000000029f .LASF82
     /tmp/cccZMOqD.s:66     .text:0000000000000020 .LFB33
     /tmp/cccZMOqD.s:391    .text:00000000000001d0 .LFE33
     /tmp/cccZMOqD.s:2256   .debug_str:000000000000021f .LASF83
     /tmp/cccZMOqD.s:2392   .debug_str:0000000000000616 .LASF84
     /tmp/cccZMOqD.s:2278   .debug_str:00000000000002bf .LASF85
     /tmp/cccZMOqD.s:2322   .debug_str:0000000000000437 .LASF86
     /tmp/cccZMOqD.s:2121   .debug_loc:0000000000000000 .LLST0
     /tmp/cccZMOqD.s:2220   .debug_str:0000000000000044 .LASF87
     /tmp/cccZMOqD.s:2143   .debug_loc:000000000000005f .LLST1
     /tmp/cccZMOqD.s:2200   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cccZMOqD.s:2342   .debug_str:00000000000004bb .LASF88
     /tmp/cccZMOqD.s:2314   .debug_str:00000000000003cd .LASF89
     /tmp/cccZMOqD.s:291    .text:0000000000000138 .LBB29
     /tmp/cccZMOqD.s:318    .text:0000000000000164 .LBE29
     /tmp/cccZMOqD.s:2426   .debug_str:0000000000000706 .LASF90
     /tmp/cccZMOqD.s:2154   .debug_loc:0000000000000095 .LLST2
     /tmp/cccZMOqD.s:296    .text:0000000000000144 .LVL12
     /tmp/cccZMOqD.s:306    .text:000000000000015c .LVL15
     /tmp/cccZMOqD.s:181    .text:00000000000000d4 .LBB23
     /tmp/cccZMOqD.s:196    .text:00000000000000e0 .LBE23
     /tmp/cccZMOqD.s:202    .text:00000000000000e8 .LBB25
     /tmp/cccZMOqD.s:217    .text:00000000000000f4 .LBE25
     /tmp/cccZMOqD.s:238    .text:0000000000000118 .LBB30
     /tmp/cccZMOqD.s:249    .text:000000000000011c .LBE30
     /tmp/cccZMOqD.s:2165   .debug_loc:00000000000000cb .LLST3
     /tmp/cccZMOqD.s:254    .text:0000000000000120 .LBB32
     /tmp/cccZMOqD.s:266    .text:0000000000000124 .LBE32
     /tmp/cccZMOqD.s:2172   .debug_loc:00000000000000ee .LLST4
     /tmp/cccZMOqD.s:324    .text:000000000000016c .LVL17
     /tmp/cccZMOqD.s:332    .text:0000000000000178 .LVL18
     /tmp/cccZMOqD.s:115    .text:0000000000000054 .LBB19
     /tmp/cccZMOqD.s:132    .text:0000000000000060 .LBE19
     /tmp/cccZMOqD.s:341    .text:000000000000017c .LBB36
     /tmp/cccZMOqD.s:356    .text:0000000000000188 .LBE36
     /tmp/cccZMOqD.s:2179   .debug_loc:0000000000000111 .LLST5
     /tmp/cccZMOqD.s:154    .text:000000000000009c .LVL2
     /tmp/cccZMOqD.s:159    .text:00000000000000a8 .LVL3
     /tmp/cccZMOqD.s:172    .text:00000000000000d0 .LVL4
GAS LISTING /tmp/cccZMOqD.s 			page 20


     /tmp/cccZMOqD.s:360    .text:0000000000000190 .LVL21
     /tmp/cccZMOqD.s:368    .text:00000000000001a4 .LVL22
     /tmp/cccZMOqD.s:377    .text:00000000000001b8 .LVL23
     /tmp/cccZMOqD.s:386    .text:00000000000001cc .LVL24
     /tmp/cccZMOqD.s:13     .text:0000000000000000 .LFB32
     /tmp/cccZMOqD.s:43     .text:0000000000000020 .LFE32
     /tmp/cccZMOqD.s:2288   .debug_str:0000000000000326 .LASF91
     /tmp/cccZMOqD.s:2360   .debug_str:0000000000000529 .LASF108
     /tmp/cccZMOqD.s:2380   .debug_str:00000000000005bf .LASF109
     /tmp/cccZMOqD.s:2330   .debug_str:0000000000000471 .LASF92
     /tmp/cccZMOqD.s:2222   .debug_str:000000000000004b .LASF94
     /tmp/cccZMOqD.s:2408   .debug_str:000000000000067d .LASF93
     /tmp/cccZMOqD.s:2416   .debug_str:00000000000006bb .LASF95
     /tmp/cccZMOqD.s:2258   .debug_str:0000000000000225 .LASF96
     /tmp/cccZMOqD.s:113    .text:0000000000000054 .LVL0
     /tmp/cccZMOqD.s:231    .text:0000000000000114 .LVL5
     /tmp/cccZMOqD.s:282    .text:0000000000000138 .LVL11
     /tmp/cccZMOqD.s:316    .text:0000000000000164 .LVL16
     /tmp/cccZMOqD.s:130    .text:0000000000000060 .LVL1
     /tmp/cccZMOqD.s:278    .text:0000000000000130 .LVL10
     /tmp/cccZMOqD.s:298    .text:0000000000000148 .LVL13
     /tmp/cccZMOqD.s:302    .text:000000000000014c .LVL14
     /tmp/cccZMOqD.s:237    .text:0000000000000118 .LVL6
     /tmp/cccZMOqD.s:246    .text:000000000000011c .LVL7
     /tmp/cccZMOqD.s:253    .text:0000000000000120 .LVL8
     /tmp/cccZMOqD.s:262    .text:0000000000000124 .LVL9
     /tmp/cccZMOqD.s:340    .text:000000000000017c .LVL19
     /tmp/cccZMOqD.s:353    .text:0000000000000188 .LVL20
     /tmp/cccZMOqD.s:399    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cccZMOqD.s:179    .text:00000000000000d4 .LBB22
     /tmp/cccZMOqD.s:267    .text:0000000000000124 .LBE22
     /tmp/cccZMOqD.s:286    .text:0000000000000138 .LBB35
     /tmp/cccZMOqD.s:338    .text:000000000000017c .LBE35

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
_Znam
_ZN7_thread13create_threadEPPS_PFvvEPvS4_
_ZN7_thread11thread_exitEv
_ZN7_thread5yieldEv
console_handler
