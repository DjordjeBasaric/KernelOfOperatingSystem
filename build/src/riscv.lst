GAS LISTING /tmp/ccQeggtU.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB32:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/_thread.hpp"
   8:src/riscv.cpp **** #include "../test/printing.hpp"
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  15              		.loc 1 12 1
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra"); // zato ovde upisujem da nas vrati tamo odakle je i ova fun
  23              		.loc 1 13 5
  24              		.loc 1 13 39 is_stmt 0
  25              	 #APP
  26              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile ("sret"); //ovo sret ce vratiti tamo gde je sepc rekao, i to nam ne odgovara
  27              		csrw sepc, ra
  28              	# 0 "" 2
  29              		.loc 1 14 5 is_stmt 1
  30              		.loc 1 14 30 is_stmt 0
  31              	# 14 "src/riscv.cpp" 1
  15              	
  16:src/riscv.cpp **** }
  32              		sret
  33              	# 0 "" 2
  34              		.loc 1 16 1
  35              	 #NO_APP
  36 0014 03348100 		ld	s0,8(sp)
  37              		.cfi_restore 8
  38              		.cfi_def_cfa 2, 16
  39 0018 13010101 		addi	sp,sp,16
  40              		.cfi_def_cfa_offset 0
  41 001c 67800000 		jr	ra
  42              		.cfi_endproc
GAS LISTING /tmp/ccQeggtU.s 			page 2


  43              	.LFE32:
  45              		.section	.rodata.str1.8,"aMS",@progbits,1
  46              		.align	3
  47              	.LC0:
  48 0000 0A506320 		.string	"\nPc greske: "
  48      67726573 
  48      6B653A20 
  48      00
  49 000d 000000   		.align	3
  50              	.LC1:
  51 0010 0A537456 		.string	"\nStVal greske: "
  51      616C2067 
  51      7265736B 
  51      653A2000 
  52              		.align	3
  53              	.LC2:
  54 0020 0A52617A 		.string	"\nRazlog greske scause: "
  54      6C6F6720 
  54      67726573 
  54      6B652073 
  54      63617573 
  55              		.align	3
  56              	.LC3:
  57 0038 204E656C 		.string	" Nelegelna instrukcija"
  57      6567656C 
  57      6E612069 
  57      6E737472 
  57      756B6369 
  58 004f 00       		.align	3
  59              	.LC4:
  60 0050 204E6564 		.string	" Nedozvoljena adresa citanja"
  60      6F7A766F 
  60      6C6A656E 
  60      61206164 
  60      72657361 
  61 006d 000000   		.align	3
  62              	.LC5:
  63 0070 204E6564 		.string	" Nedozvoljena adresa upisa"
  63      6F7A766F 
  63      6C6A656E 
  63      61206164 
  63      72657361 
  64 008b 00000000 		.align	3
  64      00
  65              	.LC6:
  66 0090 204F7374 		.string	" Ostalo"
  66      616C6F00 
  67              		.text
  68              		.align	2
  69              		.globl	_ZN5Riscv23interruptRoutineHandlerEv
  71              	_ZN5Riscv23interruptRoutineHandlerEv:
  72              	.LFB33:
  17:src/riscv.cpp **** 
  18:src/riscv.cpp **** void Riscv::interruptRoutineHandler(){
  73              		.loc 1 18 38 is_stmt 1
  74              		.cfi_startproc
  75 0020 130101F8 		addi	sp,sp,-128
GAS LISTING /tmp/ccQeggtU.s 			page 3


  76              		.cfi_def_cfa_offset 128
  77 0024 233C1106 		sd	ra,120(sp)
  78 0028 23388106 		sd	s0,112(sp)
  79 002c 23349106 		sd	s1,104(sp)
  80              		.cfi_offset 1, -8
  81              		.cfi_offset 8, -16
  82              		.cfi_offset 9, -24
  83 0030 13040108 		addi	s0,sp,128
  84              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp ****     uint64 volatile fcode, handle, start_routine, arg;
  85              		.loc 1 19 5
  20:src/riscv.cpp ****     asm volatile("mv %0, a0" : "=r" (fcode));
  86              		.loc 1 20 5
  87              		.loc 1 20 45 is_stmt 0
  88              	 #APP
  89              	# 20 "src/riscv.cpp" 1
  21              	    asm volatile("mv %0, a1" : "=r" (handle));    //thread_t* handle
  90              		mv a5, a0
  91              	# 0 "" 2
  92              	 #NO_APP
  93 0038 233CF4FC 		sd	a5,-40(s0)
  94              		.loc 1 21 5 is_stmt 1
  95              		.loc 1 21 46 is_stmt 0
  96              	 #APP
  97              	# 21 "src/riscv.cpp" 1
  22              	    asm volatile("mv %0, a2" : "=r" (start_routine));    //void (*function)(void*)
  98              		mv a5, a1
  99              	# 0 "" 2
 100              	 #NO_APP
 101 0040 2338F4FC 		sd	a5,-48(s0)
 102              		.loc 1 22 5 is_stmt 1
 103              		.loc 1 22 53 is_stmt 0
 104              	 #APP
 105              	# 22 "src/riscv.cpp" 1
  23              	    asm volatile("mv %0, a3" : "=r" (arg));
 106              		mv a5, a2
 107              	# 0 "" 2
 108              	 #NO_APP
 109 0048 2334F4FC 		sd	a5,-56(s0)
 110              		.loc 1 23 5 is_stmt 1
 111              		.loc 1 23 43 is_stmt 0
 112              	 #APP
 113              	# 23 "src/riscv.cpp" 1
  24              	
 114              		mv a5, a3
 115              	# 0 "" 2
 116              	 #NO_APP
 117 0050 2330F4FC 		sd	a5,-64(s0)
  25:src/riscv.cpp ****     uint64 retval = 0;
 118              		.loc 1 25 5 is_stmt 1
 119              	.LVL0:
  26:src/riscv.cpp **** 
  27:src/riscv.cpp ****     //r_scause -> read scause
  28:src/riscv.cpp ****     uint64 scause = r_scause(); // scause -> razlog prekida
 120              		.loc 1 28 5
 121              	.LBB23:
 122              	.LBB24:
GAS LISTING /tmp/ccQeggtU.s 			page 4


 123              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS_PROJEKAT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS_PROJEKAT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** 
   9:src/../h/riscv.hpp **** #include "../lib/hw.h"
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** class Riscv
  13:src/../h/riscv.hpp **** {
  14:src/../h/riscv.hpp **** public:
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // pop status.spp and sstatus.spie bits
  17:src/../h/riscv.hpp ****     static void popSppSpie();
  18:src/../h/riscv.hpp ****     //implementaciju ove metode stavljam u cpp zato sto je vazno da ova staticka metoda
  19:src/../h/riscv.hpp ****     //bude ne inline, da bi se ovaj kod pozvao i da bi se promenio ra registar
  20:src/../h/riscv.hpp ****     //bitno je da znamo odakle se desio poziv
  21:src/../h/riscv.hpp ****     //jedini nacin da promenimo rezim privilegije je sa funkcijama koje se vracaju iz prekidne ruti
  22:src/../h/riscv.hpp ****     //pomocu sret, konekts novonapravljene niti nece ici preko normalne prekidne rutine vec ce ici 
  23:src/../h/riscv.hpp ****     //threadWrapera i u okviru njegove funckije treba izaci iz prekidne rutine
  24:src/../h/riscv.hpp ****     //sret ce se vratiti tamo gde je sepc rekao
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     //preko name manlinga uazi se u definiciju koja je napisana u fajlu preko asemblera
  27:src/../h/riscv.hpp ****     static void interruptRoutine();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  30:src/../h/riscv.hpp ****     static void pushRegisters();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  33:src/../h/riscv.hpp ****     static void popRegisters();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register scause
  36:src/../h/riscv.hpp ****     static uint64 r_scause();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register scause
  39:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // read register sepc
  42:src/../h/riscv.hpp ****     static uint64 r_sepc();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // write register sepc
  45:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // read register stvec
  48:src/../h/riscv.hpp ****     static uint64 r_stvec();
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // write register stvec
  51:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // read register stval
  54:src/../h/riscv.hpp ****     static uint64 r_stval();
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // write register stval
GAS LISTING /tmp/ccQeggtU.s 			page 5


  57:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     enum BitMaskSip
  60:src/../h/riscv.hpp ****     {
  61:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  62:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  63:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  64:src/../h/riscv.hpp ****     };
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // mask set register sip
  67:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // mask clear register sip
  70:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // read register sip
  73:src/../h/riscv.hpp ****     static uint64 r_sip();
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // write register sip
  76:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     enum BitMaskSstatus
  79:src/../h/riscv.hpp ****     {
  80:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  81:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  82:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  83:src/../h/riscv.hpp ****     };
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // mask set register sstatus
  86:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // mask clear register sstatus
  89:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     // read register sstatus
  92:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     // write register sstatus
  95:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** private:
  98:src/../h/riscv.hpp ****     static void interruptRoutineHandler();
  99:src/../h/riscv.hpp **** };
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile scause;
 124              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 125              		.loc 2 104 5
 126              		.loc 2 104 72 is_stmt 0
 127              	 #APP
 128              	# 104 "src/../h/riscv.hpp" 1
 105              	    return scause;
 129              		csrr a5, scause
 130              	# 0 "" 2
 131              	 #NO_APP
GAS LISTING /tmp/ccQeggtU.s 			page 6


 132 0058 233CF4F8 		sd	a5,-104(s0)
 133              		.loc 2 105 5 is_stmt 1
 134              		.loc 2 105 12 is_stmt 0
 135 005c 833484F9 		ld	s1,-104(s0)
 136              	.LVL1:
 137              	.LBE24:
 138              	.LBE23:
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){
 139              		.loc 1 30 5 is_stmt 1
 140              	.LBB25:
 141              		.loc 1 30 40 is_stmt 0
 142 0060 138784FF 		addi	a4,s1,-8
 143              		.loc 1 30 5
 144 0064 93071000 		li	a5,1
 145 0068 63FAE70C 		bleu	a4,a5,.L18
  31:src/riscv.cpp ****         //softverski prekid, sistemski poziv iz koristnickog ili sistemskog rezima
  32:src/riscv.cpp **** 
  33:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
  34:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  35:src/riscv.cpp **** 
  36:src/riscv.cpp ****         switch(fcode){
  37:src/riscv.cpp ****             case 0x11: {
  38:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
  39:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
  40:src/riscv.cpp ****                                                 (void *) stack_space);
  41:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  42:src/riscv.cpp ****                 break;
  43:src/riscv.cpp ****                 }
  44:src/riscv.cpp ****             case 0x12: {
  45:src/riscv.cpp ****                 _thread::thread_exit();
  46:src/riscv.cpp ****                 break;
  47:src/riscv.cpp ****                 }
  48:src/riscv.cpp ****             case 0x13:
  49:src/riscv.cpp ****                 _thread::thread_dispatch();
  50:src/riscv.cpp ****                 break;
  51:src/riscv.cpp ****             case 0x20:{
  52:src/riscv.cpp ****                 __getc();
  53:src/riscv.cpp ****             }
  54:src/riscv.cpp ****             default:
  55:src/riscv.cpp ****                 break;
  56:src/riscv.cpp **** 
  57:src/riscv.cpp ****         }
  58:src/riscv.cpp **** 
  59:src/riscv.cpp ****         w_sepc(sepc); //ako je unutar dispacha promenjen pc ovde upisujem taj novi(sto je nekad sac
  60:src/riscv.cpp ****         w_sstatus(sstatus);
  61:src/riscv.cpp ****     }
  62:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL){
 146              		.loc 1 62 10 is_stmt 1
 147 006c 9307F0FF 		li	a5,-1
 148 0070 9397F703 		slli	a5,a5,63
 149 0074 93871700 		addi	a5,a5,1
 150 0078 6380F418 		beq	s1,a5,.L19
  63:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  64:src/riscv.cpp ****     }
  65:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL){
 151              		.loc 1 65 10
GAS LISTING /tmp/ccQeggtU.s 			page 7


 152 007c 9307F0FF 		li	a5,-1
 153 0080 9397F703 		slli	a5,a5,63
 154 0084 93879700 		addi	a5,a5,9
 155 0088 638EF416 		beq	s1,a5,.L20
  66:src/riscv.cpp ****         console_handler();
  67:src/riscv.cpp ****     }
  68:src/riscv.cpp ****     else{
  69:src/riscv.cpp ****         printString("\nPc greske: ");
 156              		.loc 1 69 9
 157              		.loc 1 69 20 is_stmt 0
 158 008c 17050000 		lla	a0,.LC0
 158      13050500 
 159 0094 97000000 		call	_Z11printStringPKc
 159      E7800000 
 160              	.LVL2:
  70:src/riscv.cpp ****         printInt(r_sepc());//cuva adresu na kooju se vracam posle prekidne rutine
 161              		.loc 1 70 9 is_stmt 1
 162              	.LBB26:
 163              	.LBB27:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile sepc;
 164              		.loc 2 115 5
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 165              		.loc 2 116 5
 166              		.loc 2 116 64 is_stmt 0
 167              	 #APP
 168              	# 116 "src/../h/riscv.hpp" 1
 117              	    return sepc;
 169              		csrr a5, sepc
 170              	# 0 "" 2
 171              	 #NO_APP
 172 00a0 233CF4FA 		sd	a5,-72(s0)
 173              		.loc 2 117 5 is_stmt 1
 174              		.loc 2 117 12 is_stmt 0
 175 00a4 033584FB 		ld	a0,-72(s0)
 176              	.LBE27:
 177              	.LBE26:
 178              		.loc 1 70 17
 179 00a8 13060000 		li	a2,0
 180 00ac 9305A000 		li	a1,10
 181 00b0 1B050500 		sext.w	a0,a0
 182 00b4 97000000 		call	_Z8printIntiii
 182      E7800000 
 183              	.LVL3:
  71:src/riscv.cpp ****         printString("\nStVal greske: ");
 184              		.loc 1 71 9 is_stmt 1
 185              		.loc 1 71 20 is_stmt 0
 186 00bc 17050000 		lla	a0,.LC1
 186      13050500 
GAS LISTING /tmp/ccQeggtU.s 			page 8


 187 00c4 97000000 		call	_Z11printStringPKc
 187      E7800000 
 188              	.LVL4:
  72:src/riscv.cpp ****         printInt(r_stval());
 189              		.loc 1 72 9 is_stmt 1
 190              	.LBB28:
 191              	.LBB29:
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stvec;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 129:src/../h/riscv.hpp ****     return stvec;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     uint64 volatile stval;
 192              		.loc 2 139 5
 140:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 193              		.loc 2 140 5
 194              		.loc 2 140 68 is_stmt 0
 195              	 #APP
 196              	# 140 "src/../h/riscv.hpp" 1
 141              	    return stval;
 197              		csrr a5, stval
 198              	# 0 "" 2
 199              	 #NO_APP
 200 00d0 2338F4FA 		sd	a5,-80(s0)
 201              		.loc 2 141 5 is_stmt 1
 202              		.loc 2 141 12 is_stmt 0
 203 00d4 033504FB 		ld	a0,-80(s0)
 204              	.LBE29:
 205              	.LBE28:
 206              		.loc 1 72 17
 207 00d8 13060000 		li	a2,0
 208 00dc 9305A000 		li	a1,10
 209 00e0 1B050500 		sext.w	a0,a0
 210 00e4 97000000 		call	_Z8printIntiii
 210      E7800000 
 211              	.LVL5:
  73:src/riscv.cpp ****         printString("\nRazlog greske scause: ");
 212              		.loc 1 73 9 is_stmt 1
 213              		.loc 1 73 20 is_stmt 0
 214 00ec 17050000 		lla	a0,.LC2
 214      13050500 
GAS LISTING /tmp/ccQeggtU.s 			page 9


 215 00f4 97000000 		call	_Z11printStringPKc
 215      E7800000 
 216              	.LVL6:
  74:src/riscv.cpp ****         printInt(scause);
 217              		.loc 1 74 9 is_stmt 1
 218              		.loc 1 74 17 is_stmt 0
 219 00fc 13060000 		li	a2,0
 220 0100 9305A000 		li	a1,10
 221 0104 1B850400 		sext.w	a0,s1
 222 0108 97000000 		call	_Z8printIntiii
 222      E7800000 
 223              	.LVL7:
  75:src/riscv.cpp ****         switch(scause) {
 224              		.loc 1 75 9 is_stmt 1
 225 0110 93075000 		li	a5,5
 226 0114 6388F410 		beq	s1,a5,.L14
 227 0118 93077000 		li	a5,7
 228 011c 638EF410 		beq	s1,a5,.L15
 229 0120 93072000 		li	a5,2
 230 0124 6386F40E 		beq	s1,a5,.L21
  76:src/riscv.cpp ****             case 2:
  77:src/riscv.cpp ****                 printString(" Nelegelna instrukcija");
  78:src/riscv.cpp ****                 break;
  79:src/riscv.cpp ****             case 5:
  80:src/riscv.cpp ****                 printString(" Nedozvoljena adresa citanja");
  81:src/riscv.cpp ****                 break;
  82:src/riscv.cpp ****             case 7:
  83:src/riscv.cpp ****                 printString(" Nedozvoljena adresa upisa");
  84:src/riscv.cpp ****                 break;
  85:src/riscv.cpp ****             default:
 231              		.loc 1 85 13
  86:src/riscv.cpp ****                 printString(" Ostalo");
 232              		.loc 1 86 17
 233              		.loc 1 86 28 is_stmt 0
 234 0128 17050000 		lla	a0,.LC6
 234      13050500 
 235 0130 97000000 		call	_Z11printStringPKc
 235      E7800000 
 236              	.LVL8:
  87:src/riscv.cpp ****                 break;
 237              		.loc 1 87 17 is_stmt 1
 238              	.LBE25:
  88:src/riscv.cpp ****         }
  89:src/riscv.cpp ****     }
  90:src/riscv.cpp **** }...
 239              		.loc 1 90 1 is_stmt 0
 240 0138 6F00000A 		j	.L3
 241              	.L18:
 242              	.LBB48:
 243              	.LBB30:
  33:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 244              		.loc 1 33 9 is_stmt 1
 245              	.LBB31:
 246              	.LBB32:
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 247              		.loc 2 115 5
 116:src/../h/riscv.hpp ****     return sepc;
GAS LISTING /tmp/ccQeggtU.s 			page 10


 248              		.loc 2 116 5
 116:src/../h/riscv.hpp ****     return sepc;
 249              		.loc 2 116 64 is_stmt 0
 250              	 #APP
 251              	# 116 "src/../h/riscv.hpp" 1
 252              		csrr a5, sepc
 253              	# 0 "" 2
 254              	 #NO_APP
 255 0140 2334F4FA 		sd	a5,-88(s0)
 117:src/../h/riscv.hpp **** }
 256              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 257              		.loc 2 117 12 is_stmt 0
 258 0144 833784FA 		ld	a5,-88(s0)
 259              	.LBE32:
 260              	.LBE31:
  33:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 261              		.loc 1 33 41
 262 0148 93874700 		addi	a5,a5,4
  33:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 263              		.loc 1 33 43
 264 014c 2334F4F8 		sd	a5,-120(s0)
  34:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 265              		.loc 1 34 9 is_stmt 1
 266              	.LBB33:
 267              	.LBB34:
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 147:src/../h/riscv.hpp **** }
 148:src/../h/riscv.hpp **** 
 149:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 150:src/../h/riscv.hpp **** {
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     uint64 volatile sip;
 162:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 163:src/../h/riscv.hpp ****     return sip;
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 169:src/../h/riscv.hpp **** }
 170:src/../h/riscv.hpp **** 
 171:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 172:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccQeggtU.s 			page 11


 173:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 179:src/../h/riscv.hpp **** }
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 268              		.loc 2 183 5
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 269              		.loc 2 184 5
 270              		.loc 2 184 76 is_stmt 0
 271              	 #APP
 272              	# 184 "src/../h/riscv.hpp" 1
 185              	    return sstatus;
 273              		csrr a5, sstatus
 274              	# 0 "" 2
 275              	 #NO_APP
 276 0154 2330F4FA 		sd	a5,-96(s0)
 277              		.loc 2 185 5 is_stmt 1
 278              		.loc 2 185 12 is_stmt 0
 279 0158 833704FA 		ld	a5,-96(s0)
 280              	.LBE34:
 281              	.LBE33:
  34:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 282              		.loc 1 34 45
 283 015c 2338F4F8 		sd	a5,-112(s0)
  36:src/riscv.cpp ****         switch(fcode){
 284              		.loc 1 36 9 is_stmt 1
 285              	.LBB35:
  36:src/riscv.cpp ****         switch(fcode){
 286              		.loc 1 36 16 is_stmt 0
 287 0160 833784FD 		ld	a5,-40(s0)
  36:src/riscv.cpp ****         switch(fcode){
 288              		.loc 1 36 9
 289 0164 13073001 		li	a4,19
 290 0168 6382E708 		beq	a5,a4,.L5
 291 016c 6360F702 		bgtu	a5,a4,.L6
 292 0170 13071001 		li	a4,17
 293 0174 6386E702 		beq	a5,a4,.L7
 294 0178 13072001 		li	a4,18
 295 017c 6396E704 		bne	a5,a4,.L9
 296              	.LBB36:
  44:src/riscv.cpp ****             case 0x12: {
 297              		.loc 1 44 13 is_stmt 1
  44:src/riscv.cpp ****             case 0x12: {
 298              		.loc 1 44 24
  45:src/riscv.cpp ****                 _thread::thread_exit();
 299              		.loc 1 45 17
  45:src/riscv.cpp ****                 _thread::thread_exit();
 300              		.loc 1 45 37 is_stmt 0
 301 0180 97000000 		call	_ZN7_thread11thread_exitEv
 301      E7800000 
 302              	.LVL9:
GAS LISTING /tmp/ccQeggtU.s 			page 12


  46:src/riscv.cpp ****                 break;
 303              		.loc 1 46 17 is_stmt 1
 304 0188 6F000004 		j	.L9
 305              	.L6:
 306              	.LBE36:
  36:src/riscv.cpp ****         switch(fcode){
 307              		.loc 1 36 9 is_stmt 0
 308 018c 13070002 		li	a4,32
 309 0190 639CE702 		bne	a5,a4,.L9
 310              	.LBB38:
  51:src/riscv.cpp ****             case 0x20:{
 311              		.loc 1 51 13 is_stmt 1
  51:src/riscv.cpp ****             case 0x20:{
 312              		.loc 1 51 23
  52:src/riscv.cpp ****                 __getc();
 313              		.loc 1 52 17
  52:src/riscv.cpp ****                 __getc();
 314              		.loc 1 52 23 is_stmt 0
 315 0194 97000000 		call	__getc
 315      E7800000 
 316              	.LVL10:
 317 019c 6F00C002 		j	.L9
 318              	.L7:
  37:src/riscv.cpp ****             case 0x11: {
 319              		.loc 1 37 13 is_stmt 1
  37:src/riscv.cpp ****             case 0x11: {
 320              		.loc 1 37 24
 321              	.LBB37:
  38:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
 322              		.loc 1 38 17
  38:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
 323              		.loc 1 38 68 is_stmt 0
 324 01a0 37850000 		li	a0,32768
 325 01a4 97000000 		call	_Znam
 325      E7800000 
 326              	.LVL11:
 327 01ac 93060500 		mv	a3,a0
 328              	.LVL12:
  39:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
 329              		.loc 1 39 17 is_stmt 1
  39:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
 330              		.loc 1 39 48 is_stmt 0
 331 01b0 033504FD 		ld	a0,-48(s0)
 332              	.LVL13:
 333 01b4 833584FC 		ld	a1,-56(s0)
 334 01b8 033604FC 		ld	a2,-64(s0)
 335 01bc 97000000 		call	_ZN7_thread13create_threadEPPS_PFvPvES2_S2_
 335      E7800000 
 336              	.LVL14:
  41:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 337              		.loc 1 41 17 is_stmt 1
  41:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 338              		.loc 1 41 59 is_stmt 0
 339              	 #APP
 340              	# 41 "src/riscv.cpp" 1
  42:src/riscv.cpp ****                 break;
 341              		mv a0, a0
GAS LISTING /tmp/ccQeggtU.s 			page 13


 342              	# 0 "" 2
 343              		.loc 1 42 17 is_stmt 1
 344              	.LVL15:
 345              	 #NO_APP
 346              	.L9:
 347              	.LBE37:
 348              	.LBE38:
 349              	.LBE35:
  59:src/riscv.cpp ****         w_sepc(sepc); //ako je unutar dispacha promenjen pc ovde upisujem taj novi(sto je nekad sac
 350              		.loc 1 59 9
  59:src/riscv.cpp ****         w_sepc(sepc); //ako je unutar dispacha promenjen pc ovde upisujem taj novi(sto je nekad sac
 351              		.loc 1 59 15 is_stmt 0
 352 01c8 833784F8 		ld	a5,-120(s0)
 353              	.LVL16:
 354              	.LBB40:
 355              	.LBB41:
 122:src/../h/riscv.hpp **** }
 356              		.loc 2 122 5 is_stmt 1
 122:src/../h/riscv.hpp **** }
 357              		.loc 2 122 65 is_stmt 0
 358              	 #APP
 359              	# 122 "src/../h/riscv.hpp" 1
 360              		csrw sepc, a5
 361              	# 0 "" 2
 362              	.LVL17:
 363              	 #NO_APP
 364              	.LBE41:
 365              	.LBE40:
  60:src/riscv.cpp ****         w_sstatus(sstatus);
 366              		.loc 1 60 9 is_stmt 1
  60:src/riscv.cpp ****         w_sstatus(sstatus);
 367              		.loc 1 60 18 is_stmt 0
 368 01d0 833704F9 		ld	a5,-112(s0)
 369              	.LVL18:
 370              	.LBB42:
 371              	.LBB43:
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 189:src/../h/riscv.hpp **** {
 190:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 372              		.loc 2 190 5 is_stmt 1
 373              		.loc 2 190 77 is_stmt 0
 374              	 #APP
 375              	# 190 "src/../h/riscv.hpp" 1
 191              	}
 376              		csrw sstatus, a5
 377              	# 0 "" 2
 378              	.LVL19:
 379              	 #NO_APP
 380              	.L3:
 381              	.LBE43:
 382              	.LBE42:
 383              	.LBE30:
 384              	.LBE48:
 385              		.loc 1 90 1
 386 01d8 83308107 		ld	ra,120(sp)
GAS LISTING /tmp/ccQeggtU.s 			page 14


 387              		.cfi_remember_state
 388              		.cfi_restore 1
 389 01dc 03340107 		ld	s0,112(sp)
 390              		.cfi_restore 8
 391              		.cfi_def_cfa 2, 128
 392 01e0 83348106 		ld	s1,104(sp)
 393              		.cfi_restore 9
 394              	.LVL20:
 395 01e4 13010108 		addi	sp,sp,128
 396              		.cfi_def_cfa_offset 0
 397 01e8 67800000 		jr	ra
 398              	.LVL21:
 399              	.L5:
 400              		.cfi_restore_state
 401              	.LBB49:
 402              	.LBB45:
 403              	.LBB44:
 404              	.LBB39:
  48:src/riscv.cpp ****             case 0x13:
 405              		.loc 1 48 13 is_stmt 1
  49:src/riscv.cpp ****                 _thread::thread_dispatch();
 406              		.loc 1 49 17
  49:src/riscv.cpp ****                 _thread::thread_dispatch();
 407              		.loc 1 49 41 is_stmt 0
 408 01ec 97000000 		call	_ZN7_thread15thread_dispatchEv
 408      E7800000 
 409              	.LVL22:
  50:src/riscv.cpp ****                 break;
 410              		.loc 1 50 17 is_stmt 1
 411 01f4 6FF05FFD 		j	.L9
 412              	.L19:
 413              	.LBE39:
 414              	.LBE44:
 415              	.LBE45:
  63:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 416              		.loc 1 63 9
 417              	.LVL23:
 418              	.LBB46:
 419              	.LBB47:
 156:src/../h/riscv.hpp **** }
 420              		.loc 2 156 5
 156:src/../h/riscv.hpp **** }
 421              		.loc 2 156 64 is_stmt 0
 422 01f8 93072000 		li	a5,2
 423              	 #APP
 424              	# 156 "src/../h/riscv.hpp" 1
 157:src/../h/riscv.hpp **** 
 425              		csrc sip, a5
 426              	# 0 "" 2
 427              		.loc 2 157 1
 428              	 #NO_APP
 429 0200 6FF09FFD 		j	.L3
 430              	.LVL24:
 431              	.L20:
 432              	.LBE47:
 433              	.LBE46:
  66:src/riscv.cpp ****         console_handler();
GAS LISTING /tmp/ccQeggtU.s 			page 15


 434              		.loc 1 66 9 is_stmt 1
  66:src/riscv.cpp ****         console_handler();
 435              		.loc 1 66 24 is_stmt 0
 436 0204 97000000 		call	console_handler
 436      E7800000 
 437              	.LVL25:
 438 020c 6FF0DFFC 		j	.L3
 439              	.L21:
  76:src/riscv.cpp ****             case 2:
 440              		.loc 1 76 13 is_stmt 1
  77:src/riscv.cpp ****                 printString(" Nelegelna instrukcija");
 441              		.loc 1 77 17
  77:src/riscv.cpp ****                 printString(" Nelegelna instrukcija");
 442              		.loc 1 77 28 is_stmt 0
 443 0210 17050000 		lla	a0,.LC3
 443      13050500 
 444 0218 97000000 		call	_Z11printStringPKc
 444      E7800000 
 445              	.LVL26:
  78:src/riscv.cpp ****                 break;
 446              		.loc 1 78 17 is_stmt 1
 447 0220 6FF09FFB 		j	.L3
 448              	.L14:
  79:src/riscv.cpp ****             case 5:
 449              		.loc 1 79 13
  80:src/riscv.cpp ****                 printString(" Nedozvoljena adresa citanja");
 450              		.loc 1 80 17
  80:src/riscv.cpp ****                 printString(" Nedozvoljena adresa citanja");
 451              		.loc 1 80 28 is_stmt 0
 452 0224 17050000 		lla	a0,.LC4
 452      13050500 
 453 022c 97000000 		call	_Z11printStringPKc
 453      E7800000 
 454              	.LVL27:
  81:src/riscv.cpp ****                 break;
 455              		.loc 1 81 17 is_stmt 1
 456 0234 6FF05FFA 		j	.L3
 457              	.L15:
  82:src/riscv.cpp ****             case 7:
 458              		.loc 1 82 13
  83:src/riscv.cpp ****                 printString(" Nedozvoljena adresa upisa");
 459              		.loc 1 83 17
  83:src/riscv.cpp ****                 printString(" Nedozvoljena adresa upisa");
 460              		.loc 1 83 28 is_stmt 0
 461 0238 17050000 		lla	a0,.LC5
 461      13050500 
 462 0240 97000000 		call	_Z11printStringPKc
 462      E7800000 
 463              	.LVL28:
  84:src/riscv.cpp ****                 break;
 464              		.loc 1 84 17 is_stmt 1
 465 0248 6FF01FF9 		j	.L3
 466              	.LBE49:
 467              		.cfi_endproc
 468              	.LFE33:
 470              	.Letext0:
 471              		.file 3 "src/../h/../lib/hw.h"
GAS LISTING /tmp/ccQeggtU.s 			page 16


 472              		.file 4 "src/../h/_thread.hpp"
 473              		.file 5 "src/../test/../h/syscall_c.hpp"
 474              		.file 6 "src/../lib/console.h"
 475              		.file 7 "src/../test/printing.hpp"
GAS LISTING /tmp/ccQeggtU.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccQeggtU.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccQeggtU.s:16     .text:0000000000000000 .L0 
     /tmp/ccQeggtU.s:17     .text:0000000000000000 .L0 
     /tmp/ccQeggtU.s:18     .text:0000000000000004 .L0 
     /tmp/ccQeggtU.s:20     .text:0000000000000008 .L0 
     /tmp/ccQeggtU.s:22     .text:000000000000000c .L0 
     /tmp/ccQeggtU.s:24     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccQeggtU.s:30     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccQeggtU.s:36     .text:0000000000000014 .L0 
     /tmp/ccQeggtU.s:37     .text:0000000000000018 .L0 
     /tmp/ccQeggtU.s:38     .text:0000000000000018 .L0 
     /tmp/ccQeggtU.s:40     .text:000000000000001c .L0 
     /tmp/ccQeggtU.s:42     .text:0000000000000020 .L0 
     /tmp/ccQeggtU.s:71     .text:0000000000000020 _ZN5Riscv23interruptRoutineHandlerEv
     /tmp/ccQeggtU.s:74     .text:0000000000000020 .L0 
     /tmp/ccQeggtU.s:75     .text:0000000000000020 .L0 
     /tmp/ccQeggtU.s:76     .text:0000000000000024 .L0 
     /tmp/ccQeggtU.s:80     .text:0000000000000030 .L0 
     /tmp/ccQeggtU.s:81     .text:0000000000000030 .L0 
     /tmp/ccQeggtU.s:82     .text:0000000000000030 .L0 
     /tmp/ccQeggtU.s:84     .text:0000000000000034 .L0 
     /tmp/ccQeggtU.s:86     .text:0000000000000034 .L0 
     /tmp/ccQeggtU.s:87     .text:0000000000000034 .L0 
       src/riscv.cpp:20     .text:0000000000000034 .L0 
     /tmp/ccQeggtU.s:95     .text:000000000000003c .L0 
       src/riscv.cpp:21     .text:000000000000003c .L0 
     /tmp/ccQeggtU.s:103    .text:0000000000000044 .L0 
       src/riscv.cpp:22     .text:0000000000000044 .L0 
     /tmp/ccQeggtU.s:111    .text:000000000000004c .L0 
       src/riscv.cpp:23     .text:000000000000004c .L0 
     /tmp/ccQeggtU.s:120    .text:0000000000000054 .L0 
     /tmp/ccQeggtU.s:124    .text:0000000000000054 .L0 
     /tmp/ccQeggtU.s:125    .text:0000000000000054 .L0 
     /tmp/ccQeggtU.s:126    .text:0000000000000054 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000054 .L0 
     /tmp/ccQeggtU.s:134    .text:000000000000005c .L0 
     /tmp/ccQeggtU.s:135    .text:000000000000005c .L0 
     /tmp/ccQeggtU.s:141    .text:0000000000000060 .L0 
     /tmp/ccQeggtU.s:142    .text:0000000000000060 .L0 
     /tmp/ccQeggtU.s:144    .text:0000000000000064 .L0 
     /tmp/ccQeggtU.s:147    .text:000000000000006c .L0 
     /tmp/ccQeggtU.s:152    .text:000000000000007c .L0 
     /tmp/ccQeggtU.s:157    .text:000000000000008c .L0 
     /tmp/ccQeggtU.s:158    .text:000000000000008c .L0 
     /tmp/ccQeggtU.s:164    .text:000000000000009c .L0 
     /tmp/ccQeggtU.s:165    .text:000000000000009c .L0 
     /tmp/ccQeggtU.s:166    .text:000000000000009c .L0 
  src/../h/riscv.hpp:116    .text:000000000000009c .L0 
     /tmp/ccQeggtU.s:174    .text:00000000000000a4 .L0 
     /tmp/ccQeggtU.s:175    .text:00000000000000a4 .L0 
     /tmp/ccQeggtU.s:179    .text:00000000000000a8 .L0 
     /tmp/ccQeggtU.s:185    .text:00000000000000bc .L0 
     /tmp/ccQeggtU.s:186    .text:00000000000000bc .L0 
GAS LISTING /tmp/ccQeggtU.s 			page 18


     /tmp/ccQeggtU.s:192    .text:00000000000000cc .L0 
     /tmp/ccQeggtU.s:193    .text:00000000000000cc .L0 
     /tmp/ccQeggtU.s:194    .text:00000000000000cc .L0 
  src/../h/riscv.hpp:140    .text:00000000000000cc .L0 
     /tmp/ccQeggtU.s:202    .text:00000000000000d4 .L0 
     /tmp/ccQeggtU.s:203    .text:00000000000000d4 .L0 
     /tmp/ccQeggtU.s:207    .text:00000000000000d8 .L0 
     /tmp/ccQeggtU.s:213    .text:00000000000000ec .L0 
     /tmp/ccQeggtU.s:214    .text:00000000000000ec .L0 
     /tmp/ccQeggtU.s:218    .text:00000000000000fc .L0 
     /tmp/ccQeggtU.s:219    .text:00000000000000fc .L0 
     /tmp/ccQeggtU.s:225    .text:0000000000000110 .L0 
     /tmp/ccQeggtU.s:232    .text:0000000000000128 .L0 
     /tmp/ccQeggtU.s:233    .text:0000000000000128 .L0 
     /tmp/ccQeggtU.s:234    .text:0000000000000128 .L0 
     /tmp/ccQeggtU.s:239    .text:0000000000000138 .L0 
     /tmp/ccQeggtU.s:240    .text:0000000000000138 .L0 
     /tmp/ccQeggtU.s:247    .text:000000000000013c .L0 
     /tmp/ccQeggtU.s:248    .text:000000000000013c .L0 
     /tmp/ccQeggtU.s:249    .text:000000000000013c .L0 
  src/../h/riscv.hpp:116    .text:000000000000013c .L0 
     /tmp/ccQeggtU.s:257    .text:0000000000000144 .L0 
     /tmp/ccQeggtU.s:258    .text:0000000000000144 .L0 
     /tmp/ccQeggtU.s:262    .text:0000000000000148 .L0 
     /tmp/ccQeggtU.s:264    .text:000000000000014c .L0 
     /tmp/ccQeggtU.s:268    .text:0000000000000150 .L0 
     /tmp/ccQeggtU.s:269    .text:0000000000000150 .L0 
     /tmp/ccQeggtU.s:270    .text:0000000000000150 .L0 
  src/../h/riscv.hpp:184    .text:0000000000000150 .L0 
     /tmp/ccQeggtU.s:278    .text:0000000000000158 .L0 
     /tmp/ccQeggtU.s:279    .text:0000000000000158 .L0 
     /tmp/ccQeggtU.s:283    .text:000000000000015c .L0 
     /tmp/ccQeggtU.s:286    .text:0000000000000160 .L0 
     /tmp/ccQeggtU.s:287    .text:0000000000000160 .L0 
     /tmp/ccQeggtU.s:289    .text:0000000000000164 .L0 
     /tmp/ccQeggtU.s:298    .text:0000000000000180 .L0 
     /tmp/ccQeggtU.s:299    .text:0000000000000180 .L0 
     /tmp/ccQeggtU.s:300    .text:0000000000000180 .L0 
     /tmp/ccQeggtU.s:301    .text:0000000000000180 .L0 
     /tmp/ccQeggtU.s:304    .text:0000000000000188 .L0 
     /tmp/ccQeggtU.s:308    .text:000000000000018c .L0 
     /tmp/ccQeggtU.s:312    .text:0000000000000194 .L0 
     /tmp/ccQeggtU.s:313    .text:0000000000000194 .L0 
     /tmp/ccQeggtU.s:314    .text:0000000000000194 .L0 
     /tmp/ccQeggtU.s:315    .text:0000000000000194 .L0 
     /tmp/ccQeggtU.s:320    .text:00000000000001a0 .L0 
     /tmp/ccQeggtU.s:322    .text:00000000000001a0 .L0 
     /tmp/ccQeggtU.s:323    .text:00000000000001a0 .L0 
     /tmp/ccQeggtU.s:324    .text:00000000000001a0 .L0 
     /tmp/ccQeggtU.s:330    .text:00000000000001b0 .L0 
     /tmp/ccQeggtU.s:331    .text:00000000000001b0 .L0 
     /tmp/ccQeggtU.s:338    .text:00000000000001c4 .L0 
       src/riscv.cpp:41     .text:00000000000001c4 .L0 
     /tmp/ccQeggtU.s:350    .text:00000000000001c8 .L0 
     /tmp/ccQeggtU.s:351    .text:00000000000001c8 .L0 
     /tmp/ccQeggtU.s:352    .text:00000000000001c8 .L0 
     /tmp/ccQeggtU.s:357    .text:00000000000001cc .L0 
GAS LISTING /tmp/ccQeggtU.s 			page 19


  src/../h/riscv.hpp:122    .text:00000000000001cc .L0 
     /tmp/ccQeggtU.s:367    .text:00000000000001d0 .L0 
     /tmp/ccQeggtU.s:368    .text:00000000000001d0 .L0 
     /tmp/ccQeggtU.s:373    .text:00000000000001d4 .L0 
  src/../h/riscv.hpp:190    .text:00000000000001d4 .L0 
     /tmp/ccQeggtU.s:386    .text:00000000000001d8 .L0 
     /tmp/ccQeggtU.s:387    .text:00000000000001dc .L0 
     /tmp/ccQeggtU.s:388    .text:00000000000001dc .L0 
     /tmp/ccQeggtU.s:390    .text:00000000000001e0 .L0 
     /tmp/ccQeggtU.s:391    .text:00000000000001e0 .L0 
     /tmp/ccQeggtU.s:393    .text:00000000000001e4 .L0 
     /tmp/ccQeggtU.s:396    .text:00000000000001e8 .L0 
     /tmp/ccQeggtU.s:400    .text:00000000000001ec .L0 
     /tmp/ccQeggtU.s:406    .text:00000000000001ec .L0 
     /tmp/ccQeggtU.s:407    .text:00000000000001ec .L0 
     /tmp/ccQeggtU.s:408    .text:00000000000001ec .L0 
     /tmp/ccQeggtU.s:411    .text:00000000000001f4 .L0 
     /tmp/ccQeggtU.s:420    .text:00000000000001f8 .L0 
     /tmp/ccQeggtU.s:421    .text:00000000000001f8 .L0 
     /tmp/ccQeggtU.s:422    .text:00000000000001f8 .L0 
     /tmp/ccQeggtU.s:429    .text:0000000000000200 .L0 
     /tmp/ccQeggtU.s:435    .text:0000000000000204 .L0 
     /tmp/ccQeggtU.s:436    .text:0000000000000204 .L0 
     /tmp/ccQeggtU.s:441    .text:0000000000000210 .L0 
     /tmp/ccQeggtU.s:442    .text:0000000000000210 .L0 
     /tmp/ccQeggtU.s:443    .text:0000000000000210 .L0 
     /tmp/ccQeggtU.s:447    .text:0000000000000220 .L0 
     /tmp/ccQeggtU.s:450    .text:0000000000000224 .L0 
     /tmp/ccQeggtU.s:451    .text:0000000000000224 .L0 
     /tmp/ccQeggtU.s:452    .text:0000000000000224 .L0 
     /tmp/ccQeggtU.s:456    .text:0000000000000234 .L0 
     /tmp/ccQeggtU.s:459    .text:0000000000000238 .L0 
     /tmp/ccQeggtU.s:460    .text:0000000000000238 .L0 
     /tmp/ccQeggtU.s:461    .text:0000000000000238 .L0 
     /tmp/ccQeggtU.s:465    .text:0000000000000248 .L0 
     /tmp/ccQeggtU.s:467    .text:000000000000024c .L0 
     /tmp/ccQeggtU.s:476    .text:000000000000024c .L0 
     /tmp/ccQeggtU.s:47     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccQeggtU.s:158    .text:000000000000008c .L0 
     /tmp/ccQeggtU.s:50     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccQeggtU.s:186    .text:00000000000000bc .L0 
     /tmp/ccQeggtU.s:53     .rodata.str1.8:0000000000000020 .LC2
     /tmp/ccQeggtU.s:214    .text:00000000000000ec .L0 
     /tmp/ccQeggtU.s:65     .rodata.str1.8:0000000000000090 .LC6
     /tmp/ccQeggtU.s:234    .text:0000000000000128 .L0 
     /tmp/ccQeggtU.s:56     .rodata.str1.8:0000000000000038 .LC3
     /tmp/ccQeggtU.s:443    .text:0000000000000210 .L0 
     /tmp/ccQeggtU.s:59     .rodata.str1.8:0000000000000050 .LC4
     /tmp/ccQeggtU.s:452    .text:0000000000000224 .L0 
     /tmp/ccQeggtU.s:62     .rodata.str1.8:0000000000000070 .LC5
     /tmp/ccQeggtU.s:461    .text:0000000000000238 .L0 
     /tmp/ccQeggtU.s:241    .text:000000000000013c .L18
     /tmp/ccQeggtU.s:412    .text:00000000000001f8 .L19
     /tmp/ccQeggtU.s:431    .text:0000000000000204 .L20
     /tmp/ccQeggtU.s:448    .text:0000000000000224 .L14
     /tmp/ccQeggtU.s:457    .text:0000000000000238 .L15
     /tmp/ccQeggtU.s:439    .text:0000000000000210 .L21
GAS LISTING /tmp/ccQeggtU.s 			page 20


     /tmp/ccQeggtU.s:380    .text:00000000000001d8 .L3
     /tmp/ccQeggtU.s:399    .text:00000000000001ec .L5
     /tmp/ccQeggtU.s:305    .text:000000000000018c .L6
     /tmp/ccQeggtU.s:318    .text:00000000000001a0 .L7
     /tmp/ccQeggtU.s:346    .text:00000000000001c8 .L9
     /tmp/ccQeggtU.s:1547   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccQeggtU.s:2464   .debug_str:0000000000000086 .LASF101
     /tmp/ccQeggtU.s:2590   .debug_str:0000000000000525 .LASF102
     /tmp/ccQeggtU.s:2516   .debug_str:00000000000002e6 .LASF103
     /tmp/ccQeggtU.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccQeggtU.s:470    .text:000000000000024c .Letext0
     /tmp/ccQeggtU.s:2438   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccQeggtU.s:2568   .debug_str:000000000000049c .LASF0
     /tmp/ccQeggtU.s:2584   .debug_str:00000000000004f0 .LASF1
     /tmp/ccQeggtU.s:2558   .debug_str:0000000000000452 .LASF2
     /tmp/ccQeggtU.s:2532   .debug_str:000000000000038c .LASF4
     /tmp/ccQeggtU.s:2620   .debug_str:0000000000000608 .LASF3
     /tmp/ccQeggtU.s:2466   .debug_str:000000000000014a .LASF5
     /tmp/ccQeggtU.s:2588   .debug_str:0000000000000512 .LASF6
     /tmp/ccQeggtU.s:2566   .debug_str:0000000000000489 .LASF7
     /tmp/ccQeggtU.s:2648   .debug_str:00000000000006d3 .LASF8
     /tmp/ccQeggtU.s:2514   .debug_str:00000000000002d8 .LASF9
     /tmp/ccQeggtU.s:2600   .debug_str:0000000000000572 .LASF10
     /tmp/ccQeggtU.s:2642   .debug_str:00000000000006b2 .LASF11
     /tmp/ccQeggtU.s:2468   .debug_str:0000000000000151 .LASF12
     /tmp/ccQeggtU.s:2446   .debug_str:000000000000002b .LASF13
     /tmp/ccQeggtU.s:2474   .debug_str:000000000000017f .LASF14
     /tmp/ccQeggtU.s:2612   .debug_str:00000000000005c4 .LASF15
     /tmp/ccQeggtU.s:2482   .debug_str:00000000000001df .LASF16
     /tmp/ccQeggtU.s:2580   .debug_str:00000000000004df .LASF60
     /tmp/ccQeggtU.s:2542   .debug_str:00000000000003b2 .LASF104
     /tmp/ccQeggtU.s:2626   .debug_str:000000000000064d .LASF17
     /tmp/ccQeggtU.s:2578   .debug_str:00000000000004d6 .LASF18
     /tmp/ccQeggtU.s:2538   .debug_str:00000000000003a1 .LASF19
     /tmp/ccQeggtU.s:2610   .debug_str:00000000000005b9 .LASF20
     /tmp/ccQeggtU.s:2658   .debug_str:0000000000000719 .LASF22
     /tmp/ccQeggtU.s:2526   .debug_str:000000000000035d .LASF21
     /tmp/ccQeggtU.s:2598   .debug_str:0000000000000554 .LASF23
     /tmp/ccQeggtU.s:2462   .debug_str:0000000000000078 .LASF24
     /tmp/ccQeggtU.s:2494   .debug_str:000000000000023d .LASF25
     /tmp/ccQeggtU.s:2628   .debug_str:0000000000000656 .LASF26
     /tmp/ccQeggtU.s:2444   .debug_str:0000000000000011 .LASF27
     /tmp/ccQeggtU.s:2448   .debug_str:000000000000003b .LASF28
     /tmp/ccQeggtU.s:2498   .debug_str:0000000000000260 .LASF30
     /tmp/ccQeggtU.s:2492   .debug_str:0000000000000234 .LASF32
     /tmp/ccQeggtU.s:2490   .debug_str:000000000000021f .LASF34
     /tmp/ccQeggtU.s:2624   .debug_str:0000000000000646 .LASF29
     /tmp/ccQeggtU.s:2604   .debug_str:0000000000000586 .LASF31
     /tmp/ccQeggtU.s:2638   .debug_str:00000000000006a3 .LASF33
     /tmp/ccQeggtU.s:2632   .debug_str:000000000000066a .LASF35
     /tmp/ccQeggtU.s:2506   .debug_str:00000000000002a1 .LASF36
     /tmp/ccQeggtU.s:2484   .debug_str:00000000000001f5 .LASF37
     /tmp/ccQeggtU.s:2442   .debug_str:0000000000000009 .LASF38
     /tmp/ccQeggtU.s:2524   .debug_str:0000000000000349 .LASF39
     /tmp/ccQeggtU.s:2640   .debug_str:00000000000006aa .LASF40
     /tmp/ccQeggtU.s:2470   .debug_str:0000000000000161 .LASF41
     /tmp/ccQeggtU.s:2662   .debug_str:000000000000073c .LASF42
GAS LISTING /tmp/ccQeggtU.s 			page 21


     /tmp/ccQeggtU.s:2500   .debug_str:0000000000000275 .LASF43
     /tmp/ccQeggtU.s:2570   .debug_str:00000000000004a9 .LASF44
     /tmp/ccQeggtU.s:2656   .debug_str:0000000000000706 .LASF45
     /tmp/ccQeggtU.s:2460   .debug_str:0000000000000071 .LASF46
     /tmp/ccQeggtU.s:2504   .debug_str:000000000000028e .LASF47
     /tmp/ccQeggtU.s:2512   .debug_str:00000000000002d2 .LASF48
     /tmp/ccQeggtU.s:2636   .debug_str:0000000000000691 .LASF49
     /tmp/ccQeggtU.s:2458   .debug_str:000000000000006b .LASF50
     /tmp/ccQeggtU.s:2666   .debug_str:0000000000000750 .LASF51
     /tmp/ccQeggtU.s:2660   .debug_str:0000000000000731 .LASF52
     /tmp/ccQeggtU.s:2618   .debug_str:00000000000005f0 .LASF53
     /tmp/ccQeggtU.s:2582   .debug_str:00000000000004e5 .LASF54
     /tmp/ccQeggtU.s:2546   .debug_str:00000000000003cb .LASF55
     /tmp/ccQeggtU.s:2472   .debug_str:0000000000000175 .LASF56
     /tmp/ccQeggtU.s:2528   .debug_str:000000000000036e .LASF57
     /tmp/ccQeggtU.s:2564   .debug_str:000000000000047f .LASF58
     /tmp/ccQeggtU.s:2520   .debug_str:0000000000000316 .LASF59
     /tmp/ccQeggtU.s:2608   .debug_str:00000000000005a1 .LASF77
     /tmp/ccQeggtU.s:2476   .debug_str:000000000000018b .LASF79
     /tmp/ccQeggtU.s:2530   .debug_str:0000000000000384 .LASF61
     /tmp/ccQeggtU.s:2454   .debug_str:0000000000000057 .LASF105
     /tmp/ccQeggtU.s:2496   .debug_str:0000000000000258 .LASF106
     /tmp/ccQeggtU.s:2646   .debug_str:00000000000006ca .LASF62
     /tmp/ccQeggtU.s:2594   .debug_str:000000000000053e .LASF64
     /tmp/ccQeggtU.s:2592   .debug_str:0000000000000533 .LASF107
     /tmp/ccQeggtU.s:2554   .debug_str:0000000000000430 .LASF108
     /tmp/ccQeggtU.s:2560   .debug_str:0000000000000460 .LASF63
     /tmp/ccQeggtU.s:2552   .debug_str:0000000000000415 .LASF65
     /tmp/ccQeggtU.s:2650   .debug_str:00000000000006e3 .LASF66
     /tmp/ccQeggtU.s:2622   .debug_str:000000000000061a .LASF67
     /tmp/ccQeggtU.s:2602   .debug_str:0000000000000581 .LASF109
     /tmp/ccQeggtU.s:2614   .debug_str:00000000000005da .LASF68
     /tmp/ccQeggtU.s:2634   .debug_str:000000000000067d .LASF69
     /tmp/ccQeggtU.s:2456   .debug_str:000000000000005f .LASF70
     /tmp/ccQeggtU.s:2510   .debug_str:00000000000002b7 .LASF71
     /tmp/ccQeggtU.s:2574   .debug_str:00000000000004b6 .LASF72
     /tmp/ccQeggtU.s:2536   .debug_str:000000000000039c .LASF73
     /tmp/ccQeggtU.s:2572   .debug_str:00000000000004b0 .LASF74
     /tmp/ccQeggtU.s:2540   .debug_str:00000000000003aa .LASF75
     /tmp/ccQeggtU.s:2534   .debug_str:0000000000000393 .LASF76
     /tmp/ccQeggtU.s:2652   .debug_str:00000000000006f1 .LASF110
     /tmp/ccQeggtU.s:2548   .debug_str:00000000000003e3 .LASF111
     /tmp/ccQeggtU.s:2478   .debug_str:00000000000001b0 .LASF78
     /tmp/ccQeggtU.s:2480   .debug_str:00000000000001c0 .LASF80
     /tmp/ccQeggtU.s:2544   .debug_str:00000000000003bd .LASF81
     /tmp/ccQeggtU.s:2522   .debug_str:000000000000032c .LASF82
     /tmp/ccQeggtU.s:2440   .debug_str:0000000000000000 .LASF83
     /tmp/ccQeggtU.s:2502   .debug_str:0000000000000289 .LASF84
     /tmp/ccQeggtU.s:72     .text:0000000000000020 .LFB33
     /tmp/ccQeggtU.s:468    .text:000000000000024c .LFE33
     /tmp/ccQeggtU.s:2486   .debug_str:0000000000000209 .LASF85
     /tmp/ccQeggtU.s:2630   .debug_str:0000000000000663 .LASF86
     /tmp/ccQeggtU.s:2508   .debug_str:00000000000002a9 .LASF87
     /tmp/ccQeggtU.s:2556   .debug_str:000000000000044b .LASF88
     /tmp/ccQeggtU.s:2356   .debug_loc:0000000000000000 .LLST0
     /tmp/ccQeggtU.s:2450   .debug_str:0000000000000044 .LASF89
     /tmp/ccQeggtU.s:2373   .debug_loc:000000000000004b .LLST1
GAS LISTING /tmp/ccQeggtU.s 			page 22


     /tmp/ccQeggtU.s:2430   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccQeggtU.s:2576   .debug_str:00000000000004d1 .LASF90
     /tmp/ccQeggtU.s:2606   .debug_str:0000000000000599 .LASF91
     /tmp/ccQeggtU.s:321    .text:00000000000001a0 .LBB37
     /tmp/ccQeggtU.s:347    .text:00000000000001c8 .LBE37
     /tmp/ccQeggtU.s:2664   .debug_str:0000000000000744 .LASF92
     /tmp/ccQeggtU.s:2384   .debug_loc:0000000000000081 .LLST2
     /tmp/ccQeggtU.s:326    .text:00000000000001ac .LVL11
     /tmp/ccQeggtU.s:336    .text:00000000000001c4 .LVL14
     /tmp/ccQeggtU.s:245    .text:000000000000013c .LBB31
     /tmp/ccQeggtU.s:260    .text:0000000000000148 .LBE31
     /tmp/ccQeggtU.s:266    .text:0000000000000150 .LBB33
     /tmp/ccQeggtU.s:281    .text:000000000000015c .LBE33
     /tmp/ccQeggtU.s:354    .text:00000000000001cc .LBB40
     /tmp/ccQeggtU.s:365    .text:00000000000001d0 .LBE40
     /tmp/ccQeggtU.s:2395   .debug_loc:00000000000000b7 .LLST3
     /tmp/ccQeggtU.s:370    .text:00000000000001d4 .LBB42
     /tmp/ccQeggtU.s:382    .text:00000000000001d8 .LBE42
     /tmp/ccQeggtU.s:2402   .debug_loc:00000000000000da .LLST4
     /tmp/ccQeggtU.s:302    .text:0000000000000188 .LVL9
     /tmp/ccQeggtU.s:316    .text:000000000000019c .LVL10
     /tmp/ccQeggtU.s:409    .text:00000000000001f4 .LVL22
     /tmp/ccQeggtU.s:121    .text:0000000000000054 .LBB23
     /tmp/ccQeggtU.s:138    .text:0000000000000060 .LBE23
     /tmp/ccQeggtU.s:162    .text:000000000000009c .LBB26
     /tmp/ccQeggtU.s:177    .text:00000000000000a8 .LBE26
     /tmp/ccQeggtU.s:190    .text:00000000000000cc .LBB28
     /tmp/ccQeggtU.s:205    .text:00000000000000d8 .LBE28
     /tmp/ccQeggtU.s:418    .text:00000000000001f8 .LBB46
     /tmp/ccQeggtU.s:433    .text:0000000000000204 .LBE46
     /tmp/ccQeggtU.s:2409   .debug_loc:00000000000000fd .LLST5
     /tmp/ccQeggtU.s:160    .text:000000000000009c .LVL2
     /tmp/ccQeggtU.s:183    .text:00000000000000bc .LVL3
     /tmp/ccQeggtU.s:188    .text:00000000000000cc .LVL4
     /tmp/ccQeggtU.s:211    .text:00000000000000ec .LVL5
     /tmp/ccQeggtU.s:216    .text:00000000000000fc .LVL6
     /tmp/ccQeggtU.s:223    .text:0000000000000110 .LVL7
     /tmp/ccQeggtU.s:236    .text:0000000000000138 .LVL8
     /tmp/ccQeggtU.s:437    .text:000000000000020c .LVL25
     /tmp/ccQeggtU.s:445    .text:0000000000000220 .LVL26
     /tmp/ccQeggtU.s:454    .text:0000000000000234 .LVL27
     /tmp/ccQeggtU.s:463    .text:0000000000000248 .LVL28
     /tmp/ccQeggtU.s:13     .text:0000000000000000 .LFB32
     /tmp/ccQeggtU.s:43     .text:0000000000000020 .LFE32
     /tmp/ccQeggtU.s:2518   .debug_str:0000000000000311 .LASF93
     /tmp/ccQeggtU.s:2550   .debug_str:000000000000040f .LASF94
     /tmp/ccQeggtU.s:2596   .debug_str:000000000000054e .LASF112
     /tmp/ccQeggtU.s:2616   .debug_str:00000000000005e0 .LASF113
     /tmp/ccQeggtU.s:2654   .debug_str:00000000000006ff .LASF95
     /tmp/ccQeggtU.s:2562   .debug_str:000000000000046c .LASF96
     /tmp/ccQeggtU.s:2452   .debug_str:000000000000004b .LASF97
     /tmp/ccQeggtU.s:2586   .debug_str:0000000000000503 .LASF98
     /tmp/ccQeggtU.s:2644   .debug_str:00000000000006c1 .LASF99
     /tmp/ccQeggtU.s:2488   .debug_str:000000000000020f .LASF100
     /tmp/ccQeggtU.s:119    .text:0000000000000054 .LVL0
     /tmp/ccQeggtU.s:344    .text:00000000000001c8 .LVL15
     /tmp/ccQeggtU.s:398    .text:00000000000001ec .LVL21
GAS LISTING /tmp/ccQeggtU.s 			page 23


     /tmp/ccQeggtU.s:136    .text:0000000000000060 .LVL1
     /tmp/ccQeggtU.s:394    .text:00000000000001e4 .LVL20
     /tmp/ccQeggtU.s:328    .text:00000000000001b0 .LVL12
     /tmp/ccQeggtU.s:332    .text:00000000000001b4 .LVL13
     /tmp/ccQeggtU.s:353    .text:00000000000001cc .LVL16
     /tmp/ccQeggtU.s:362    .text:00000000000001d0 .LVL17
     /tmp/ccQeggtU.s:369    .text:00000000000001d4 .LVL18
     /tmp/ccQeggtU.s:378    .text:00000000000001d8 .LVL19
     /tmp/ccQeggtU.s:417    .text:00000000000001f8 .LVL23
     /tmp/ccQeggtU.s:430    .text:0000000000000204 .LVL24
     /tmp/ccQeggtU.s:477    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccQeggtU.s:243    .text:000000000000013c .LBB30
     /tmp/ccQeggtU.s:383    .text:00000000000001d8 .LBE30
     /tmp/ccQeggtU.s:402    .text:00000000000001ec .LBB45
     /tmp/ccQeggtU.s:415    .text:00000000000001f8 .LBE45

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z8printIntiii
_ZN7_thread11thread_exitEv
__getc
_Znam
_ZN7_thread13create_threadEPPS_PFvPvES2_S2_
_ZN7_thread15thread_dispatchEv
console_handler
