GAS LISTING /tmp/ccUzDC5F.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB42:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/_thread.hpp"
   8:src/riscv.cpp **** #include "../test/printing.hpp"
   9:src/riscv.cpp **** #include "../h/_sem.hpp"
  10:src/riscv.cpp **** #include "../h/MemoryAllocator.h"
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::popSppSpie(){
  15              		.loc 1 13 25
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  14:src/riscv.cpp ****     mc_sstatus(Riscv::SSTATUS_SPP);
  23              		.loc 1 14 5
  24              	.LVL0:
  25              	.LBB33:
  26              	.LBB34:
  27              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS_PROJEKAT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS_PROJEKAT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** 
   9:src/../h/riscv.hpp **** #include "../lib/hw.h"
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** class Riscv
  13:src/../h/riscv.hpp **** {
  14:src/../h/riscv.hpp **** public:
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // pop status.spp and sstatus.spie bits
  17:src/../h/riscv.hpp ****     static void popSppSpie();
GAS LISTING /tmp/ccUzDC5F.s 			page 2


  18:src/../h/riscv.hpp ****     //implementaciju ove metode stavljam u cpp zato sto je vazno da ova staticka metoda
  19:src/../h/riscv.hpp ****     //bude ne inline, da bi se ovaj kod pozvao i da bi se promenio ra registar
  20:src/../h/riscv.hpp ****     //bitno je da znamo odakle se desio poziv
  21:src/../h/riscv.hpp ****     //jedini nacin da promenimo rezim privilegije je sa funkcijama koje se vracaju iz prekidne ruti
  22:src/../h/riscv.hpp ****     //pomocu sret, konekts novonapravljene niti nece ici preko normalne prekidne rutine vec ce ici 
  23:src/../h/riscv.hpp ****     //threadWrapera i u okviru njegove funckije treba izaci iz prekidne rutine
  24:src/../h/riscv.hpp ****     //sret ce se vratiti tamo gde je sepc rekao
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     //preko name manlinga uazi se u definiciju koja je napisana u fajlu preko asemblera
  27:src/../h/riscv.hpp ****     static void interruptRoutine();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  30:src/../h/riscv.hpp ****     static void pushRegisters();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  33:src/../h/riscv.hpp ****     static void popRegisters();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register scause
  36:src/../h/riscv.hpp ****     static uint64 r_scause();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register scause
  39:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // read register sepc
  42:src/../h/riscv.hpp ****     static uint64 r_sepc();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // write register sepc
  45:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // read register stvec
  48:src/../h/riscv.hpp ****     static uint64 r_stvec();
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // write register stvec
  51:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // read register stval
  54:src/../h/riscv.hpp ****     static uint64 r_stval();
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // write register stval
  57:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     enum BitMaskSip
  60:src/../h/riscv.hpp ****     {
  61:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  62:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  63:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  64:src/../h/riscv.hpp ****     };
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // mask set register sip
  67:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // mask clear register sip
  70:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // read register sip
  73:src/../h/riscv.hpp ****     static uint64 r_sip();
  74:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccUzDC5F.s 			page 3


  75:src/../h/riscv.hpp ****     // write register sip
  76:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     enum BitMaskSstatus
  79:src/../h/riscv.hpp ****     {
  80:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  81:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  82:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  83:src/../h/riscv.hpp ****     };
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // mask set register sstatus
  86:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // mask clear register sstatus
  89:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     // read register sstatus
  92:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     // write register sstatus
  95:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** private:
  98:src/../h/riscv.hpp ****     static void interruptRoutineHandler();
  99:src/../h/riscv.hpp **** };
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile scause;
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 105:src/../h/riscv.hpp ****     return scause;
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile sepc;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 117:src/../h/riscv.hpp ****     return sepc;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stvec;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 129:src/../h/riscv.hpp ****     return stvec;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccUzDC5F.s 			page 4


 132:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     uint64 volatile stval;
 140:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 141:src/../h/riscv.hpp ****     return stval;
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 147:src/../h/riscv.hpp **** }
 148:src/../h/riscv.hpp **** 
 149:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 150:src/../h/riscv.hpp **** {
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     uint64 volatile sip;
 162:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 163:src/../h/riscv.hpp ****     return sip;
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 169:src/../h/riscv.hpp **** }
 170:src/../h/riscv.hpp **** 
 171:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 172:src/../h/riscv.hpp **** {
 173:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
  28              		.loc 2 178 5
  29              		.loc 2 178 68 is_stmt 0
  30 000c 93070010 		li	a5,256
  31              	 #APP
  32              	# 178 "src/../h/riscv.hpp" 1
 179              	}
  33              		csrc sstatus, a5
  34              	# 0 "" 2
  35              	.LVL1:
  36              	 #NO_APP
GAS LISTING /tmp/ccUzDC5F.s 			page 5


  37              	.LBE34:
  38              	.LBE33:
  15:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra"); // zato ovde upisujem da nas vrati tamo odakle je i ova fun
  39              		.loc 1 15 5 is_stmt 1
  40              		.loc 1 15 39 is_stmt 0
  41              	 #APP
  42              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile ("sret"); //ovo sret ce vratiti tamo gde je sepc rekao, i to nam ne odgovara
  43              		csrw sepc, ra
  44              	# 0 "" 2
  45              		.loc 1 16 5 is_stmt 1
  46              		.loc 1 16 30 is_stmt 0
  47              	# 16 "src/riscv.cpp" 1
  17              	
  18:src/riscv.cpp **** }
  48              		sret
  49              	# 0 "" 2
  50              		.loc 1 18 1
  51              	 #NO_APP
  52 001c 03348100 		ld	s0,8(sp)
  53              		.cfi_restore 8
  54              		.cfi_def_cfa 2, 16
  55 0020 13010101 		addi	sp,sp,16
  56              		.cfi_def_cfa_offset 0
  57 0024 67800000 		jr	ra
  58              		.cfi_endproc
  59              	.LFE42:
  61              		.section	.rodata.str1.8,"aMS",@progbits,1
  62              		.align	3
  63              	.LC0:
  64 0000 0A506320 		.string	"\nPc greske: "
  64      67726573 
  64      6B653A20 
  64      00
  65 000d 000000   		.align	3
  66              	.LC1:
  67 0010 0A537456 		.string	"\nStVal greske: "
  67      616C2067 
  67      7265736B 
  67      653A2000 
  68              		.align	3
  69              	.LC2:
  70 0020 0A52617A 		.string	"\nRazlog greske scause: "
  70      6C6F6720 
  70      67726573 
  70      6B652073 
  70      63617573 
  71              		.align	3
  72              	.LC3:
  73 0038 204E656C 		.string	" Nelegelna instrukcija"
  73      6567656C 
  73      6E612069 
  73      6E737472 
  73      756B6369 
  74 004f 00       		.align	3
  75              	.LC4:
  76 0050 204E6564 		.string	" Nedozvoljena adresa citanja"
GAS LISTING /tmp/ccUzDC5F.s 			page 6


  76      6F7A766F 
  76      6C6A656E 
  76      61206164 
  76      72657361 
  77 006d 000000   		.align	3
  78              	.LC5:
  79 0070 204E6564 		.string	" Nedozvoljena adresa upisa"
  79      6F7A766F 
  79      6C6A656E 
  79      61206164 
  79      72657361 
  80 008b 00000000 		.align	3
  80      00
  81              	.LC6:
  82 0090 204F7374 		.string	" Ostalo"
  82      616C6F00 
  83              		.text
  84              		.align	2
  85              		.globl	_ZN5Riscv23interruptRoutineHandlerEv
  87              	_ZN5Riscv23interruptRoutineHandlerEv:
  88              	.LFB43:
  19:src/riscv.cpp **** 
  20:src/riscv.cpp **** 
  21:src/riscv.cpp **** 
  22:src/riscv.cpp **** void Riscv::interruptRoutineHandler(){
  89              		.loc 1 22 38 is_stmt 1
  90              		.cfi_startproc
  91 0028 130101F8 		addi	sp,sp,-128
  92              		.cfi_def_cfa_offset 128
  93 002c 233C1106 		sd	ra,120(sp)
  94 0030 23388106 		sd	s0,112(sp)
  95 0034 23349106 		sd	s1,104(sp)
  96              		.cfi_offset 1, -8
  97              		.cfi_offset 8, -16
  98              		.cfi_offset 9, -24
  99 0038 13040108 		addi	s0,sp,128
 100              		.cfi_def_cfa 8, 0
  23:src/riscv.cpp ****     uint64 volatile fcode;
 101              		.loc 1 23 5
  24:src/riscv.cpp ****     asm volatile("mv %0, a0" : "=r" (fcode));
 102              		.loc 1 24 5
 103              		.loc 1 24 45 is_stmt 0
 104              	 #APP
 105              	# 24 "src/riscv.cpp" 1
  25              	    uint64 retval = 0;
 106              		mv a5, a0
 107              	# 0 "" 2
 108              	 #NO_APP
 109 0040 233CF4FC 		sd	a5,-40(s0)
 110              		.loc 1 25 5 is_stmt 1
 111              	.LVL2:
  26:src/riscv.cpp **** 
  27:src/riscv.cpp ****     //r_scause -> read scause
  28:src/riscv.cpp ****     uint64 scause = r_scause(); // scause -> razlog prekida
 112              		.loc 1 28 5
 113              	.LBB35:
 114              	.LBB36:
GAS LISTING /tmp/ccUzDC5F.s 			page 7


 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 115              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return scause;
 116              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return scause;
 117              		.loc 2 104 72 is_stmt 0
 118              	 #APP
 119              	# 104 "src/../h/riscv.hpp" 1
 120              		csrr a5, scause
 121              	# 0 "" 2
 122              	 #NO_APP
 123 0048 2338F4FA 		sd	a5,-80(s0)
 105:src/../h/riscv.hpp **** }
 124              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 125              		.loc 2 105 12 is_stmt 0
 126 004c 833404FB 		ld	s1,-80(s0)
 127              	.LVL3:
 128              	.LBE36:
 129              	.LBE35:
  29:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();    //prelazak na sledecu instrukciju; jer procesor ponavlja in
 130              		.loc 1 29 5 is_stmt 1
 131              	.LBB37:
 132              	.LBB38:
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 133              		.loc 2 115 5
 116:src/../h/riscv.hpp ****     return sepc;
 134              		.loc 2 116 5
 116:src/../h/riscv.hpp ****     return sepc;
 135              		.loc 2 116 64 is_stmt 0
 136              	 #APP
 137              	# 116 "src/../h/riscv.hpp" 1
 138              		csrr a5, sepc
 139              	# 0 "" 2
 140              	 #NO_APP
 141 0054 2334F4FA 		sd	a5,-88(s0)
 117:src/../h/riscv.hpp **** }
 142              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 143              		.loc 2 117 12 is_stmt 0
 144 0058 833784FA 		ld	a5,-88(s0)
 145              	.LBE38:
 146              	.LBE37:
 147              		.loc 1 29 35
 148 005c 2338F4FC 		sd	a5,-48(s0)
  30:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 149              		.loc 1 30 5 is_stmt 1
 150              	.LBB39:
 151              	.LBB40:
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 152              		.loc 2 183 5
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 153              		.loc 2 184 5
 154              		.loc 2 184 76 is_stmt 0
GAS LISTING /tmp/ccUzDC5F.s 			page 8


 155              	 #APP
 156              	# 184 "src/../h/riscv.hpp" 1
 185              	    return sstatus;
 157              		csrr a5, sstatus
 158              	# 0 "" 2
 159              	 #NO_APP
 160 0064 2330F4FA 		sd	a5,-96(s0)
 161              		.loc 2 185 5 is_stmt 1
 162              		.loc 2 185 12 is_stmt 0
 163 0068 833704FA 		ld	a5,-96(s0)
 164              	.LBE40:
 165              	.LBE39:
 166              		.loc 1 30 41
 167 006c 2334F4FC 		sd	a5,-56(s0)
  31:src/riscv.cpp **** 
  32:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){
 168              		.loc 1 32 5 is_stmt 1
 169              	.LBB41:
 170              		.loc 1 32 40 is_stmt 0
 171 0070 138784FF 		addi	a4,s1,-8
 172              		.loc 1 32 5
 173 0074 93071000 		li	a5,1
 174 0078 63FAE70C 		bleu	a4,a5,.L25
  33:src/riscv.cpp ****         //softverski prekid, sistemski poziv iz koristnickog ili sistemskog rezima
  34:src/riscv.cpp **** 
  35:src/riscv.cpp ****         sepc = sepc+4;
  36:src/riscv.cpp ****         switch(fcode){
  37:src/riscv.cpp ****             case 0x01:{
  38:src/riscv.cpp ****                 void* ret;
  39:src/riscv.cpp ****                 size_t size;
  40:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (size));
  41:src/riscv.cpp ****                 ret = MemoryAllocator::mem_alloc(size);
  42:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ret));
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****                 break;
  45:src/riscv.cpp ****             }
  46:src/riscv.cpp ****             case 0x02:{
  47:src/riscv.cpp ****                 void* p;
  48:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (p));
  49:src/riscv.cpp ****                 retval = MemoryAllocator::mem_free(p);
  50:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  51:src/riscv.cpp **** 
  52:src/riscv.cpp ****                 break;
  53:src/riscv.cpp ****             }
  54:src/riscv.cpp ****             case 0x11: {
  55:src/riscv.cpp **** 
  56:src/riscv.cpp ****                 uint64 volatile handle, start_routine, arg;
  57:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));    //thread_t* handle
  58:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (start_routine));    //void (*function)(void*)
  59:src/riscv.cpp ****                 asm volatile("mv %0, a3" : "=r" (arg));
  60:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
  61:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
  62:src/riscv.cpp ****                                                 (void *) stack_space);
  63:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  64:src/riscv.cpp ****                 break;
  65:src/riscv.cpp ****                 }
  66:src/riscv.cpp ****             case 0x12: {
GAS LISTING /tmp/ccUzDC5F.s 			page 9


  67:src/riscv.cpp ****                 retval = _thread::thread_exit();
  68:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  69:src/riscv.cpp ****                 break;
  70:src/riscv.cpp ****                 }
  71:src/riscv.cpp ****             case 0x13:
  72:src/riscv.cpp ****                 _thread::thread_dispatch();
  73:src/riscv.cpp ****                 break;
  74:src/riscv.cpp **** 
  75:src/riscv.cpp ****             case 0x21:{
  76:src/riscv.cpp ****                 uint64 handle, init;
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
  79:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (init));
  80:src/riscv.cpp ****                 retval = _sem::open_sem((sem_t*)(handle), init);
  81:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****                 break;
  84:src/riscv.cpp ****             }
  85:src/riscv.cpp ****             case 0x22:{
  86:src/riscv.cpp ****                 uint64 handle;
  87:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
  88:src/riscv.cpp ****                 retval = _sem::close_sem((sem_t)handle);
  89:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  90:src/riscv.cpp **** 
  91:src/riscv.cpp ****                 break;
  92:src/riscv.cpp ****             }
  93:src/riscv.cpp ****             case 0x23:{
  94:src/riscv.cpp ****                 uint64 handle;
  95:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
  96:src/riscv.cpp ****                 retval = _sem::sem_wait((sem_t)handle);
  97:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  98:src/riscv.cpp **** 
  99:src/riscv.cpp ****                 break;
 100:src/riscv.cpp ****             }
 101:src/riscv.cpp ****             case 0x24:{
 102:src/riscv.cpp ****                 uint64 handle;
 103:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 104:src/riscv.cpp ****                 retval = _sem::sem_signal((sem_t)handle);
 105:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 106:src/riscv.cpp **** 
 107:src/riscv.cpp ****                 break;
 108:src/riscv.cpp ****             }
 109:src/riscv.cpp ****             case 0x26:{
 110:src/riscv.cpp ****                 uint64 handle;
 111:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 112:src/riscv.cpp ****                 retval = _sem::sem_trywait((sem_t)handle);
 113:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****                 break;
 116:src/riscv.cpp ****             }
 117:src/riscv.cpp ****             case 0x41:{
 118:src/riscv.cpp ****                 char ch = __getc();
 119:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ch));
 120:src/riscv.cpp ****                 break;
 121:src/riscv.cpp ****             }
 122:src/riscv.cpp ****             default:
 123:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccUzDC5F.s 			page 10


 124:src/riscv.cpp **** 
 125:src/riscv.cpp ****         }
 126:src/riscv.cpp **** 
 127:src/riscv.cpp ****             w_sepc(sepc); //ako je unutar dispacha promenjen pc ovde upisujem taj novi(sto je nekad
 128:src/riscv.cpp ****             w_sstatus(sstatus);
 129:src/riscv.cpp **** 
 130:src/riscv.cpp **** 
 131:src/riscv.cpp ****     }
 132:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL){
 175              		.loc 1 132 10 is_stmt 1
 176 007c 9307F0FF 		li	a5,-1
 177 0080 9397F703 		slli	a5,a5,63
 178 0084 93871700 		addi	a5,a5,1
 179 0088 638EF420 		beq	s1,a5,.L26
 133:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 134:src/riscv.cpp ****     }
 135:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL){
 180              		.loc 1 135 10
 181 008c 9307F0FF 		li	a5,-1
 182 0090 9397F703 		slli	a5,a5,63
 183 0094 93879700 		addi	a5,a5,9
 184 0098 638CF420 		beq	s1,a5,.L27
 136:src/riscv.cpp ****         console_handler();
 137:src/riscv.cpp ****     }
 138:src/riscv.cpp ****     else{
 139:src/riscv.cpp ****         printString("\nPc greske: ");
 185              		.loc 1 139 9
 186              		.loc 1 139 20 is_stmt 0
 187 009c 17050000 		lla	a0,.LC0
 187      13050500 
 188 00a4 97000000 		call	_Z11printStringPKc
 188      E7800000 
 189              	.LVL4:
 140:src/riscv.cpp ****         printInt(r_sepc());//cuva adresu na kooju se vracam posle prekidne rutine
 190              		.loc 1 140 9 is_stmt 1
 191              	.LBB42:
 192              	.LBB43:
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 193              		.loc 2 115 5
 116:src/../h/riscv.hpp ****     return sepc;
 194              		.loc 2 116 5
 116:src/../h/riscv.hpp ****     return sepc;
 195              		.loc 2 116 64 is_stmt 0
 196              	 #APP
 197              	# 116 "src/../h/riscv.hpp" 1
 198              		csrr a5, sepc
 199              	# 0 "" 2
 200              	 #NO_APP
 201 00b0 2330F4FC 		sd	a5,-64(s0)
 117:src/../h/riscv.hpp **** }
 202              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 203              		.loc 2 117 12 is_stmt 0
 204 00b4 033504FC 		ld	a0,-64(s0)
 205              	.LBE43:
 206              	.LBE42:
 207              		.loc 1 140 17
GAS LISTING /tmp/ccUzDC5F.s 			page 11


 208 00b8 13060000 		li	a2,0
 209 00bc 9305A000 		li	a1,10
 210 00c0 1B050500 		sext.w	a0,a0
 211 00c4 97000000 		call	_Z8printIntiii
 211      E7800000 
 212              	.LVL5:
 141:src/riscv.cpp ****         printString("\nStVal greske: ");
 213              		.loc 1 141 9 is_stmt 1
 214              		.loc 1 141 20 is_stmt 0
 215 00cc 17050000 		lla	a0,.LC1
 215      13050500 
 216 00d4 97000000 		call	_Z11printStringPKc
 216      E7800000 
 217              	.LVL6:
 142:src/riscv.cpp ****         printInt(r_stval());
 218              		.loc 1 142 9 is_stmt 1
 219              	.LBB44:
 220              	.LBB45:
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 221              		.loc 2 139 5
 140:src/../h/riscv.hpp ****     return stval;
 222              		.loc 2 140 5
 140:src/../h/riscv.hpp ****     return stval;
 223              		.loc 2 140 68 is_stmt 0
 224              	 #APP
 225              	# 140 "src/../h/riscv.hpp" 1
 226              		csrr a5, stval
 227              	# 0 "" 2
 228              	 #NO_APP
 229 00e0 233CF4FA 		sd	a5,-72(s0)
 141:src/../h/riscv.hpp **** }
 230              		.loc 2 141 5 is_stmt 1
 141:src/../h/riscv.hpp **** }
 231              		.loc 2 141 12 is_stmt 0
 232 00e4 033584FB 		ld	a0,-72(s0)
 233              	.LBE45:
 234              	.LBE44:
 235              		.loc 1 142 17
 236 00e8 13060000 		li	a2,0
 237 00ec 9305A000 		li	a1,10
 238 00f0 1B050500 		sext.w	a0,a0
 239 00f4 97000000 		call	_Z8printIntiii
 239      E7800000 
 240              	.LVL7:
 143:src/riscv.cpp ****         printString("\nRazlog greske scause: ");
 241              		.loc 1 143 9 is_stmt 1
 242              		.loc 1 143 20 is_stmt 0
 243 00fc 17050000 		lla	a0,.LC2
 243      13050500 
 244 0104 97000000 		call	_Z11printStringPKc
 244      E7800000 
 245              	.LVL8:
 144:src/riscv.cpp ****         printInt(scause);
 246              		.loc 1 144 9 is_stmt 1
 247              		.loc 1 144 17 is_stmt 0
 248 010c 13060000 		li	a2,0
 249 0110 9305A000 		li	a1,10
GAS LISTING /tmp/ccUzDC5F.s 			page 12


 250 0114 1B850400 		sext.w	a0,s1
 251 0118 97000000 		call	_Z8printIntiii
 251      E7800000 
 252              	.LVL9:
 145:src/riscv.cpp ****         switch(scause) {
 253              		.loc 1 145 9 is_stmt 1
 254 0120 93075000 		li	a5,5
 255 0124 6386F41A 		beq	s1,a5,.L21
 256 0128 93077000 		li	a5,7
 257 012c 638CF41A 		beq	s1,a5,.L22
 258 0130 93072000 		li	a5,2
 259 0134 6384F418 		beq	s1,a5,.L28
 146:src/riscv.cpp ****             case 2:
 147:src/riscv.cpp ****                 printString(" Nelegelna instrukcija");
 148:src/riscv.cpp ****                 break;
 149:src/riscv.cpp ****             case 5:
 150:src/riscv.cpp ****                 printString(" Nedozvoljena adresa citanja");
 151:src/riscv.cpp ****                 break;
 152:src/riscv.cpp ****             case 7:
 153:src/riscv.cpp ****                 printString(" Nedozvoljena adresa upisa");
 154:src/riscv.cpp ****                 break;
 155:src/riscv.cpp ****             default:
 260              		.loc 1 155 13
 156:src/riscv.cpp ****                 printString(" Ostalo");
 261              		.loc 1 156 17
 262              		.loc 1 156 28 is_stmt 0
 263 0138 17050000 		lla	a0,.LC6
 263      13050500 
 264 0140 97000000 		call	_Z11printStringPKc
 264      E7800000 
 265              	.LVL10:
 157:src/riscv.cpp ****                 break;
 266              		.loc 1 157 17 is_stmt 1
 267              	.LBE41:
 158:src/riscv.cpp ****         }
 159:src/riscv.cpp ****     }
 160:src/riscv.cpp **** }
 268              		.loc 1 160 1 is_stmt 0
 269 0148 6F008005 		j	.L3
 270              	.L25:
 271              	.LBB67:
 272              	.LBB46:
  35:src/riscv.cpp ****         switch(fcode){
 273              		.loc 1 35 9 is_stmt 1
  35:src/riscv.cpp ****         switch(fcode){
 274              		.loc 1 35 16 is_stmt 0
 275 014c 833704FD 		ld	a5,-48(s0)
  35:src/riscv.cpp ****         switch(fcode){
 276              		.loc 1 35 20
 277 0150 93874700 		addi	a5,a5,4
  35:src/riscv.cpp ****         switch(fcode){
 278              		.loc 1 35 14
 279 0154 2338F4FC 		sd	a5,-48(s0)
  36:src/riscv.cpp ****             case 0x01:{
 280              		.loc 1 36 9 is_stmt 1
 281              	.LBB47:
  36:src/riscv.cpp ****             case 0x01:{
GAS LISTING /tmp/ccUzDC5F.s 			page 13


 282              		.loc 1 36 16 is_stmt 0
 283 0158 833784FD 		ld	a5,-40(s0)
 284 015c 13071004 		li	a4,65
 285 0160 6368F702 		bgtu	a5,a4,.L5
 286 0164 93972700 		slli	a5,a5,2
 287 0168 17070000 		lla	a4,.L7
 287      13070700 
 288 0170 B387E700 		add	a5,a5,a4
 289 0174 83A70700 		lw	a5,0(a5)
 290 0178 B387E700 		add	a5,a5,a4
 291 017c 67800700 		jr	a5
 292              		.section	.rodata
 293              		.align	2
 294              		.align	2
 295              	.L7:
 296 0000 00000000 		.word	.L5-.L7
 297 0004 00000000 		.word	.L17-.L7
 298 0008 00000000 		.word	.L16-.L7
 299 000c 00000000 		.word	.L5-.L7
 300 0010 00000000 		.word	.L5-.L7
 301 0014 00000000 		.word	.L5-.L7
 302 0018 00000000 		.word	.L5-.L7
 303 001c 00000000 		.word	.L5-.L7
 304 0020 00000000 		.word	.L5-.L7
 305 0024 00000000 		.word	.L5-.L7
 306 0028 00000000 		.word	.L5-.L7
 307 002c 00000000 		.word	.L5-.L7
 308 0030 00000000 		.word	.L5-.L7
 309 0034 00000000 		.word	.L5-.L7
 310 0038 00000000 		.word	.L5-.L7
 311 003c 00000000 		.word	.L5-.L7
 312 0040 00000000 		.word	.L5-.L7
 313 0044 00000000 		.word	.L15-.L7
 314 0048 00000000 		.word	.L14-.L7
 315 004c 00000000 		.word	.L13-.L7
 316 0050 00000000 		.word	.L5-.L7
 317 0054 00000000 		.word	.L5-.L7
 318 0058 00000000 		.word	.L5-.L7
 319 005c 00000000 		.word	.L5-.L7
 320 0060 00000000 		.word	.L5-.L7
 321 0064 00000000 		.word	.L5-.L7
 322 0068 00000000 		.word	.L5-.L7
 323 006c 00000000 		.word	.L5-.L7
 324 0070 00000000 		.word	.L5-.L7
 325 0074 00000000 		.word	.L5-.L7
 326 0078 00000000 		.word	.L5-.L7
 327 007c 00000000 		.word	.L5-.L7
 328 0080 00000000 		.word	.L5-.L7
 329 0084 00000000 		.word	.L12-.L7
 330 0088 00000000 		.word	.L11-.L7
 331 008c 00000000 		.word	.L10-.L7
 332 0090 00000000 		.word	.L9-.L7
 333 0094 00000000 		.word	.L5-.L7
 334 0098 00000000 		.word	.L8-.L7
 335 009c 00000000 		.word	.L5-.L7
 336 00a0 00000000 		.word	.L5-.L7
 337 00a4 00000000 		.word	.L5-.L7
GAS LISTING /tmp/ccUzDC5F.s 			page 14


 338 00a8 00000000 		.word	.L5-.L7
 339 00ac 00000000 		.word	.L5-.L7
 340 00b0 00000000 		.word	.L5-.L7
 341 00b4 00000000 		.word	.L5-.L7
 342 00b8 00000000 		.word	.L5-.L7
 343 00bc 00000000 		.word	.L5-.L7
 344 00c0 00000000 		.word	.L5-.L7
 345 00c4 00000000 		.word	.L5-.L7
 346 00c8 00000000 		.word	.L5-.L7
 347 00cc 00000000 		.word	.L5-.L7
 348 00d0 00000000 		.word	.L5-.L7
 349 00d4 00000000 		.word	.L5-.L7
 350 00d8 00000000 		.word	.L5-.L7
 351 00dc 00000000 		.word	.L5-.L7
 352 00e0 00000000 		.word	.L5-.L7
 353 00e4 00000000 		.word	.L5-.L7
 354 00e8 00000000 		.word	.L5-.L7
 355 00ec 00000000 		.word	.L5-.L7
 356 00f0 00000000 		.word	.L5-.L7
 357 00f4 00000000 		.word	.L5-.L7
 358 00f8 00000000 		.word	.L5-.L7
 359 00fc 00000000 		.word	.L5-.L7
 360 0100 00000000 		.word	.L5-.L7
 361 0104 00000000 		.word	.L6-.L7
 362              		.text
 363              	.L17:
 364              	.LBB48:
  37:src/riscv.cpp ****                 void* ret;
 365              		.loc 1 37 13 is_stmt 1
  37:src/riscv.cpp ****                 void* ret;
 366              		.loc 1 37 23
 367              	.LBB49:
  38:src/riscv.cpp ****                 size_t size;
 368              		.loc 1 38 17
  39:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (size));
 369              		.loc 1 39 17
  40:src/riscv.cpp ****                 ret = MemoryAllocator::mem_alloc(size);
 370              		.loc 1 40 17
  40:src/riscv.cpp ****                 ret = MemoryAllocator::mem_alloc(size);
 371              		.loc 1 40 56 is_stmt 0
 372              	 #APP
 373              	# 40 "src/riscv.cpp" 1
 374              		mv a0, a1
 375              	# 0 "" 2
 376              	.LVL11:
  41:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ret));
 377              		.loc 1 41 17 is_stmt 1
  41:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ret));
 378              		.loc 1 41 49 is_stmt 0
 379              	 #NO_APP
 380 0184 97000000 		call	_ZN15MemoryAllocator9mem_allocEm
 380      E7800000 
 381              	.LVL12:
  42:src/riscv.cpp **** 
 382              		.loc 1 42 17 is_stmt 1
  42:src/riscv.cpp **** 
 383              		.loc 1 42 56 is_stmt 0
GAS LISTING /tmp/ccUzDC5F.s 			page 15


 384              	 #APP
 385              	# 42 "src/riscv.cpp" 1
  44:src/riscv.cpp ****             }
 386              		mv a0, a0
 387              	# 0 "" 2
 388              		.loc 1 44 17 is_stmt 1
 389              	.LVL13:
 390              	 #NO_APP
 391              	.L5:
 392              	.LBE49:
 393              	.LBE48:
 394              	.LBE47:
 127:src/riscv.cpp ****             w_sstatus(sstatus);
 395              		.loc 1 127 13
 127:src/riscv.cpp ****             w_sstatus(sstatus);
 396              		.loc 1 127 19 is_stmt 0
 397 0190 833704FD 		ld	a5,-48(s0)
 398              	.LVL14:
 399              	.LBB59:
 400              	.LBB60:
 122:src/../h/riscv.hpp **** }
 401              		.loc 2 122 5 is_stmt 1
 122:src/../h/riscv.hpp **** }
 402              		.loc 2 122 65 is_stmt 0
 403              	 #APP
 404              	# 122 "src/../h/riscv.hpp" 1
 405              		csrw sepc, a5
 406              	# 0 "" 2
 407              	.LVL15:
 408              	 #NO_APP
 409              	.LBE60:
 410              	.LBE59:
 128:src/riscv.cpp **** 
 411              		.loc 1 128 13 is_stmt 1
 128:src/riscv.cpp **** 
 412              		.loc 1 128 22 is_stmt 0
 413 0198 833784FC 		ld	a5,-56(s0)
 414              	.LVL16:
 415              	.LBB61:
 416              	.LBB62:
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 189:src/../h/riscv.hpp **** {
 190:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 417              		.loc 2 190 5 is_stmt 1
 418              		.loc 2 190 77 is_stmt 0
 419              	 #APP
 420              	# 190 "src/../h/riscv.hpp" 1
 191              	}
 421              		csrw sstatus, a5
 422              	# 0 "" 2
 423              	.LVL17:
 424              	 #NO_APP
 425              	.L3:
 426              	.LBE62:
 427              	.LBE61:
GAS LISTING /tmp/ccUzDC5F.s 			page 16


 428              	.LBE46:
 429              	.LBE67:
 430              		.loc 1 160 1
 431 01a0 83308107 		ld	ra,120(sp)
 432              		.cfi_remember_state
 433              		.cfi_restore 1
 434 01a4 03340107 		ld	s0,112(sp)
 435              		.cfi_restore 8
 436              		.cfi_def_cfa 2, 128
 437 01a8 83348106 		ld	s1,104(sp)
 438              		.cfi_restore 9
 439              	.LVL18:
 440 01ac 13010108 		addi	sp,sp,128
 441              		.cfi_def_cfa_offset 0
 442 01b0 67800000 		jr	ra
 443              	.LVL19:
 444              	.L16:
 445              		.cfi_restore_state
 446              	.LBB68:
 447              	.LBB64:
 448              	.LBB63:
 449              	.LBB58:
  46:src/riscv.cpp ****                 void* p;
 450              		.loc 1 46 13 is_stmt 1
  46:src/riscv.cpp ****                 void* p;
 451              		.loc 1 46 23
 452              	.LBB50:
  47:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (p));
 453              		.loc 1 47 17
  48:src/riscv.cpp ****                 retval = MemoryAllocator::mem_free(p);
 454              		.loc 1 48 17
  48:src/riscv.cpp ****                 retval = MemoryAllocator::mem_free(p);
 455              		.loc 1 48 53 is_stmt 0
 456              	 #APP
 457              	# 48 "src/riscv.cpp" 1
 458              		mv a0, a1
 459              	# 0 "" 2
 460              	.LVL20:
  49:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 461              		.loc 1 49 17 is_stmt 1
  49:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 462              		.loc 1 49 51 is_stmt 0
 463              	 #NO_APP
 464 01b8 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv
 464      E7800000 
 465              	.LVL21:
  50:src/riscv.cpp **** 
 466              		.loc 1 50 17 is_stmt 1
  50:src/riscv.cpp **** 
 467              		.loc 1 50 59 is_stmt 0
 468              	 #APP
 469              	# 50 "src/riscv.cpp" 1
  52:src/riscv.cpp ****             }
 470              		mv a0, a0
 471              	# 0 "" 2
 472              		.loc 1 52 17 is_stmt 1
 473              	 #NO_APP
GAS LISTING /tmp/ccUzDC5F.s 			page 17


 474 01c4 6FF0DFFC 		j	.L5
 475              	.LVL22:
 476              	.L15:
 477              	.LBE50:
  54:src/riscv.cpp **** 
 478              		.loc 1 54 13
  54:src/riscv.cpp **** 
 479              		.loc 1 54 24
 480              	.LBB51:
  56:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));    //thread_t* handle
 481              		.loc 1 56 17
  57:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (start_routine));    //void (*function)(void*)
 482              		.loc 1 57 17
  57:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (start_routine));    //void (*function)(void*)
 483              		.loc 1 57 58 is_stmt 0
 484              	 #APP
 485              	# 57 "src/riscv.cpp" 1
 486              		mv a5, a1
 487              	# 0 "" 2
 488              	 #NO_APP
 489 01cc 2334F4F8 		sd	a5,-120(s0)
  58:src/riscv.cpp ****                 asm volatile("mv %0, a3" : "=r" (arg));
 490              		.loc 1 58 17 is_stmt 1
  58:src/riscv.cpp ****                 asm volatile("mv %0, a3" : "=r" (arg));
 491              		.loc 1 58 65 is_stmt 0
 492              	 #APP
 493              	# 58 "src/riscv.cpp" 1
 494              		mv a5, a2
 495              	# 0 "" 2
 496              	 #NO_APP
 497 01d4 2338F4F8 		sd	a5,-112(s0)
  59:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
 498              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
 499              		.loc 1 59 55 is_stmt 0
 500              	 #APP
 501              	# 59 "src/riscv.cpp" 1
 502              		mv a5, a3
 503              	# 0 "" 2
 504              	 #NO_APP
 505 01dc 233CF4F8 		sd	a5,-104(s0)
  60:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
 506              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
 507              		.loc 1 60 68 is_stmt 0
 508 01e0 37850000 		li	a0,32768
 509 01e4 97000000 		call	_Znam
 509      E7800000 
 510              	.LVL23:
 511 01ec 93060500 		mv	a3,a0
 512              	.LVL24:
  61:src/riscv.cpp ****                                                 (void *) stack_space);
 513              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                                                 (void *) stack_space);
 514              		.loc 1 61 48 is_stmt 0
 515 01f0 033584F8 		ld	a0,-120(s0)
 516              	.LVL25:
GAS LISTING /tmp/ccUzDC5F.s 			page 18


 517 01f4 833504F9 		ld	a1,-112(s0)
 518 01f8 033684F9 		ld	a2,-104(s0)
 519 01fc 97000000 		call	_ZN7_thread13create_threadEPPS_PFvPvES2_S2_
 519      E7800000 
 520              	.LVL26:
  63:src/riscv.cpp ****                 break;
 521              		.loc 1 63 17 is_stmt 1
  63:src/riscv.cpp ****                 break;
 522              		.loc 1 63 59 is_stmt 0
 523              	 #APP
 524              	# 63 "src/riscv.cpp" 1
  64:src/riscv.cpp ****                 }
 525              		mv a0, a0
 526              	# 0 "" 2
 527              		.loc 1 64 17 is_stmt 1
 528              	 #NO_APP
 529 0208 6FF09FF8 		j	.L5
 530              	.LVL27:
 531              	.L14:
 532              	.LBE51:
  66:src/riscv.cpp ****                 retval = _thread::thread_exit();
 533              		.loc 1 66 13
  66:src/riscv.cpp ****                 retval = _thread::thread_exit();
 534              		.loc 1 66 24
  67:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 535              		.loc 1 67 17
  67:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 536              		.loc 1 67 46 is_stmt 0
 537 020c 97000000 		call	_ZN7_thread11thread_exitEv
 537      E7800000 
 538              	.LVL28:
  68:src/riscv.cpp ****                 break;
 539              		.loc 1 68 17 is_stmt 1
  68:src/riscv.cpp ****                 break;
 540              		.loc 1 68 59 is_stmt 0
 541              	 #APP
 542              	# 68 "src/riscv.cpp" 1
  69:src/riscv.cpp ****                 }
 543              		mv a0, a0
 544              	# 0 "" 2
 545              		.loc 1 69 17 is_stmt 1
 546              	 #NO_APP
 547 0218 6FF09FF7 		j	.L5
 548              	.LVL29:
 549              	.L13:
  71:src/riscv.cpp ****                 _thread::thread_dispatch();
 550              		.loc 1 71 13
  72:src/riscv.cpp ****                 break;
 551              		.loc 1 72 17
  72:src/riscv.cpp ****                 break;
 552              		.loc 1 72 41 is_stmt 0
 553 021c 97000000 		call	_ZN7_thread15thread_dispatchEv
 553      E7800000 
 554              	.LVL30:
  73:src/riscv.cpp **** 
 555              		.loc 1 73 17 is_stmt 1
 556 0224 6FF0DFF6 		j	.L5
GAS LISTING /tmp/ccUzDC5F.s 			page 19


 557              	.L12:
  75:src/riscv.cpp ****                 uint64 handle, init;
 558              		.loc 1 75 13
  75:src/riscv.cpp ****                 uint64 handle, init;
 559              		.loc 1 75 23
 560              	.LBB52:
  76:src/riscv.cpp **** 
 561              		.loc 1 76 17
  78:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (init));
 562              		.loc 1 78 17
  78:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (init));
 563              		.loc 1 78 58 is_stmt 0
 564              	 #APP
 565              	# 78 "src/riscv.cpp" 1
 566              		mv a0, a1
 567              	# 0 "" 2
 568              	.LVL31:
  79:src/riscv.cpp ****                 retval = _sem::open_sem((sem_t*)(handle), init);
 569              		.loc 1 79 17 is_stmt 1
  79:src/riscv.cpp ****                 retval = _sem::open_sem((sem_t*)(handle), init);
 570              		.loc 1 79 56 is_stmt 0
 571              	# 79 "src/riscv.cpp" 1
 572              		mv a1, a2
 573              	# 0 "" 2
 574              	.LVL32:
  80:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 575              		.loc 1 80 17 is_stmt 1
  80:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 576              		.loc 1 80 40 is_stmt 0
 577              	 #NO_APP
 578 0230 9B850500 		sext.w	a1,a1
 579              	.LVL33:
 580 0234 97000000 		call	_ZN4_sem8open_semEPPS_j
 580      E7800000 
 581              	.LVL34:
  81:src/riscv.cpp **** 
 582              		.loc 1 81 17 is_stmt 1
  81:src/riscv.cpp **** 
 583              		.loc 1 81 59 is_stmt 0
 584              	 #APP
 585              	# 81 "src/riscv.cpp" 1
  83:src/riscv.cpp ****             }
 586              		mv a0, a0
 587              	# 0 "" 2
 588              		.loc 1 83 17 is_stmt 1
 589              	 #NO_APP
 590 0240 6FF01FF5 		j	.L5
 591              	.LVL35:
 592              	.L11:
 593              	.LBE52:
  85:src/riscv.cpp ****                 uint64 handle;
 594              		.loc 1 85 13
  85:src/riscv.cpp ****                 uint64 handle;
 595              		.loc 1 85 23
 596              	.LBB53:
  86:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 597              		.loc 1 86 17
GAS LISTING /tmp/ccUzDC5F.s 			page 20


  87:src/riscv.cpp ****                 retval = _sem::close_sem((sem_t)handle);
 598              		.loc 1 87 17
  87:src/riscv.cpp ****                 retval = _sem::close_sem((sem_t)handle);
 599              		.loc 1 87 58 is_stmt 0
 600              	 #APP
 601              	# 87 "src/riscv.cpp" 1
 602              		mv a0, a1
 603              	# 0 "" 2
 604              	.LVL36:
  88:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 605              		.loc 1 88 17 is_stmt 1
  88:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 606              		.loc 1 88 41 is_stmt 0
 607              	 #NO_APP
 608 0248 97000000 		call	_ZN4_sem9close_semEPS_
 608      E7800000 
 609              	.LVL37:
  89:src/riscv.cpp **** 
 610              		.loc 1 89 17 is_stmt 1
  89:src/riscv.cpp **** 
 611              		.loc 1 89 59 is_stmt 0
 612              	 #APP
 613              	# 89 "src/riscv.cpp" 1
  91:src/riscv.cpp ****             }
 614              		mv a0, a0
 615              	# 0 "" 2
 616              		.loc 1 91 17 is_stmt 1
 617              	 #NO_APP
 618 0254 6FF0DFF3 		j	.L5
 619              	.LVL38:
 620              	.L10:
 621              	.LBE53:
  93:src/riscv.cpp ****                 uint64 handle;
 622              		.loc 1 93 13
  93:src/riscv.cpp ****                 uint64 handle;
 623              		.loc 1 93 23
 624              	.LBB54:
  94:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 625              		.loc 1 94 17
  95:src/riscv.cpp ****                 retval = _sem::sem_wait((sem_t)handle);
 626              		.loc 1 95 17
  95:src/riscv.cpp ****                 retval = _sem::sem_wait((sem_t)handle);
 627              		.loc 1 95 58 is_stmt 0
 628              	 #APP
 629              	# 95 "src/riscv.cpp" 1
 630              		mv a0, a1
 631              	# 0 "" 2
 632              	.LVL39:
  96:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 633              		.loc 1 96 17 is_stmt 1
  96:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 634              		.loc 1 96 40 is_stmt 0
 635              	 #NO_APP
 636 025c 97000000 		call	_ZN4_sem8sem_waitEPS_
 636      E7800000 
 637              	.LVL40:
  97:src/riscv.cpp **** 
GAS LISTING /tmp/ccUzDC5F.s 			page 21


 638              		.loc 1 97 17 is_stmt 1
  97:src/riscv.cpp **** 
 639              		.loc 1 97 59 is_stmt 0
 640              	 #APP
 641              	# 97 "src/riscv.cpp" 1
  99:src/riscv.cpp ****             }
 642              		mv a0, a0
 643              	# 0 "" 2
 644              		.loc 1 99 17 is_stmt 1
 645              	 #NO_APP
 646 0268 6FF09FF2 		j	.L5
 647              	.LVL41:
 648              	.L9:
 649              	.LBE54:
 101:src/riscv.cpp ****                 uint64 handle;
 650              		.loc 1 101 13
 101:src/riscv.cpp ****                 uint64 handle;
 651              		.loc 1 101 23
 652              	.LBB55:
 102:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 653              		.loc 1 102 17
 103:src/riscv.cpp ****                 retval = _sem::sem_signal((sem_t)handle);
 654              		.loc 1 103 17
 103:src/riscv.cpp ****                 retval = _sem::sem_signal((sem_t)handle);
 655              		.loc 1 103 58 is_stmt 0
 656              	 #APP
 657              	# 103 "src/riscv.cpp" 1
 658              		mv a0, a1
 659              	# 0 "" 2
 660              	.LVL42:
 104:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 661              		.loc 1 104 17 is_stmt 1
 104:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 662              		.loc 1 104 42 is_stmt 0
 663              	 #NO_APP
 664 0270 97000000 		call	_ZN4_sem10sem_signalEPS_
 664      E7800000 
 665              	.LVL43:
 105:src/riscv.cpp **** 
 666              		.loc 1 105 17 is_stmt 1
 105:src/riscv.cpp **** 
 667              		.loc 1 105 59 is_stmt 0
 668              	 #APP
 669              	# 105 "src/riscv.cpp" 1
 107:src/riscv.cpp ****             }
 670              		mv a0, a0
 671              	# 0 "" 2
 672              		.loc 1 107 17 is_stmt 1
 673              	 #NO_APP
 674 027c 6FF05FF1 		j	.L5
 675              	.LVL44:
 676              	.L8:
 677              	.LBE55:
 109:src/riscv.cpp ****                 uint64 handle;
 678              		.loc 1 109 13
 109:src/riscv.cpp ****                 uint64 handle;
 679              		.loc 1 109 23
GAS LISTING /tmp/ccUzDC5F.s 			page 22


 680              	.LBB56:
 110:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 681              		.loc 1 110 17
 111:src/riscv.cpp ****                 retval = _sem::sem_trywait((sem_t)handle);
 682              		.loc 1 111 17
 111:src/riscv.cpp ****                 retval = _sem::sem_trywait((sem_t)handle);
 683              		.loc 1 111 58 is_stmt 0
 684              	 #APP
 685              	# 111 "src/riscv.cpp" 1
 686              		mv a0, a1
 687              	# 0 "" 2
 688              	.LVL45:
 112:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 689              		.loc 1 112 17 is_stmt 1
 112:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 690              		.loc 1 112 43 is_stmt 0
 691              	 #NO_APP
 692 0284 97000000 		call	_ZN4_sem11sem_trywaitEPS_
 692      E7800000 
 693              	.LVL46:
 113:src/riscv.cpp **** 
 694              		.loc 1 113 17 is_stmt 1
 113:src/riscv.cpp **** 
 695              		.loc 1 113 59 is_stmt 0
 696              	 #APP
 697              	# 113 "src/riscv.cpp" 1
 115:src/riscv.cpp ****             }
 698              		mv a0, a0
 699              	# 0 "" 2
 700              		.loc 1 115 17 is_stmt 1
 701              	 #NO_APP
 702 0290 6FF01FF0 		j	.L5
 703              	.LVL47:
 704              	.L6:
 705              	.LBE56:
 117:src/riscv.cpp ****                 char ch = __getc();
 706              		.loc 1 117 13
 117:src/riscv.cpp ****                 char ch = __getc();
 707              		.loc 1 117 23
 708              	.LBB57:
 118:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ch));
 709              		.loc 1 118 17
 118:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ch));
 710              		.loc 1 118 33 is_stmt 0
 711 0294 97000000 		call	__getc
 711      E7800000 
 712              	.LVL48:
 119:src/riscv.cpp ****                 break;
 713              		.loc 1 119 17 is_stmt 1
 119:src/riscv.cpp ****                 break;
 714              		.loc 1 119 55 is_stmt 0
 715              	 #APP
 716              	# 119 "src/riscv.cpp" 1
 120:src/riscv.cpp ****             }
 717              		mv a0, a0
 718              	# 0 "" 2
 719              		.loc 1 120 17 is_stmt 1
GAS LISTING /tmp/ccUzDC5F.s 			page 23


 720              	 #NO_APP
 721 02a0 6FF01FEF 		j	.L5
 722              	.LVL49:
 723              	.L26:
 724              	.LBE57:
 725              	.LBE58:
 726              	.LBE63:
 727              	.LBE64:
 133:src/riscv.cpp ****     }
 728              		.loc 1 133 9
 729              	.LBB65:
 730              	.LBB66:
 156:src/../h/riscv.hpp **** }
 731              		.loc 2 156 5
 156:src/../h/riscv.hpp **** }
 732              		.loc 2 156 64 is_stmt 0
 733 02a4 93072000 		li	a5,2
 734              	 #APP
 735              	# 156 "src/../h/riscv.hpp" 1
 157:src/../h/riscv.hpp **** 
 736              		csrc sip, a5
 737              	# 0 "" 2
 738              		.loc 2 157 1
 739              	 #NO_APP
 740 02ac 6FF05FEF 		j	.L3
 741              	.LVL50:
 742              	.L27:
 743              	.LBE66:
 744              	.LBE65:
 136:src/riscv.cpp ****     }
 745              		.loc 1 136 9 is_stmt 1
 136:src/riscv.cpp ****     }
 746              		.loc 1 136 24 is_stmt 0
 747 02b0 97000000 		call	console_handler
 747      E7800000 
 748              	.LVL51:
 749 02b8 6FF09FEE 		j	.L3
 750              	.L28:
 146:src/riscv.cpp ****                 printString(" Nelegelna instrukcija");
 751              		.loc 1 146 13 is_stmt 1
 147:src/riscv.cpp ****                 break;
 752              		.loc 1 147 17
 147:src/riscv.cpp ****                 break;
 753              		.loc 1 147 28 is_stmt 0
 754 02bc 17050000 		lla	a0,.LC3
 754      13050500 
 755 02c4 97000000 		call	_Z11printStringPKc
 755      E7800000 
 756              	.LVL52:
 148:src/riscv.cpp ****             case 5:
 757              		.loc 1 148 17 is_stmt 1
 758 02cc 6FF05FED 		j	.L3
 759              	.L21:
 149:src/riscv.cpp ****                 printString(" Nedozvoljena adresa citanja");
 760              		.loc 1 149 13
 150:src/riscv.cpp ****                 break;
 761              		.loc 1 150 17
GAS LISTING /tmp/ccUzDC5F.s 			page 24


 150:src/riscv.cpp ****                 break;
 762              		.loc 1 150 28 is_stmt 0
 763 02d0 17050000 		lla	a0,.LC4
 763      13050500 
 764 02d8 97000000 		call	_Z11printStringPKc
 764      E7800000 
 765              	.LVL53:
 151:src/riscv.cpp ****             case 7:
 766              		.loc 1 151 17 is_stmt 1
 767 02e0 6FF01FEC 		j	.L3
 768              	.L22:
 152:src/riscv.cpp ****                 printString(" Nedozvoljena adresa upisa");
 769              		.loc 1 152 13
 153:src/riscv.cpp ****                 break;
 770              		.loc 1 153 17
 153:src/riscv.cpp ****                 break;
 771              		.loc 1 153 28 is_stmt 0
 772 02e4 17050000 		lla	a0,.LC5
 772      13050500 
 773 02ec 97000000 		call	_Z11printStringPKc
 773      E7800000 
 774              	.LVL54:
 154:src/riscv.cpp ****             default:
 775              		.loc 1 154 17 is_stmt 1
 776 02f4 6FF0DFEA 		j	.L3
 777              	.LBE68:
 778              		.cfi_endproc
 779              	.LFE43:
 781              	.Letext0:
 782              		.file 3 "src/../h/../lib/hw.h"
 783              		.file 4 "src/../h/list.hpp"
 784              		.file 5 "src/../h/_thread.hpp"
 785              		.file 6 "src/../test/../h/syscall_c.hpp"
 786              		.file 7 "src/../h/_sem.hpp"
 787              		.file 8 "src/../h/_semQ.h"
 788              		.file 9 "src/../h/MemoryAllocator.h"
 789              		.file 10 "src/../lib/console.h"
 790              		.file 11 "src/../test/printing.hpp"
GAS LISTING /tmp/ccUzDC5F.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccUzDC5F.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccUzDC5F.s:16     .text:0000000000000000 .L0 
     /tmp/ccUzDC5F.s:17     .text:0000000000000000 .L0 
     /tmp/ccUzDC5F.s:18     .text:0000000000000004 .L0 
     /tmp/ccUzDC5F.s:20     .text:0000000000000008 .L0 
     /tmp/ccUzDC5F.s:22     .text:000000000000000c .L0 
     /tmp/ccUzDC5F.s:28     .text:000000000000000c .L0 
     /tmp/ccUzDC5F.s:29     .text:000000000000000c .L0 
     /tmp/ccUzDC5F.s:30     .text:000000000000000c .L0 
     /tmp/ccUzDC5F.s:40     .text:0000000000000014 .L0 
       src/riscv.cpp:15     .text:0000000000000014 .L0 
     /tmp/ccUzDC5F.s:46     .text:0000000000000018 .L0 
       src/riscv.cpp:16     .text:0000000000000018 .L0 
     /tmp/ccUzDC5F.s:52     .text:000000000000001c .L0 
     /tmp/ccUzDC5F.s:53     .text:0000000000000020 .L0 
     /tmp/ccUzDC5F.s:54     .text:0000000000000020 .L0 
     /tmp/ccUzDC5F.s:56     .text:0000000000000024 .L0 
     /tmp/ccUzDC5F.s:58     .text:0000000000000028 .L0 
     /tmp/ccUzDC5F.s:87     .text:0000000000000028 _ZN5Riscv23interruptRoutineHandlerEv
     /tmp/ccUzDC5F.s:90     .text:0000000000000028 .L0 
     /tmp/ccUzDC5F.s:91     .text:0000000000000028 .L0 
     /tmp/ccUzDC5F.s:92     .text:000000000000002c .L0 
     /tmp/ccUzDC5F.s:96     .text:0000000000000038 .L0 
     /tmp/ccUzDC5F.s:97     .text:0000000000000038 .L0 
     /tmp/ccUzDC5F.s:98     .text:0000000000000038 .L0 
     /tmp/ccUzDC5F.s:100    .text:000000000000003c .L0 
     /tmp/ccUzDC5F.s:102    .text:000000000000003c .L0 
     /tmp/ccUzDC5F.s:103    .text:000000000000003c .L0 
       src/riscv.cpp:24     .text:000000000000003c .L0 
     /tmp/ccUzDC5F.s:112    .text:0000000000000044 .L0 
     /tmp/ccUzDC5F.s:115    .text:0000000000000044 .L0 
     /tmp/ccUzDC5F.s:116    .text:0000000000000044 .L0 
     /tmp/ccUzDC5F.s:117    .text:0000000000000044 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000044 .L0 
     /tmp/ccUzDC5F.s:125    .text:000000000000004c .L0 
     /tmp/ccUzDC5F.s:126    .text:000000000000004c .L0 
     /tmp/ccUzDC5F.s:133    .text:0000000000000050 .L0 
     /tmp/ccUzDC5F.s:134    .text:0000000000000050 .L0 
     /tmp/ccUzDC5F.s:135    .text:0000000000000050 .L0 
  src/../h/riscv.hpp:116    .text:0000000000000050 .L0 
     /tmp/ccUzDC5F.s:143    .text:0000000000000058 .L0 
     /tmp/ccUzDC5F.s:144    .text:0000000000000058 .L0 
     /tmp/ccUzDC5F.s:148    .text:000000000000005c .L0 
     /tmp/ccUzDC5F.s:152    .text:0000000000000060 .L0 
     /tmp/ccUzDC5F.s:153    .text:0000000000000060 .L0 
     /tmp/ccUzDC5F.s:154    .text:0000000000000060 .L0 
  src/../h/riscv.hpp:184    .text:0000000000000060 .L0 
     /tmp/ccUzDC5F.s:162    .text:0000000000000068 .L0 
     /tmp/ccUzDC5F.s:163    .text:0000000000000068 .L0 
     /tmp/ccUzDC5F.s:167    .text:000000000000006c .L0 
     /tmp/ccUzDC5F.s:170    .text:0000000000000070 .L0 
     /tmp/ccUzDC5F.s:171    .text:0000000000000070 .L0 
     /tmp/ccUzDC5F.s:173    .text:0000000000000074 .L0 
     /tmp/ccUzDC5F.s:176    .text:000000000000007c .L0 
     /tmp/ccUzDC5F.s:181    .text:000000000000008c .L0 
GAS LISTING /tmp/ccUzDC5F.s 			page 26


     /tmp/ccUzDC5F.s:186    .text:000000000000009c .L0 
     /tmp/ccUzDC5F.s:187    .text:000000000000009c .L0 
     /tmp/ccUzDC5F.s:193    .text:00000000000000ac .L0 
     /tmp/ccUzDC5F.s:194    .text:00000000000000ac .L0 
     /tmp/ccUzDC5F.s:195    .text:00000000000000ac .L0 
  src/../h/riscv.hpp:116    .text:00000000000000ac .L0 
     /tmp/ccUzDC5F.s:203    .text:00000000000000b4 .L0 
     /tmp/ccUzDC5F.s:204    .text:00000000000000b4 .L0 
     /tmp/ccUzDC5F.s:208    .text:00000000000000b8 .L0 
     /tmp/ccUzDC5F.s:214    .text:00000000000000cc .L0 
     /tmp/ccUzDC5F.s:215    .text:00000000000000cc .L0 
     /tmp/ccUzDC5F.s:221    .text:00000000000000dc .L0 
     /tmp/ccUzDC5F.s:222    .text:00000000000000dc .L0 
     /tmp/ccUzDC5F.s:223    .text:00000000000000dc .L0 
  src/../h/riscv.hpp:140    .text:00000000000000dc .L0 
     /tmp/ccUzDC5F.s:231    .text:00000000000000e4 .L0 
     /tmp/ccUzDC5F.s:232    .text:00000000000000e4 .L0 
     /tmp/ccUzDC5F.s:236    .text:00000000000000e8 .L0 
     /tmp/ccUzDC5F.s:242    .text:00000000000000fc .L0 
     /tmp/ccUzDC5F.s:243    .text:00000000000000fc .L0 
     /tmp/ccUzDC5F.s:247    .text:000000000000010c .L0 
     /tmp/ccUzDC5F.s:248    .text:000000000000010c .L0 
     /tmp/ccUzDC5F.s:254    .text:0000000000000120 .L0 
     /tmp/ccUzDC5F.s:261    .text:0000000000000138 .L0 
     /tmp/ccUzDC5F.s:262    .text:0000000000000138 .L0 
     /tmp/ccUzDC5F.s:263    .text:0000000000000138 .L0 
     /tmp/ccUzDC5F.s:268    .text:0000000000000148 .L0 
     /tmp/ccUzDC5F.s:269    .text:0000000000000148 .L0 
     /tmp/ccUzDC5F.s:274    .text:000000000000014c .L0 
     /tmp/ccUzDC5F.s:275    .text:000000000000014c .L0 
     /tmp/ccUzDC5F.s:277    .text:0000000000000150 .L0 
     /tmp/ccUzDC5F.s:279    .text:0000000000000154 .L0 
     /tmp/ccUzDC5F.s:282    .text:0000000000000158 .L0 
     /tmp/ccUzDC5F.s:283    .text:0000000000000158 .L0 
     /tmp/ccUzDC5F.s:366    .text:0000000000000180 .L0 
     /tmp/ccUzDC5F.s:368    .text:0000000000000180 .L0 
     /tmp/ccUzDC5F.s:369    .text:0000000000000180 .L0 
     /tmp/ccUzDC5F.s:370    .text:0000000000000180 .L0 
     /tmp/ccUzDC5F.s:371    .text:0000000000000180 .L0 
       src/riscv.cpp:40     .text:0000000000000180 .L0 
     /tmp/ccUzDC5F.s:378    .text:0000000000000184 .L0 
     /tmp/ccUzDC5F.s:380    .text:0000000000000184 .L0 
     /tmp/ccUzDC5F.s:383    .text:000000000000018c .L0 
       src/riscv.cpp:42     .text:000000000000018c .L0 
     /tmp/ccUzDC5F.s:395    .text:0000000000000190 .L0 
     /tmp/ccUzDC5F.s:396    .text:0000000000000190 .L0 
     /tmp/ccUzDC5F.s:397    .text:0000000000000190 .L0 
     /tmp/ccUzDC5F.s:402    .text:0000000000000194 .L0 
  src/../h/riscv.hpp:122    .text:0000000000000194 .L0 
     /tmp/ccUzDC5F.s:412    .text:0000000000000198 .L0 
     /tmp/ccUzDC5F.s:413    .text:0000000000000198 .L0 
     /tmp/ccUzDC5F.s:418    .text:000000000000019c .L0 
  src/../h/riscv.hpp:190    .text:000000000000019c .L0 
     /tmp/ccUzDC5F.s:431    .text:00000000000001a0 .L0 
     /tmp/ccUzDC5F.s:432    .text:00000000000001a4 .L0 
     /tmp/ccUzDC5F.s:433    .text:00000000000001a4 .L0 
     /tmp/ccUzDC5F.s:435    .text:00000000000001a8 .L0 
GAS LISTING /tmp/ccUzDC5F.s 			page 27


     /tmp/ccUzDC5F.s:436    .text:00000000000001a8 .L0 
     /tmp/ccUzDC5F.s:438    .text:00000000000001ac .L0 
     /tmp/ccUzDC5F.s:441    .text:00000000000001b0 .L0 
     /tmp/ccUzDC5F.s:445    .text:00000000000001b4 .L0 
     /tmp/ccUzDC5F.s:451    .text:00000000000001b4 .L0 
     /tmp/ccUzDC5F.s:453    .text:00000000000001b4 .L0 
     /tmp/ccUzDC5F.s:454    .text:00000000000001b4 .L0 
     /tmp/ccUzDC5F.s:455    .text:00000000000001b4 .L0 
       src/riscv.cpp:48     .text:00000000000001b4 .L0 
     /tmp/ccUzDC5F.s:462    .text:00000000000001b8 .L0 
     /tmp/ccUzDC5F.s:464    .text:00000000000001b8 .L0 
     /tmp/ccUzDC5F.s:467    .text:00000000000001c0 .L0 
       src/riscv.cpp:50     .text:00000000000001c0 .L0 
     /tmp/ccUzDC5F.s:474    .text:00000000000001c4 .L0 
     /tmp/ccUzDC5F.s:479    .text:00000000000001c8 .L0 
     /tmp/ccUzDC5F.s:481    .text:00000000000001c8 .L0 
     /tmp/ccUzDC5F.s:482    .text:00000000000001c8 .L0 
     /tmp/ccUzDC5F.s:483    .text:00000000000001c8 .L0 
       src/riscv.cpp:57     .text:00000000000001c8 .L0 
     /tmp/ccUzDC5F.s:491    .text:00000000000001d0 .L0 
       src/riscv.cpp:58     .text:00000000000001d0 .L0 
     /tmp/ccUzDC5F.s:499    .text:00000000000001d8 .L0 
       src/riscv.cpp:59     .text:00000000000001d8 .L0 
     /tmp/ccUzDC5F.s:507    .text:00000000000001e0 .L0 
     /tmp/ccUzDC5F.s:508    .text:00000000000001e0 .L0 
     /tmp/ccUzDC5F.s:514    .text:00000000000001f0 .L0 
     /tmp/ccUzDC5F.s:515    .text:00000000000001f0 .L0 
     /tmp/ccUzDC5F.s:522    .text:0000000000000204 .L0 
       src/riscv.cpp:63     .text:0000000000000204 .L0 
     /tmp/ccUzDC5F.s:529    .text:0000000000000208 .L0 
     /tmp/ccUzDC5F.s:534    .text:000000000000020c .L0 
     /tmp/ccUzDC5F.s:535    .text:000000000000020c .L0 
     /tmp/ccUzDC5F.s:536    .text:000000000000020c .L0 
     /tmp/ccUzDC5F.s:537    .text:000000000000020c .L0 
     /tmp/ccUzDC5F.s:540    .text:0000000000000214 .L0 
       src/riscv.cpp:68     .text:0000000000000214 .L0 
     /tmp/ccUzDC5F.s:547    .text:0000000000000218 .L0 
     /tmp/ccUzDC5F.s:551    .text:000000000000021c .L0 
     /tmp/ccUzDC5F.s:552    .text:000000000000021c .L0 
     /tmp/ccUzDC5F.s:553    .text:000000000000021c .L0 
     /tmp/ccUzDC5F.s:556    .text:0000000000000224 .L0 
     /tmp/ccUzDC5F.s:559    .text:0000000000000228 .L0 
     /tmp/ccUzDC5F.s:561    .text:0000000000000228 .L0 
     /tmp/ccUzDC5F.s:562    .text:0000000000000228 .L0 
     /tmp/ccUzDC5F.s:563    .text:0000000000000228 .L0 
       src/riscv.cpp:78     .text:0000000000000228 .L0 
     /tmp/ccUzDC5F.s:570    .text:000000000000022c .L0 
       src/riscv.cpp:79     .text:000000000000022c .L0 
     /tmp/ccUzDC5F.s:576    .text:0000000000000230 .L0 
     /tmp/ccUzDC5F.s:578    .text:0000000000000230 .L0 
     /tmp/ccUzDC5F.s:583    .text:000000000000023c .L0 
       src/riscv.cpp:81     .text:000000000000023c .L0 
     /tmp/ccUzDC5F.s:590    .text:0000000000000240 .L0 
     /tmp/ccUzDC5F.s:595    .text:0000000000000244 .L0 
     /tmp/ccUzDC5F.s:597    .text:0000000000000244 .L0 
     /tmp/ccUzDC5F.s:598    .text:0000000000000244 .L0 
     /tmp/ccUzDC5F.s:599    .text:0000000000000244 .L0 
GAS LISTING /tmp/ccUzDC5F.s 			page 28


       src/riscv.cpp:87     .text:0000000000000244 .L0 
     /tmp/ccUzDC5F.s:606    .text:0000000000000248 .L0 
     /tmp/ccUzDC5F.s:608    .text:0000000000000248 .L0 
     /tmp/ccUzDC5F.s:611    .text:0000000000000250 .L0 
       src/riscv.cpp:89     .text:0000000000000250 .L0 
     /tmp/ccUzDC5F.s:618    .text:0000000000000254 .L0 
     /tmp/ccUzDC5F.s:623    .text:0000000000000258 .L0 
     /tmp/ccUzDC5F.s:625    .text:0000000000000258 .L0 
     /tmp/ccUzDC5F.s:626    .text:0000000000000258 .L0 
     /tmp/ccUzDC5F.s:627    .text:0000000000000258 .L0 
       src/riscv.cpp:95     .text:0000000000000258 .L0 
     /tmp/ccUzDC5F.s:634    .text:000000000000025c .L0 
     /tmp/ccUzDC5F.s:636    .text:000000000000025c .L0 
     /tmp/ccUzDC5F.s:639    .text:0000000000000264 .L0 
       src/riscv.cpp:97     .text:0000000000000264 .L0 
     /tmp/ccUzDC5F.s:646    .text:0000000000000268 .L0 
     /tmp/ccUzDC5F.s:651    .text:000000000000026c .L0 
     /tmp/ccUzDC5F.s:653    .text:000000000000026c .L0 
     /tmp/ccUzDC5F.s:654    .text:000000000000026c .L0 
     /tmp/ccUzDC5F.s:655    .text:000000000000026c .L0 
       src/riscv.cpp:103    .text:000000000000026c .L0 
     /tmp/ccUzDC5F.s:662    .text:0000000000000270 .L0 
     /tmp/ccUzDC5F.s:664    .text:0000000000000270 .L0 
     /tmp/ccUzDC5F.s:667    .text:0000000000000278 .L0 
       src/riscv.cpp:105    .text:0000000000000278 .L0 
     /tmp/ccUzDC5F.s:674    .text:000000000000027c .L0 
     /tmp/ccUzDC5F.s:679    .text:0000000000000280 .L0 
     /tmp/ccUzDC5F.s:681    .text:0000000000000280 .L0 
     /tmp/ccUzDC5F.s:682    .text:0000000000000280 .L0 
     /tmp/ccUzDC5F.s:683    .text:0000000000000280 .L0 
       src/riscv.cpp:111    .text:0000000000000280 .L0 
     /tmp/ccUzDC5F.s:690    .text:0000000000000284 .L0 
     /tmp/ccUzDC5F.s:692    .text:0000000000000284 .L0 
     /tmp/ccUzDC5F.s:695    .text:000000000000028c .L0 
       src/riscv.cpp:113    .text:000000000000028c .L0 
     /tmp/ccUzDC5F.s:702    .text:0000000000000290 .L0 
     /tmp/ccUzDC5F.s:707    .text:0000000000000294 .L0 
     /tmp/ccUzDC5F.s:709    .text:0000000000000294 .L0 
     /tmp/ccUzDC5F.s:710    .text:0000000000000294 .L0 
     /tmp/ccUzDC5F.s:711    .text:0000000000000294 .L0 
     /tmp/ccUzDC5F.s:714    .text:000000000000029c .L0 
       src/riscv.cpp:119    .text:000000000000029c .L0 
     /tmp/ccUzDC5F.s:721    .text:00000000000002a0 .L0 
     /tmp/ccUzDC5F.s:731    .text:00000000000002a4 .L0 
     /tmp/ccUzDC5F.s:732    .text:00000000000002a4 .L0 
     /tmp/ccUzDC5F.s:733    .text:00000000000002a4 .L0 
     /tmp/ccUzDC5F.s:740    .text:00000000000002ac .L0 
     /tmp/ccUzDC5F.s:746    .text:00000000000002b0 .L0 
     /tmp/ccUzDC5F.s:747    .text:00000000000002b0 .L0 
     /tmp/ccUzDC5F.s:752    .text:00000000000002bc .L0 
     /tmp/ccUzDC5F.s:753    .text:00000000000002bc .L0 
     /tmp/ccUzDC5F.s:754    .text:00000000000002bc .L0 
     /tmp/ccUzDC5F.s:758    .text:00000000000002cc .L0 
     /tmp/ccUzDC5F.s:761    .text:00000000000002d0 .L0 
     /tmp/ccUzDC5F.s:762    .text:00000000000002d0 .L0 
     /tmp/ccUzDC5F.s:763    .text:00000000000002d0 .L0 
     /tmp/ccUzDC5F.s:767    .text:00000000000002e0 .L0 
GAS LISTING /tmp/ccUzDC5F.s 			page 29


     /tmp/ccUzDC5F.s:770    .text:00000000000002e4 .L0 
     /tmp/ccUzDC5F.s:771    .text:00000000000002e4 .L0 
     /tmp/ccUzDC5F.s:772    .text:00000000000002e4 .L0 
     /tmp/ccUzDC5F.s:776    .text:00000000000002f4 .L0 
     /tmp/ccUzDC5F.s:778    .text:00000000000002f8 .L0 
     /tmp/ccUzDC5F.s:791    .text:00000000000002f8 .L0 
     /tmp/ccUzDC5F.s:63     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccUzDC5F.s:187    .text:000000000000009c .L0 
     /tmp/ccUzDC5F.s:66     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccUzDC5F.s:215    .text:00000000000000cc .L0 
     /tmp/ccUzDC5F.s:69     .rodata.str1.8:0000000000000020 .LC2
     /tmp/ccUzDC5F.s:243    .text:00000000000000fc .L0 
     /tmp/ccUzDC5F.s:81     .rodata.str1.8:0000000000000090 .LC6
     /tmp/ccUzDC5F.s:263    .text:0000000000000138 .L0 
     /tmp/ccUzDC5F.s:295    .rodata:0000000000000000 .L7
     /tmp/ccUzDC5F.s:287    .text:0000000000000168 .L0 
     /tmp/ccUzDC5F.s:72     .rodata.str1.8:0000000000000038 .LC3
     /tmp/ccUzDC5F.s:754    .text:00000000000002bc .L0 
     /tmp/ccUzDC5F.s:75     .rodata.str1.8:0000000000000050 .LC4
     /tmp/ccUzDC5F.s:763    .text:00000000000002d0 .L0 
     /tmp/ccUzDC5F.s:78     .rodata.str1.8:0000000000000070 .LC5
     /tmp/ccUzDC5F.s:772    .text:00000000000002e4 .L0 
     /tmp/ccUzDC5F.s:270    .text:000000000000014c .L25
     /tmp/ccUzDC5F.s:723    .text:00000000000002a4 .L26
     /tmp/ccUzDC5F.s:742    .text:00000000000002b0 .L27
     /tmp/ccUzDC5F.s:759    .text:00000000000002d0 .L21
     /tmp/ccUzDC5F.s:768    .text:00000000000002e4 .L22
     /tmp/ccUzDC5F.s:750    .text:00000000000002bc .L28
     /tmp/ccUzDC5F.s:425    .text:00000000000001a0 .L3
     /tmp/ccUzDC5F.s:391    .text:0000000000000190 .L5
     /tmp/ccUzDC5F.s:363    .text:0000000000000180 .L17
     /tmp/ccUzDC5F.s:444    .text:00000000000001b4 .L16
     /tmp/ccUzDC5F.s:476    .text:00000000000001c8 .L15
     /tmp/ccUzDC5F.s:531    .text:000000000000020c .L14
     /tmp/ccUzDC5F.s:549    .text:000000000000021c .L13
     /tmp/ccUzDC5F.s:557    .text:0000000000000228 .L12
     /tmp/ccUzDC5F.s:592    .text:0000000000000244 .L11
     /tmp/ccUzDC5F.s:620    .text:0000000000000258 .L10
     /tmp/ccUzDC5F.s:648    .text:000000000000026c .L9
     /tmp/ccUzDC5F.s:676    .text:0000000000000280 .L8
     /tmp/ccUzDC5F.s:704    .text:0000000000000294 .L6
     /tmp/ccUzDC5F.s:2487   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccUzDC5F.s:3956   .debug_str:000000000000077f .LASF161
     /tmp/ccUzDC5F.s:4030   .debug_str:0000000000000a4f .LASF162
     /tmp/ccUzDC5F.s:3820   .debug_str:00000000000003ad .LASF163
     /tmp/ccUzDC5F.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccUzDC5F.s:781    .text:00000000000002f8 .Letext0
     /tmp/ccUzDC5F.s:3706   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccUzDC5F.s:3816   .debug_str:0000000000000393 .LASF0
     /tmp/ccUzDC5F.s:3846   .debug_str:00000000000004aa .LASF1
     /tmp/ccUzDC5F.s:3924   .debug_str:00000000000006a3 .LASF2
     /tmp/ccUzDC5F.s:3934   .debug_str:00000000000006fe .LASF4
     /tmp/ccUzDC5F.s:3828   .debug_str:00000000000003fc .LASF3
     /tmp/ccUzDC5F.s:3712   .debug_str:0000000000000017 .LASF5
     /tmp/ccUzDC5F.s:3894   .debug_str:00000000000005e1 .LASF6
     /tmp/ccUzDC5F.s:3832   .debug_str:000000000000043a .LASF7
     /tmp/ccUzDC5F.s:3792   .debug_str:00000000000002e2 .LASF8
GAS LISTING /tmp/ccUzDC5F.s 			page 30


     /tmp/ccUzDC5F.s:3798   .debug_str:0000000000000308 .LASF9
     /tmp/ccUzDC5F.s:3742   .debug_str:00000000000000fd .LASF10
     /tmp/ccUzDC5F.s:3784   .debug_str:000000000000026e .LASF11
     /tmp/ccUzDC5F.s:3754   .debug_str:000000000000015b .LASF12
     /tmp/ccUzDC5F.s:3740   .debug_str:00000000000000ed .LASF13
     /tmp/ccUzDC5F.s:3960   .debug_str:000000000000084a .LASF14
     /tmp/ccUzDC5F.s:3772   .debug_str:0000000000000202 .LASF15
     /tmp/ccUzDC5F.s:3952   .debug_str:0000000000000762 .LASF16
     /tmp/ccUzDC5F.s:4020   .debug_str:0000000000000a15 .LASF65
     /tmp/ccUzDC5F.s:3914   .debug_str:000000000000066b .LASF20
     /tmp/ccUzDC5F.s:3848   .debug_str:00000000000004bd .LASF17
     /tmp/ccUzDC5F.s:3776   .debug_str:0000000000000233 .LASF18
     /tmp/ccUzDC5F.s:4032   .debug_str:0000000000000a5d .LASF19
     /tmp/ccUzDC5F.s:4006   .debug_str:0000000000000980 .LASF21
     /tmp/ccUzDC5F.s:3778   .debug_str:000000000000023c .LASF22
     /tmp/ccUzDC5F.s:3982   .debug_str:00000000000008e1 .LASF23
     /tmp/ccUzDC5F.s:3760   .debug_str:000000000000018a .LASF24
     /tmp/ccUzDC5F.s:3806   .debug_str:000000000000034e .LASF25
     /tmp/ccUzDC5F.s:3814   .debug_str:000000000000037b .LASF27
     /tmp/ccUzDC5F.s:3756   .debug_str:000000000000016b .LASF26
     /tmp/ccUzDC5F.s:3762   .debug_str:0000000000000196 .LASF28
     /tmp/ccUzDC5F.s:3940   .debug_str:000000000000071f .LASF29
     /tmp/ccUzDC5F.s:3774   .debug_str:0000000000000218 .LASF30
     /tmp/ccUzDC5F.s:3818   .debug_str:00000000000003a0 .LASF31
     /tmp/ccUzDC5F.s:4026   .debug_str:0000000000000a2d .LASF32
     /tmp/ccUzDC5F.s:4000   .debug_str:000000000000095a .LASF33
     /tmp/ccUzDC5F.s:3996   .debug_str:0000000000000928 .LASF35
     /tmp/ccUzDC5F.s:3920   .debug_str:000000000000068f .LASF37
     /tmp/ccUzDC5F.s:3882   .debug_str:0000000000000587 .LASF39
     /tmp/ccUzDC5F.s:3906   .debug_str:0000000000000622 .LASF34
     /tmp/ccUzDC5F.s:3908   .debug_str:0000000000000629 .LASF36
     /tmp/ccUzDC5F.s:3876   .debug_str:0000000000000554 .LASF38
     /tmp/ccUzDC5F.s:3836   .debug_str:000000000000046f .LASF40
     /tmp/ccUzDC5F.s:4028   .debug_str:0000000000000a47 .LASF41
     /tmp/ccUzDC5F.s:3988   .debug_str:00000000000008fc .LASF42
     /tmp/ccUzDC5F.s:3872   .debug_str:0000000000000547 .LASF43
     /tmp/ccUzDC5F.s:3880   .debug_str:0000000000000573 .LASF44
     /tmp/ccUzDC5F.s:3850   .debug_str:00000000000004c6 .LASF45
     /tmp/ccUzDC5F.s:3912   .debug_str:0000000000000657 .LASF46
     /tmp/ccUzDC5F.s:4052   .debug_str:0000000000000b0a .LASF47
     /tmp/ccUzDC5F.s:3822   .debug_str:00000000000003d8 .LASF48
     /tmp/ccUzDC5F.s:3958   .debug_str:0000000000000843 .LASF49
     /tmp/ccUzDC5F.s:3936   .debug_str:0000000000000705 .LASF50
     /tmp/ccUzDC5F.s:3938   .debug_str:0000000000000718 .LASF51
     /tmp/ccUzDC5F.s:3746   .debug_str:0000000000000111 .LASF52
     /tmp/ccUzDC5F.s:3768   .debug_str:00000000000001d0 .LASF53
     /tmp/ccUzDC5F.s:3810   .debug_str:0000000000000360 .LASF54
     /tmp/ccUzDC5F.s:3990   .debug_str:0000000000000910 .LASF55
     /tmp/ccUzDC5F.s:3802   .debug_str:0000000000000321 .LASF56
     /tmp/ccUzDC5F.s:3714   .debug_str:000000000000001e .LASF57
     /tmp/ccUzDC5F.s:3928   .debug_str:00000000000006bb .LASF58
     /tmp/ccUzDC5F.s:3922   .debug_str:0000000000000698 .LASF59
     /tmp/ccUzDC5F.s:4048   .debug_str:0000000000000adb .LASF60
     /tmp/ccUzDC5F.s:4022   .debug_str:0000000000000a1b .LASF61
     /tmp/ccUzDC5F.s:4036   .debug_str:0000000000000a6d .LASF62
     /tmp/ccUzDC5F.s:4016   .debug_str:00000000000009f2 .LASF63
     /tmp/ccUzDC5F.s:3862   .debug_str:00000000000004fe .LASF64
GAS LISTING /tmp/ccUzDC5F.s 			page 31


     /tmp/ccUzDC5F.s:3726   .debug_str:0000000000000080 .LASF107
     /tmp/ccUzDC5F.s:3788   .debug_str:000000000000029e .LASF109
     /tmp/ccUzDC5F.s:4054   .debug_str:0000000000000b12 .LASF66
     /tmp/ccUzDC5F.s:4004   .debug_str:000000000000097b .LASF87
     /tmp/ccUzDC5F.s:3840   .debug_str:0000000000000492 .LASF67
     /tmp/ccUzDC5F.s:3744   .debug_str:000000000000010c .LASF68
     /tmp/ccUzDC5F.s:4010   .debug_str:00000000000009aa .LASF105
     /tmp/ccUzDC5F.s:3782   .debug_str:0000000000000269 .LASF69
     /tmp/ccUzDC5F.s:3874   .debug_str:000000000000054f .LASF70
     /tmp/ccUzDC5F.s:3870   .debug_str:0000000000000542 .LASF71
     /tmp/ccUzDC5F.s:3892   .debug_str:00000000000005ca .LASF73
     /tmp/ccUzDC5F.s:3910   .debug_str:000000000000063c .LASF78
     /tmp/ccUzDC5F.s:3926   .debug_str:00000000000006b1 .LASF164
     /tmp/ccUzDC5F.s:3804   .debug_str:0000000000000333 .LASF165
     /tmp/ccUzDC5F.s:3918   .debug_str:0000000000000686 .LASF72
     /tmp/ccUzDC5F.s:4046   .debug_str:0000000000000aba .LASF74
     /tmp/ccUzDC5F.s:3852   .debug_str:00000000000004ce .LASF75
     /tmp/ccUzDC5F.s:4014   .debug_str:00000000000009d2 .LASF76
     /tmp/ccUzDC5F.s:3890   .debug_str:00000000000005be .LASF77
     /tmp/ccUzDC5F.s:3834   .debug_str:000000000000044d .LASF79
     /tmp/ccUzDC5F.s:4056   .debug_str:0000000000000b20 .LASF80
     /tmp/ccUzDC5F.s:4040   .debug_str:0000000000000a8f .LASF81
     /tmp/ccUzDC5F.s:3944   .debug_str:000000000000073c .LASF82
     /tmp/ccUzDC5F.s:3786   .debug_str:000000000000027d .LASF83
     /tmp/ccUzDC5F.s:3900   .debug_str:000000000000060c .LASF84
     /tmp/ccUzDC5F.s:3748   .debug_str:0000000000000124 .LASF85
     /tmp/ccUzDC5F.s:3724   .debug_str:0000000000000078 .LASF86
     /tmp/ccUzDC5F.s:3968   .debug_str:0000000000000890 .LASF88
     /tmp/ccUzDC5F.s:3980   .debug_str:00000000000008d9 .LASF166
     /tmp/ccUzDC5F.s:3962   .debug_str:0000000000000856 .LASF89
     /tmp/ccUzDC5F.s:3838   .debug_str:0000000000000482 .LASF90
     /tmp/ccUzDC5F.s:3970   .debug_str:0000000000000898 .LASF91
     /tmp/ccUzDC5F.s:3930   .debug_str:00000000000006d3 .LASF92
     /tmp/ccUzDC5F.s:3730   .debug_str:000000000000009f .LASF93
     /tmp/ccUzDC5F.s:4008   .debug_str:000000000000098f .LASF94
     /tmp/ccUzDC5F.s:3720   .debug_str:0000000000000065 .LASF95
     /tmp/ccUzDC5F.s:3770   .debug_str:00000000000001d6 .LASF96
     /tmp/ccUzDC5F.s:3884   .debug_str:000000000000059c .LASF167
     /tmp/ccUzDC5F.s:3858   .debug_str:00000000000004e7 .LASF97
     /tmp/ccUzDC5F.s:3718   .debug_str:000000000000004a .LASF98
     /tmp/ccUzDC5F.s:3864   .debug_str:0000000000000514 .LASF99
     /tmp/ccUzDC5F.s:3708   .debug_str:0000000000000000 .LASF100
     /tmp/ccUzDC5F.s:4044   .debug_str:0000000000000ab4 .LASF101
     /tmp/ccUzDC5F.s:3994   .debug_str:0000000000000920 .LASF102
     /tmp/ccUzDC5F.s:3950   .debug_str:0000000000000759 .LASF103
     /tmp/ccUzDC5F.s:3758   .debug_str:000000000000017c .LASF104
     /tmp/ccUzDC5F.s:3830   .debug_str:000000000000040e .LASF106
     /tmp/ccUzDC5F.s:3916   .debug_str:0000000000000676 .LASF108
     /tmp/ccUzDC5F.s:3790   .debug_str:00000000000002c3 .LASF110
     /tmp/ccUzDC5F.s:3734   .debug_str:00000000000000b5 .LASF111
     /tmp/ccUzDC5F.s:3998   .debug_str:000000000000093d .LASF112
     /tmp/ccUzDC5F.s:3984   .debug_str:00000000000008ee .LASF113
     /tmp/ccUzDC5F.s:3854   .debug_str:00000000000004d6 .LASF114
     /tmp/ccUzDC5F.s:3794   .debug_str:00000000000002f2 .LASF115
     /tmp/ccUzDC5F.s:3972   .debug_str:00000000000008a3 .LASF116
     /tmp/ccUzDC5F.s:3868   .debug_str:0000000000000539 .LASF117
     /tmp/ccUzDC5F.s:4002   .debug_str:0000000000000963 .LASF118
GAS LISTING /tmp/ccUzDC5F.s 			page 32


     /tmp/ccUzDC5F.s:3992   .debug_str:0000000000000916 .LASF119
     /tmp/ccUzDC5F.s:4050   .debug_str:0000000000000af3 .LASF120
     /tmp/ccUzDC5F.s:3948   .debug_str:0000000000000750 .LASF121
     /tmp/ccUzDC5F.s:3764   .debug_str:00000000000001b4 .LASF122
     /tmp/ccUzDC5F.s:3976   .debug_str:00000000000008ad .LASF123
     /tmp/ccUzDC5F.s:3738   .debug_str:00000000000000d3 .LASF124
     /tmp/ccUzDC5F.s:3800   .debug_str:0000000000000316 .LASF125
     /tmp/ccUzDC5F.s:4018   .debug_str:00000000000009fc .LASF126
     /tmp/ccUzDC5F.s:3886   .debug_str:00000000000005a1 .LASF127
     /tmp/ccUzDC5F.s:3904   .debug_str:000000000000061a .LASF128
     /tmp/ccUzDC5F.s:3964   .debug_str:000000000000085f .LASF129
     /tmp/ccUzDC5F.s:3878   .debug_str:000000000000055b .LASF168
     /tmp/ccUzDC5F.s:3932   .debug_str:00000000000006ee .LASF169
     /tmp/ccUzDC5F.s:3766   .debug_str:00000000000001ca .LASF130
     /tmp/ccUzDC5F.s:3710   .debug_str:0000000000000005 .LASF131
     /tmp/ccUzDC5F.s:3898   .debug_str:00000000000005fd .LASF132
     /tmp/ccUzDC5F.s:3732   .debug_str:00000000000000ab .LASF133
     /tmp/ccUzDC5F.s:3722   .debug_str:0000000000000073 .LASF134
     /tmp/ccUzDC5F.s:3844   .debug_str:00000000000004a5 .LASF135
     /tmp/ccUzDC5F.s:3888   .debug_str:00000000000005ae .LASF136
     /tmp/ccUzDC5F.s:3866   .debug_str:000000000000052f .LASF137
     /tmp/ccUzDC5F.s:3716   .debug_str:0000000000000029 .LASF138
     /tmp/ccUzDC5F.s:3812   .debug_str:0000000000000372 .LASF139
     /tmp/ccUzDC5F.s:3780   .debug_str:0000000000000248 .LASF140
     /tmp/ccUzDC5F.s:3946   .debug_str:0000000000000747 .LASF141
     /tmp/ccUzDC5F.s:3978   .debug_str:00000000000008b9 .LASF142
     /tmp/ccUzDC5F.s:3860   .debug_str:00000000000004f3 .LASF170
     /tmp/ccUzDC5F.s:3826   .debug_str:00000000000003f2 .LASF171
     /tmp/ccUzDC5F.s:3966   .debug_str:0000000000000865 .LASF172
     /tmp/ccUzDC5F.s:88     .text:0000000000000028 .LFB43
     /tmp/ccUzDC5F.s:779    .text:00000000000002f8 .LFE43
     /tmp/ccUzDC5F.s:4042   .debug_str:0000000000000aae .LASF143
     /tmp/ccUzDC5F.s:3728   .debug_str:0000000000000098 .LASF144
     /tmp/ccUzDC5F.s:3485   .debug_loc:0000000000000000 .LLST1
     /tmp/ccUzDC5F.s:3954   .debug_str:0000000000000778 .LASF145
     /tmp/ccUzDC5F.s:3570   .debug_loc:0000000000000170 .LLST2
     /tmp/ccUzDC5F.s:3986   .debug_str:00000000000008f7 .LASF146
     /tmp/ccUzDC5F.s:4024   .debug_str:0000000000000a25 .LASF147
     /tmp/ccUzDC5F.s:367    .text:0000000000000180 .LBB49
     /tmp/ccUzDC5F.s:392    .text:0000000000000190 .LBE49
     /tmp/ccUzDC5F.s:3581   .debug_loc:00000000000001a6 .LLST3
     /tmp/ccUzDC5F.s:3588   .debug_loc:00000000000001c9 .LLST4
     /tmp/ccUzDC5F.s:381    .text:000000000000018c .LVL12
     /tmp/ccUzDC5F.s:452    .text:00000000000001b4 .LBB50
     /tmp/ccUzDC5F.s:477    .text:00000000000001c8 .LBE50
     /tmp/ccUzDC5F.s:3595   .debug_loc:00000000000001ec .LLST5
     /tmp/ccUzDC5F.s:465    .text:00000000000001c0 .LVL21
     /tmp/ccUzDC5F.s:480    .text:00000000000001c8 .LBB51
     /tmp/ccUzDC5F.s:532    .text:000000000000020c .LBE51
     /tmp/ccUzDC5F.s:4034   .debug_str:0000000000000a66 .LASF148
     /tmp/ccUzDC5F.s:3842   .debug_str:0000000000000497 .LASF149
     /tmp/ccUzDC5F.s:3856   .debug_str:00000000000004db .LASF150
     /tmp/ccUzDC5F.s:3602   .debug_loc:000000000000020f .LLST6
     /tmp/ccUzDC5F.s:510    .text:00000000000001ec .LVL23
     /tmp/ccUzDC5F.s:520    .text:0000000000000204 .LVL26
     /tmp/ccUzDC5F.s:560    .text:0000000000000228 .LBB52
     /tmp/ccUzDC5F.s:593    .text:0000000000000244 .LBE52
GAS LISTING /tmp/ccUzDC5F.s 			page 33


     /tmp/ccUzDC5F.s:3613   .debug_loc:0000000000000245 .LLST7
     /tmp/ccUzDC5F.s:3902   .debug_str:0000000000000615 .LASF151
     /tmp/ccUzDC5F.s:3620   .debug_loc:0000000000000268 .LLST8
     /tmp/ccUzDC5F.s:581    .text:000000000000023c .LVL34
     /tmp/ccUzDC5F.s:596    .text:0000000000000244 .LBB53
     /tmp/ccUzDC5F.s:621    .text:0000000000000258 .LBE53
     /tmp/ccUzDC5F.s:3627   .debug_loc:000000000000028b .LLST9
     /tmp/ccUzDC5F.s:609    .text:0000000000000250 .LVL37
     /tmp/ccUzDC5F.s:624    .text:0000000000000258 .LBB54
     /tmp/ccUzDC5F.s:649    .text:000000000000026c .LBE54
     /tmp/ccUzDC5F.s:3634   .debug_loc:00000000000002ae .LLST10
     /tmp/ccUzDC5F.s:637    .text:0000000000000264 .LVL40
     /tmp/ccUzDC5F.s:652    .text:000000000000026c .LBB55
     /tmp/ccUzDC5F.s:677    .text:0000000000000280 .LBE55
     /tmp/ccUzDC5F.s:3641   .debug_loc:00000000000002d1 .LLST11
     /tmp/ccUzDC5F.s:665    .text:0000000000000278 .LVL43
     /tmp/ccUzDC5F.s:680    .text:0000000000000280 .LBB56
     /tmp/ccUzDC5F.s:705    .text:0000000000000294 .LBE56
     /tmp/ccUzDC5F.s:3648   .debug_loc:00000000000002f4 .LLST12
     /tmp/ccUzDC5F.s:693    .text:000000000000028c .LVL46
     /tmp/ccUzDC5F.s:708    .text:0000000000000294 .LBB57
     /tmp/ccUzDC5F.s:724    .text:00000000000002a4 .LBE57
     /tmp/ccUzDC5F.s:3655   .debug_loc:0000000000000317 .LLST13
     /tmp/ccUzDC5F.s:712    .text:000000000000029c .LVL48
     /tmp/ccUzDC5F.s:113    .text:0000000000000044 .LBB35
     /tmp/ccUzDC5F.s:129    .text:0000000000000050 .LBE35
     /tmp/ccUzDC5F.s:131    .text:0000000000000050 .LBB37
     /tmp/ccUzDC5F.s:146    .text:000000000000005c .LBE37
     /tmp/ccUzDC5F.s:150    .text:0000000000000060 .LBB39
     /tmp/ccUzDC5F.s:165    .text:000000000000006c .LBE39
     /tmp/ccUzDC5F.s:191    .text:00000000000000ac .LBB42
     /tmp/ccUzDC5F.s:206    .text:00000000000000b8 .LBE42
     /tmp/ccUzDC5F.s:219    .text:00000000000000dc .LBB44
     /tmp/ccUzDC5F.s:234    .text:00000000000000e8 .LBE44
     /tmp/ccUzDC5F.s:399    .text:0000000000000194 .LBB59
     /tmp/ccUzDC5F.s:410    .text:0000000000000198 .LBE59
     /tmp/ccUzDC5F.s:3662   .debug_loc:000000000000033a .LLST14
     /tmp/ccUzDC5F.s:415    .text:000000000000019c .LBB61
     /tmp/ccUzDC5F.s:427    .text:00000000000001a0 .LBE61
     /tmp/ccUzDC5F.s:3669   .debug_loc:000000000000035d .LLST15
     /tmp/ccUzDC5F.s:729    .text:00000000000002a4 .LBB65
     /tmp/ccUzDC5F.s:744    .text:00000000000002b0 .LBE65
     /tmp/ccUzDC5F.s:3676   .debug_loc:0000000000000380 .LLST16
     /tmp/ccUzDC5F.s:189    .text:00000000000000ac .LVL4
     /tmp/ccUzDC5F.s:212    .text:00000000000000cc .LVL5
     /tmp/ccUzDC5F.s:217    .text:00000000000000dc .LVL6
     /tmp/ccUzDC5F.s:240    .text:00000000000000fc .LVL7
     /tmp/ccUzDC5F.s:245    .text:000000000000010c .LVL8
     /tmp/ccUzDC5F.s:252    .text:0000000000000120 .LVL9
     /tmp/ccUzDC5F.s:265    .text:0000000000000148 .LVL10
     /tmp/ccUzDC5F.s:538    .text:0000000000000214 .LVL28
     /tmp/ccUzDC5F.s:554    .text:0000000000000224 .LVL30
     /tmp/ccUzDC5F.s:748    .text:00000000000002b8 .LVL51
     /tmp/ccUzDC5F.s:756    .text:00000000000002cc .LVL52
     /tmp/ccUzDC5F.s:765    .text:00000000000002e0 .LVL53
     /tmp/ccUzDC5F.s:774    .text:00000000000002f4 .LVL54
     /tmp/ccUzDC5F.s:3974   .debug_str:00000000000008a8 .LASF152
GAS LISTING /tmp/ccUzDC5F.s 			page 34


     /tmp/ccUzDC5F.s:13     .text:0000000000000000 .LFB42
     /tmp/ccUzDC5F.s:59     .text:0000000000000028 .LFE42
     /tmp/ccUzDC5F.s:25     .text:000000000000000c .LBB33
     /tmp/ccUzDC5F.s:38     .text:0000000000000014 .LBE33
     /tmp/ccUzDC5F.s:3684   .debug_loc:00000000000003a4 .LLST0
     /tmp/ccUzDC5F.s:4012   .debug_str:00000000000009cd .LASF153
     /tmp/ccUzDC5F.s:3750   .debug_str:0000000000000142 .LASF154
     /tmp/ccUzDC5F.s:3824   .debug_str:00000000000003ec .LASF173
     /tmp/ccUzDC5F.s:3736   .debug_str:00000000000000c3 .LASF174
     /tmp/ccUzDC5F.s:3808   .debug_str:0000000000000359 .LASF155
     /tmp/ccUzDC5F.s:3752   .debug_str:0000000000000148 .LASF156
     /tmp/ccUzDC5F.s:4038   .debug_str:0000000000000a83 .LASF157
     /tmp/ccUzDC5F.s:3942   .debug_str:000000000000072d .LASF158
     /tmp/ccUzDC5F.s:3896   .debug_str:00000000000005f4 .LASF159
     /tmp/ccUzDC5F.s:3796   .debug_str:00000000000002f8 .LASF160
     /tmp/ccUzDC5F.s:111    .text:0000000000000044 .LVL2
     /tmp/ccUzDC5F.s:389    .text:0000000000000190 .LVL13
     /tmp/ccUzDC5F.s:443    .text:00000000000001b4 .LVL19
     /tmp/ccUzDC5F.s:475    .text:00000000000001c8 .LVL22
     /tmp/ccUzDC5F.s:530    .text:000000000000020c .LVL27
     /tmp/ccUzDC5F.s:548    .text:000000000000021c .LVL29
     /tmp/ccUzDC5F.s:591    .text:0000000000000244 .LVL35
     /tmp/ccUzDC5F.s:619    .text:0000000000000258 .LVL38
     /tmp/ccUzDC5F.s:647    .text:000000000000026c .LVL41
     /tmp/ccUzDC5F.s:675    .text:0000000000000280 .LVL44
     /tmp/ccUzDC5F.s:703    .text:0000000000000294 .LVL47
     /tmp/ccUzDC5F.s:127    .text:0000000000000050 .LVL3
     /tmp/ccUzDC5F.s:439    .text:00000000000001ac .LVL18
     /tmp/ccUzDC5F.s:376    .text:0000000000000184 .LVL11
     /tmp/ccUzDC5F.s:460    .text:00000000000001b8 .LVL20
     /tmp/ccUzDC5F.s:512    .text:00000000000001f0 .LVL24
     /tmp/ccUzDC5F.s:516    .text:00000000000001f4 .LVL25
     /tmp/ccUzDC5F.s:568    .text:000000000000022c .LVL31
     /tmp/ccUzDC5F.s:574    .text:0000000000000230 .LVL32
     /tmp/ccUzDC5F.s:579    .text:0000000000000234 .LVL33
     /tmp/ccUzDC5F.s:604    .text:0000000000000248 .LVL36
     /tmp/ccUzDC5F.s:632    .text:000000000000025c .LVL39
     /tmp/ccUzDC5F.s:660    .text:0000000000000270 .LVL42
     /tmp/ccUzDC5F.s:688    .text:0000000000000284 .LVL45
     /tmp/ccUzDC5F.s:722    .text:00000000000002a4 .LVL49
     /tmp/ccUzDC5F.s:398    .text:0000000000000194 .LVL14
     /tmp/ccUzDC5F.s:407    .text:0000000000000198 .LVL15
     /tmp/ccUzDC5F.s:414    .text:000000000000019c .LVL16
     /tmp/ccUzDC5F.s:423    .text:00000000000001a0 .LVL17
     /tmp/ccUzDC5F.s:741    .text:00000000000002b0 .LVL50
     /tmp/ccUzDC5F.s:24     .text:000000000000000c .LVL0
     /tmp/ccUzDC5F.s:35     .text:0000000000000014 .LVL1
     /tmp/ccUzDC5F.s:792    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z8printIntiii
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_Znam
_ZN7_thread13create_threadEPPS_PFvPvES2_S2_
_ZN7_thread11thread_exitEv
GAS LISTING /tmp/ccUzDC5F.s 			page 35


_ZN7_thread15thread_dispatchEv
_ZN4_sem8open_semEPPS_j
_ZN4_sem9close_semEPS_
_ZN4_sem8sem_waitEPS_
_ZN4_sem10sem_signalEPS_
_ZN4_sem11sem_trywaitEPS_
__getc
console_handler
