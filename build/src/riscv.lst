GAS LISTING /tmp/cchK8ftJ.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB41:
  14              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/_thread.hpp"
   8:src/riscv.cpp **** #include "../test/printing.hpp"
   9:src/riscv.cpp **** #include "../h/_sem.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  15              		.loc 1 12 1
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra"); // zato ovde upisujem da nas vrati tamo odakle je i ova fun
  23              		.loc 1 13 5
  24              		.loc 1 13 39 is_stmt 0
  25              	 #APP
  26              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile ("sret"); //ovo sret ce vratiti tamo gde je sepc rekao, i to nam ne odgovara
  27              		csrw sepc, ra
  28              	# 0 "" 2
  29              		.loc 1 14 5 is_stmt 1
  30              		.loc 1 14 30 is_stmt 0
  31              	# 14 "src/riscv.cpp" 1
  15              	
  16:src/riscv.cpp **** }
  32              		sret
  33              	# 0 "" 2
  34              		.loc 1 16 1
  35              	 #NO_APP
  36 0014 03348100 		ld	s0,8(sp)
  37              		.cfi_restore 8
  38              		.cfi_def_cfa 2, 16
  39 0018 13010101 		addi	sp,sp,16
  40              		.cfi_def_cfa_offset 0
  41 001c 67800000 		jr	ra
  42              		.cfi_endproc
GAS LISTING /tmp/cchK8ftJ.s 			page 2


  43              	.LFE41:
  45              		.section	.rodata.str1.8,"aMS",@progbits,1
  46              		.align	3
  47              	.LC0:
  48 0000 0A506320 		.string	"\nPc greske: "
  48      67726573 
  48      6B653A20 
  48      00
  49 000d 000000   		.align	3
  50              	.LC1:
  51 0010 0A537456 		.string	"\nStVal greske: "
  51      616C2067 
  51      7265736B 
  51      653A2000 
  52              		.align	3
  53              	.LC2:
  54 0020 0A52617A 		.string	"\nRazlog greske scause: "
  54      6C6F6720 
  54      67726573 
  54      6B652073 
  54      63617573 
  55              		.align	3
  56              	.LC3:
  57 0038 204E656C 		.string	" Nelegelna instrukcija"
  57      6567656C 
  57      6E612069 
  57      6E737472 
  57      756B6369 
  58 004f 00       		.align	3
  59              	.LC4:
  60 0050 204E6564 		.string	" Nedozvoljena adresa citanja"
  60      6F7A766F 
  60      6C6A656E 
  60      61206164 
  60      72657361 
  61 006d 000000   		.align	3
  62              	.LC5:
  63 0070 204E6564 		.string	" Nedozvoljena adresa upisa"
  63      6F7A766F 
  63      6C6A656E 
  63      61206164 
  63      72657361 
  64 008b 00000000 		.align	3
  64      00
  65              	.LC6:
  66 0090 204F7374 		.string	" Ostalo"
  66      616C6F00 
  67              		.text
  68              		.align	2
  69              		.globl	_ZN5Riscv23interruptRoutineHandlerEv
  71              	_ZN5Riscv23interruptRoutineHandlerEv:
  72              	.LFB42:
  17:src/riscv.cpp **** 
  18:src/riscv.cpp **** void Riscv::interruptRoutineHandler(){
  73              		.loc 1 18 38 is_stmt 1
  74              		.cfi_startproc
  75 0020 130101F8 		addi	sp,sp,-128
GAS LISTING /tmp/cchK8ftJ.s 			page 3


  76              		.cfi_def_cfa_offset 128
  77 0024 233C1106 		sd	ra,120(sp)
  78 0028 23388106 		sd	s0,112(sp)
  79 002c 23349106 		sd	s1,104(sp)
  80              		.cfi_offset 1, -8
  81              		.cfi_offset 8, -16
  82              		.cfi_offset 9, -24
  83 0030 13040108 		addi	s0,sp,128
  84              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp ****     uint64 volatile fcode;
  85              		.loc 1 19 5
  20:src/riscv.cpp ****     asm volatile("mv %0, a0" : "=r" (fcode));
  86              		.loc 1 20 5
  87              		.loc 1 20 45 is_stmt 0
  88              	 #APP
  89              	# 20 "src/riscv.cpp" 1
  21              	    uint64 retval = 0;
  90              		mv a5, a0
  91              	# 0 "" 2
  92              	 #NO_APP
  93 0038 233CF4FC 		sd	a5,-40(s0)
  94              		.loc 1 21 5 is_stmt 1
  95              	.LVL0:
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****     //r_scause -> read scause
  24:src/riscv.cpp ****     uint64 scause = r_scause(); // scause -> razlog prekida
  96              		.loc 1 24 5
  97              	.LBB29:
  98              	.LBB30:
  99              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS_PROJEKAT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS_PROJEKAT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** 
   9:src/../h/riscv.hpp **** #include "../lib/hw.h"
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** class Riscv
  13:src/../h/riscv.hpp **** {
  14:src/../h/riscv.hpp **** public:
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // pop status.spp and sstatus.spie bits
  17:src/../h/riscv.hpp ****     static void popSppSpie();
  18:src/../h/riscv.hpp ****     //implementaciju ove metode stavljam u cpp zato sto je vazno da ova staticka metoda
  19:src/../h/riscv.hpp ****     //bude ne inline, da bi se ovaj kod pozvao i da bi se promenio ra registar
  20:src/../h/riscv.hpp ****     //bitno je da znamo odakle se desio poziv
  21:src/../h/riscv.hpp ****     //jedini nacin da promenimo rezim privilegije je sa funkcijama koje se vracaju iz prekidne ruti
  22:src/../h/riscv.hpp ****     //pomocu sret, konekts novonapravljene niti nece ici preko normalne prekidne rutine vec ce ici 
  23:src/../h/riscv.hpp ****     //threadWrapera i u okviru njegove funckije treba izaci iz prekidne rutine
  24:src/../h/riscv.hpp ****     //sret ce se vratiti tamo gde je sepc rekao
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     //preko name manlinga uazi se u definiciju koja je napisana u fajlu preko asemblera
  27:src/../h/riscv.hpp ****     static void interruptRoutine();
GAS LISTING /tmp/cchK8ftJ.s 			page 4


  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  30:src/../h/riscv.hpp ****     static void pushRegisters();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  33:src/../h/riscv.hpp ****     static void popRegisters();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register scause
  36:src/../h/riscv.hpp ****     static uint64 r_scause();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register scause
  39:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // read register sepc
  42:src/../h/riscv.hpp ****     static uint64 r_sepc();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // write register sepc
  45:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // read register stvec
  48:src/../h/riscv.hpp ****     static uint64 r_stvec();
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // write register stvec
  51:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // read register stval
  54:src/../h/riscv.hpp ****     static uint64 r_stval();
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // write register stval
  57:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     enum BitMaskSip
  60:src/../h/riscv.hpp ****     {
  61:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  62:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  63:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  64:src/../h/riscv.hpp ****     };
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // mask set register sip
  67:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // mask clear register sip
  70:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // read register sip
  73:src/../h/riscv.hpp ****     static uint64 r_sip();
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // write register sip
  76:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     enum BitMaskSstatus
  79:src/../h/riscv.hpp ****     {
  80:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  81:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  82:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  83:src/../h/riscv.hpp ****     };
  84:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cchK8ftJ.s 			page 5


  85:src/../h/riscv.hpp ****     // mask set register sstatus
  86:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // mask clear register sstatus
  89:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     // read register sstatus
  92:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     // write register sstatus
  95:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** private:
  98:src/../h/riscv.hpp ****     static void interruptRoutineHandler();
  99:src/../h/riscv.hpp **** };
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile scause;
 100              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 101              		.loc 2 104 5
 102              		.loc 2 104 72 is_stmt 0
 103              	 #APP
 104              	# 104 "src/../h/riscv.hpp" 1
 105              	    return scause;
 105              		csrr a5, scause
 106              	# 0 "" 2
 107              	 #NO_APP
 108 0040 2338F4FA 		sd	a5,-80(s0)
 109              		.loc 2 105 5 is_stmt 1
 110              		.loc 2 105 12 is_stmt 0
 111 0044 833404FB 		ld	s1,-80(s0)
 112              	.LVL1:
 113              	.LBE30:
 114              	.LBE29:
  25:src/riscv.cpp **** 
  26:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL){
 115              		.loc 1 26 5 is_stmt 1
 116              	.LBB31:
 117              		.loc 1 26 40 is_stmt 0
 118 0048 138784FF 		addi	a4,s1,-8
 119              		.loc 1 26 5
 120 004c 93071000 		li	a5,1
 121 0050 63FAE70C 		bleu	a4,a5,.L23
  27:src/riscv.cpp ****         //softverski prekid, sistemski poziv iz koristnickog ili sistemskog rezima
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
  30:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  31:src/riscv.cpp **** 
  32:src/riscv.cpp ****         switch(fcode){
  33:src/riscv.cpp ****             case 0x11: {
  34:src/riscv.cpp **** 
  35:src/riscv.cpp ****                 uint64 volatile handle, start_routine, arg;
  36:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));    //thread_t* handle
  37:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (start_routine));    //void (*function)(void*)
  38:src/riscv.cpp ****                 asm volatile("mv %0, a3" : "=r" (arg));
GAS LISTING /tmp/cchK8ftJ.s 			page 6


  39:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
  40:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
  41:src/riscv.cpp ****                                                 (void *) stack_space);
  42:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  43:src/riscv.cpp ****                 break;
  44:src/riscv.cpp ****                 }
  45:src/riscv.cpp ****             case 0x12: {
  46:src/riscv.cpp ****                 retval = _thread::thread_exit();
  47:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  48:src/riscv.cpp ****                 break;
  49:src/riscv.cpp ****                 }
  50:src/riscv.cpp ****             case 0x13:
  51:src/riscv.cpp ****                 _thread::thread_dispatch();
  52:src/riscv.cpp ****                 break;
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****             case 0x21:{
  55:src/riscv.cpp ****                 uint64 handle, init;
  56:src/riscv.cpp **** 
  57:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
  58:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (init));
  59:src/riscv.cpp ****                 retval = _sem::open_sem((sem_t*)(handle), init);
  60:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  61:src/riscv.cpp **** 
  62:src/riscv.cpp ****                 break;
  63:src/riscv.cpp ****             }
  64:src/riscv.cpp ****             case 0x22:{
  65:src/riscv.cpp ****                 uint64 handle;
  66:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
  67:src/riscv.cpp ****                 retval = _sem::close_sem((sem_t)handle);
  68:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  69:src/riscv.cpp **** 
  70:src/riscv.cpp ****                 break;
  71:src/riscv.cpp ****             }
  72:src/riscv.cpp ****             case 0x23:{
  73:src/riscv.cpp ****                 uint64 handle;
  74:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
  75:src/riscv.cpp ****                 retval = _sem::sem_wait((sem_t)handle);
  76:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****                 break;
  79:src/riscv.cpp ****             }
  80:src/riscv.cpp ****             case 0x24:{
  81:src/riscv.cpp ****                 uint64 handle;
  82:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
  83:src/riscv.cpp ****                 retval = _sem::sem_signal((sem_t)handle);
  84:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  85:src/riscv.cpp **** 
  86:src/riscv.cpp ****                 break;
  87:src/riscv.cpp ****             }
  88:src/riscv.cpp ****             case 0x26:{
  89:src/riscv.cpp ****                 uint64 handle;
  90:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
  91:src/riscv.cpp ****                 retval = _sem::sem_trywait((sem_t)handle);
  92:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
  93:src/riscv.cpp **** 
  94:src/riscv.cpp ****                 break;
  95:src/riscv.cpp ****             }
GAS LISTING /tmp/cchK8ftJ.s 			page 7


  96:src/riscv.cpp ****             case 0x41:{
  97:src/riscv.cpp ****                 char ch = __getc();
  98:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ch));
  99:src/riscv.cpp ****                 break;
 100:src/riscv.cpp ****             }
 101:src/riscv.cpp ****             default:
 102:src/riscv.cpp ****                 break;
 103:src/riscv.cpp **** 
 104:src/riscv.cpp ****         }
 105:src/riscv.cpp **** 
 106:src/riscv.cpp ****         w_sepc(sepc); //ako je unutar dispacha promenjen pc ovde upisujem taj novi(sto je nekad sac
 107:src/riscv.cpp ****         w_sstatus(sstatus);
 108:src/riscv.cpp ****     }
 109:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL){
 122              		.loc 1 109 10 is_stmt 1
 123 0054 9307F0FF 		li	a5,-1
 124 0058 9397F703 		slli	a5,a5,63
 125 005c 93871700 		addi	a5,a5,1
 126 0060 6388F420 		beq	s1,a5,.L24
 110:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 111:src/riscv.cpp ****     }
 112:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL){
 127              		.loc 1 112 10
 128 0064 9307F0FF 		li	a5,-1
 129 0068 9397F703 		slli	a5,a5,63
 130 006c 93879700 		addi	a5,a5,9
 131 0070 6386F420 		beq	s1,a5,.L25
 113:src/riscv.cpp ****         console_handler();
 114:src/riscv.cpp ****     }
 115:src/riscv.cpp ****     else{
 116:src/riscv.cpp ****         printString("\nPc greske: ");
 132              		.loc 1 116 9
 133              		.loc 1 116 20 is_stmt 0
 134 0074 17050000 		lla	a0,.LC0
 134      13050500 
 135 007c 97000000 		call	_Z11printStringPKc
 135      E7800000 
 136              	.LVL2:
 117:src/riscv.cpp ****         printInt(r_sepc());//cuva adresu na kooju se vracam posle prekidne rutine
 137              		.loc 1 117 9 is_stmt 1
 138              	.LBB32:
 139              	.LBB33:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile sepc;
 140              		.loc 2 115 5
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 141              		.loc 2 116 5
 142              		.loc 2 116 64 is_stmt 0
 143              	 #APP
GAS LISTING /tmp/cchK8ftJ.s 			page 8


 144              	# 116 "src/../h/riscv.hpp" 1
 117              	    return sepc;
 145              		csrr a5, sepc
 146              	# 0 "" 2
 147              	 #NO_APP
 148 0088 2338F4FC 		sd	a5,-48(s0)
 149              		.loc 2 117 5 is_stmt 1
 150              		.loc 2 117 12 is_stmt 0
 151 008c 033504FD 		ld	a0,-48(s0)
 152              	.LBE33:
 153              	.LBE32:
 154              		.loc 1 117 17
 155 0090 13060000 		li	a2,0
 156 0094 9305A000 		li	a1,10
 157 0098 1B050500 		sext.w	a0,a0
 158 009c 97000000 		call	_Z8printIntiii
 158      E7800000 
 159              	.LVL3:
 118:src/riscv.cpp ****         printString("\nStVal greske: ");
 160              		.loc 1 118 9 is_stmt 1
 161              		.loc 1 118 20 is_stmt 0
 162 00a4 17050000 		lla	a0,.LC1
 162      13050500 
 163 00ac 97000000 		call	_Z11printStringPKc
 163      E7800000 
 164              	.LVL4:
 119:src/riscv.cpp ****         printInt(r_stval());
 165              		.loc 1 119 9 is_stmt 1
 166              	.LBB34:
 167              	.LBB35:
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stvec;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 129:src/../h/riscv.hpp ****     return stvec;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     uint64 volatile stval;
 168              		.loc 2 139 5
 140:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 169              		.loc 2 140 5
 170              		.loc 2 140 68 is_stmt 0
 171              	 #APP
GAS LISTING /tmp/cchK8ftJ.s 			page 9


 172              	# 140 "src/../h/riscv.hpp" 1
 141              	    return stval;
 173              		csrr a5, stval
 174              	# 0 "" 2
 175              	 #NO_APP
 176 00b8 2334F4FC 		sd	a5,-56(s0)
 177              		.loc 2 141 5 is_stmt 1
 178              		.loc 2 141 12 is_stmt 0
 179 00bc 033584FC 		ld	a0,-56(s0)
 180              	.LBE35:
 181              	.LBE34:
 182              		.loc 1 119 17
 183 00c0 13060000 		li	a2,0
 184 00c4 9305A000 		li	a1,10
 185 00c8 1B050500 		sext.w	a0,a0
 186 00cc 97000000 		call	_Z8printIntiii
 186      E7800000 
 187              	.LVL5:
 120:src/riscv.cpp ****         printString("\nRazlog greske scause: ");
 188              		.loc 1 120 9 is_stmt 1
 189              		.loc 1 120 20 is_stmt 0
 190 00d4 17050000 		lla	a0,.LC2
 190      13050500 
 191 00dc 97000000 		call	_Z11printStringPKc
 191      E7800000 
 192              	.LVL6:
 121:src/riscv.cpp ****         printInt(scause);
 193              		.loc 1 121 9 is_stmt 1
 194              		.loc 1 121 17 is_stmt 0
 195 00e4 13060000 		li	a2,0
 196 00e8 9305A000 		li	a1,10
 197 00ec 1B850400 		sext.w	a0,s1
 198 00f0 97000000 		call	_Z8printIntiii
 198      E7800000 
 199              	.LVL7:
 122:src/riscv.cpp ****         switch(scause) {
 200              		.loc 1 122 9 is_stmt 1
 201 00f8 93075000 		li	a5,5
 202 00fc 6380F41A 		beq	s1,a5,.L19
 203 0100 93077000 		li	a5,7
 204 0104 6386F41A 		beq	s1,a5,.L20
 205 0108 93072000 		li	a5,2
 206 010c 638EF416 		beq	s1,a5,.L26
 123:src/riscv.cpp ****             case 2:
 124:src/riscv.cpp ****                 printString(" Nelegelna instrukcija");
 125:src/riscv.cpp ****                 break;
 126:src/riscv.cpp ****             case 5:
 127:src/riscv.cpp ****                 printString(" Nedozvoljena adresa citanja");
 128:src/riscv.cpp ****                 break;
 129:src/riscv.cpp ****             case 7:
 130:src/riscv.cpp ****                 printString(" Nedozvoljena adresa upisa");
 131:src/riscv.cpp ****                 break;
 132:src/riscv.cpp ****             default:
 207              		.loc 1 132 13
 133:src/riscv.cpp ****                 printString(" Ostalo");
 208              		.loc 1 133 17
 209              		.loc 1 133 28 is_stmt 0
GAS LISTING /tmp/cchK8ftJ.s 			page 10


 210 0110 17050000 		lla	a0,.LC6
 210      13050500 
 211 0118 97000000 		call	_Z11printStringPKc
 211      E7800000 
 212              	.LVL8:
 134:src/riscv.cpp ****                 break;
 213              		.loc 1 134 17 is_stmt 1
 214              	.LBE31:
 135:src/riscv.cpp ****         }
 136:src/riscv.cpp ****     }
 137:src/riscv.cpp **** }...
 215              		.loc 1 137 1 is_stmt 0
 216 0120 6F00400A 		j	.L3
 217              	.L23:
 218              	.LBB59:
 219              	.LBB36:
  29:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 220              		.loc 1 29 9 is_stmt 1
 221              	.LBB37:
 222              	.LBB38:
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 223              		.loc 2 115 5
 116:src/../h/riscv.hpp ****     return sepc;
 224              		.loc 2 116 5
 116:src/../h/riscv.hpp ****     return sepc;
 225              		.loc 2 116 64 is_stmt 0
 226              	 #APP
 227              	# 116 "src/../h/riscv.hpp" 1
 228              		csrr a5, sepc
 229              	# 0 "" 2
 230              	 #NO_APP
 231 0128 2330F4FC 		sd	a5,-64(s0)
 117:src/../h/riscv.hpp **** }
 232              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 233              		.loc 2 117 12 is_stmt 0
 234 012c 833704FC 		ld	a5,-64(s0)
 235              	.LBE38:
 236              	.LBE37:
  29:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 237              		.loc 1 29 41
 238 0130 93874700 		addi	a5,a5,4
  29:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;    //prelazak na sledecu instrukciju; jer procesor pon
 239              		.loc 1 29 43
 240 0134 2334F4F8 		sd	a5,-120(s0)
  30:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 241              		.loc 1 30 9 is_stmt 1
 242              	.LBB39:
 243              	.LBB40:
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 147:src/../h/riscv.hpp **** }
 148:src/../h/riscv.hpp **** 
 149:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
GAS LISTING /tmp/cchK8ftJ.s 			page 11


 150:src/../h/riscv.hpp **** {
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     uint64 volatile sip;
 162:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 163:src/../h/riscv.hpp ****     return sip;
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 169:src/../h/riscv.hpp **** }
 170:src/../h/riscv.hpp **** 
 171:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 172:src/../h/riscv.hpp **** {
 173:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 179:src/../h/riscv.hpp **** }
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 244              		.loc 2 183 5
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 245              		.loc 2 184 5
 246              		.loc 2 184 76 is_stmt 0
 247              	 #APP
 248              	# 184 "src/../h/riscv.hpp" 1
 185              	    return sstatus;
 249              		csrr a5, sstatus
 250              	# 0 "" 2
 251              	 #NO_APP
 252 013c 233CF4FA 		sd	a5,-72(s0)
 253              		.loc 2 185 5 is_stmt 1
 254              		.loc 2 185 12 is_stmt 0
 255 0140 833784FB 		ld	a5,-72(s0)
 256              	.LBE40:
 257              	.LBE39:
  30:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 258              		.loc 1 30 45
 259 0144 2338F4F8 		sd	a5,-112(s0)
  32:src/riscv.cpp ****         switch(fcode){
 260              		.loc 1 32 9 is_stmt 1
 261              	.LBB41:
  32:src/riscv.cpp ****         switch(fcode){
GAS LISTING /tmp/cchK8ftJ.s 			page 12


 262              		.loc 1 32 16 is_stmt 0
 263 0148 833784FD 		ld	a5,-40(s0)
 264 014c 9387F7FE 		addi	a5,a5,-17
 265 0150 13070003 		li	a4,48
 266 0154 6360F706 		bgtu	a5,a4,.L5
 267 0158 93972700 		slli	a5,a5,2
 268 015c 17070000 		lla	a4,.L7
 268      13070700 
 269 0164 B387E700 		add	a5,a5,a4
 270 0168 83A70700 		lw	a5,0(a5)
 271 016c B387E700 		add	a5,a5,a4
 272 0170 67800700 		jr	a5
 273              		.section	.rodata
 274              		.align	2
 275              		.align	2
 276              	.L7:
 277 0000 00000000 		.word	.L15-.L7
 278 0004 00000000 		.word	.L14-.L7
 279 0008 00000000 		.word	.L13-.L7
 280 000c 00000000 		.word	.L5-.L7
 281 0010 00000000 		.word	.L5-.L7
 282 0014 00000000 		.word	.L5-.L7
 283 0018 00000000 		.word	.L5-.L7
 284 001c 00000000 		.word	.L5-.L7
 285 0020 00000000 		.word	.L5-.L7
 286 0024 00000000 		.word	.L5-.L7
 287 0028 00000000 		.word	.L5-.L7
 288 002c 00000000 		.word	.L5-.L7
 289 0030 00000000 		.word	.L5-.L7
 290 0034 00000000 		.word	.L5-.L7
 291 0038 00000000 		.word	.L5-.L7
 292 003c 00000000 		.word	.L5-.L7
 293 0040 00000000 		.word	.L12-.L7
 294 0044 00000000 		.word	.L11-.L7
 295 0048 00000000 		.word	.L10-.L7
 296 004c 00000000 		.word	.L9-.L7
 297 0050 00000000 		.word	.L5-.L7
 298 0054 00000000 		.word	.L8-.L7
 299 0058 00000000 		.word	.L5-.L7
 300 005c 00000000 		.word	.L5-.L7
 301 0060 00000000 		.word	.L5-.L7
 302 0064 00000000 		.word	.L5-.L7
 303 0068 00000000 		.word	.L5-.L7
 304 006c 00000000 		.word	.L5-.L7
 305 0070 00000000 		.word	.L5-.L7
 306 0074 00000000 		.word	.L5-.L7
 307 0078 00000000 		.word	.L5-.L7
 308 007c 00000000 		.word	.L5-.L7
 309 0080 00000000 		.word	.L5-.L7
 310 0084 00000000 		.word	.L5-.L7
 311 0088 00000000 		.word	.L5-.L7
 312 008c 00000000 		.word	.L5-.L7
 313 0090 00000000 		.word	.L5-.L7
 314 0094 00000000 		.word	.L5-.L7
 315 0098 00000000 		.word	.L5-.L7
 316 009c 00000000 		.word	.L5-.L7
 317 00a0 00000000 		.word	.L5-.L7
GAS LISTING /tmp/cchK8ftJ.s 			page 13


 318 00a4 00000000 		.word	.L5-.L7
 319 00a8 00000000 		.word	.L5-.L7
 320 00ac 00000000 		.word	.L5-.L7
 321 00b0 00000000 		.word	.L5-.L7
 322 00b4 00000000 		.word	.L5-.L7
 323 00b8 00000000 		.word	.L5-.L7
 324 00bc 00000000 		.word	.L5-.L7
 325 00c0 00000000 		.word	.L6-.L7
 326              		.text
 327              	.L15:
 328              	.LBB42:
  33:src/riscv.cpp ****             case 0x11: {
 329              		.loc 1 33 13 is_stmt 1
  33:src/riscv.cpp ****             case 0x11: {
 330              		.loc 1 33 24
 331              	.LBB43:
  35:src/riscv.cpp ****                 uint64 volatile handle, start_routine, arg;
 332              		.loc 1 35 17
  36:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));    //thread_t* handle
 333              		.loc 1 36 17
  36:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));    //thread_t* handle
 334              		.loc 1 36 58 is_stmt 0
 335              	 #APP
 336              	# 36 "src/riscv.cpp" 1
 337              		mv a5, a1
 338              	# 0 "" 2
 339              	 #NO_APP
 340 0178 233CF4F8 		sd	a5,-104(s0)
  37:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (start_routine));    //void (*function)(void*)
 341              		.loc 1 37 17 is_stmt 1
  37:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (start_routine));    //void (*function)(void*)
 342              		.loc 1 37 65 is_stmt 0
 343              	 #APP
 344              	# 37 "src/riscv.cpp" 1
 345              		mv a5, a2
 346              	# 0 "" 2
 347              	 #NO_APP
 348 0180 2330F4FA 		sd	a5,-96(s0)
  38:src/riscv.cpp ****                 asm volatile("mv %0, a3" : "=r" (arg));
 349              		.loc 1 38 17 is_stmt 1
  38:src/riscv.cpp ****                 asm volatile("mv %0, a3" : "=r" (arg));
 350              		.loc 1 38 55 is_stmt 0
 351              	 #APP
 352              	# 38 "src/riscv.cpp" 1
 353              		mv a5, a3
 354              	# 0 "" 2
 355              	 #NO_APP
 356 0188 2334F4FA 		sd	a5,-88(s0)
  39:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
 357              		.loc 1 39 17 is_stmt 1
  39:src/riscv.cpp ****                 uint64 *stack_space = new uint64[DEFAULT_STACK_SIZE];
 358              		.loc 1 39 68 is_stmt 0
 359 018c 37850000 		li	a0,32768
 360 0190 97000000 		call	_Znam
 360      E7800000 
 361              	.LVL9:
 362 0198 93060500 		mv	a3,a0
GAS LISTING /tmp/cchK8ftJ.s 			page 14


 363              	.LVL10:
  40:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
 364              		.loc 1 40 17 is_stmt 1
  40:src/riscv.cpp ****                 retval = _thread::create_thread((thread_t *) handle, (_thread::Body) start_routine,
 365              		.loc 1 40 48 is_stmt 0
 366 019c 033584F9 		ld	a0,-104(s0)
 367              	.LVL11:
 368 01a0 833504FA 		ld	a1,-96(s0)
 369 01a4 033684FA 		ld	a2,-88(s0)
 370 01a8 97000000 		call	_ZN7_thread13create_threadEPPS_PFvPvES2_S2_
 370      E7800000 
 371              	.LVL12:
  42:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 372              		.loc 1 42 17 is_stmt 1
  42:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 373              		.loc 1 42 59 is_stmt 0
 374              	 #APP
 375              	# 42 "src/riscv.cpp" 1
  43:src/riscv.cpp ****                 break;
 376              		mv a0, a0
 377              	# 0 "" 2
 378              		.loc 1 43 17 is_stmt 1
 379              	.LVL13:
 380              	 #NO_APP
 381              	.L5:
 382              	.LBE43:
 383              	.LBE42:
 384              	.LBE41:
 106:src/riscv.cpp ****         w_sepc(sepc); //ako je unutar dispacha promenjen pc ovde upisujem taj novi(sto je nekad sac
 385              		.loc 1 106 9
 106:src/riscv.cpp ****         w_sepc(sepc); //ako je unutar dispacha promenjen pc ovde upisujem taj novi(sto je nekad sac
 386              		.loc 1 106 15 is_stmt 0
 387 01b4 833784F8 		ld	a5,-120(s0)
 388              	.LVL14:
 389              	.LBB51:
 390              	.LBB52:
 122:src/../h/riscv.hpp **** }
 391              		.loc 2 122 5 is_stmt 1
 122:src/../h/riscv.hpp **** }
 392              		.loc 2 122 65 is_stmt 0
 393              	 #APP
 394              	# 122 "src/../h/riscv.hpp" 1
 395              		csrw sepc, a5
 396              	# 0 "" 2
 397              	.LVL15:
 398              	 #NO_APP
 399              	.LBE52:
 400              	.LBE51:
 107:src/riscv.cpp ****         w_sstatus(sstatus);
 401              		.loc 1 107 9 is_stmt 1
 107:src/riscv.cpp ****         w_sstatus(sstatus);
 402              		.loc 1 107 18 is_stmt 0
 403 01bc 833704F9 		ld	a5,-112(s0)
 404              	.LVL16:
 405              	.LBB53:
 406              	.LBB54:
 186:src/../h/riscv.hpp **** }
GAS LISTING /tmp/cchK8ftJ.s 			page 15


 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 189:src/../h/riscv.hpp **** {
 190:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 407              		.loc 2 190 5 is_stmt 1
 408              		.loc 2 190 77 is_stmt 0
 409              	 #APP
 410              	# 190 "src/../h/riscv.hpp" 1
 191              	}
 411              		csrw sstatus, a5
 412              	# 0 "" 2
 413              	.LVL17:
 414              	 #NO_APP
 415              	.L3:
 416              	.LBE54:
 417              	.LBE53:
 418              	.LBE36:
 419              	.LBE59:
 420              		.loc 1 137 1
 421 01c4 83308107 		ld	ra,120(sp)
 422              		.cfi_remember_state
 423              		.cfi_restore 1
 424 01c8 03340107 		ld	s0,112(sp)
 425              		.cfi_restore 8
 426              		.cfi_def_cfa 2, 128
 427 01cc 83348106 		ld	s1,104(sp)
 428              		.cfi_restore 9
 429              	.LVL18:
 430 01d0 13010108 		addi	sp,sp,128
 431              		.cfi_def_cfa_offset 0
 432 01d4 67800000 		jr	ra
 433              	.LVL19:
 434              	.L14:
 435              		.cfi_restore_state
 436              	.LBB60:
 437              	.LBB56:
 438              	.LBB55:
 439              	.LBB50:
  45:src/riscv.cpp ****             case 0x12: {
 440              		.loc 1 45 13 is_stmt 1
  45:src/riscv.cpp ****             case 0x12: {
 441              		.loc 1 45 24
  46:src/riscv.cpp ****                 retval = _thread::thread_exit();
 442              		.loc 1 46 17
  46:src/riscv.cpp ****                 retval = _thread::thread_exit();
 443              		.loc 1 46 46 is_stmt 0
 444 01d8 97000000 		call	_ZN7_thread11thread_exitEv
 444      E7800000 
 445              	.LVL20:
  47:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 446              		.loc 1 47 17 is_stmt 1
  47:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 447              		.loc 1 47 59 is_stmt 0
 448              	 #APP
 449              	# 47 "src/riscv.cpp" 1
  48:src/riscv.cpp ****                 break;
 450              		mv a0, a0
GAS LISTING /tmp/cchK8ftJ.s 			page 16


 451              	# 0 "" 2
 452              		.loc 1 48 17 is_stmt 1
 453              	 #NO_APP
 454 01e4 6FF01FFD 		j	.L5
 455              	.LVL21:
 456              	.L13:
  50:src/riscv.cpp ****             case 0x13:
 457              		.loc 1 50 13
  51:src/riscv.cpp ****                 _thread::thread_dispatch();
 458              		.loc 1 51 17
  51:src/riscv.cpp ****                 _thread::thread_dispatch();
 459              		.loc 1 51 41 is_stmt 0
 460 01e8 97000000 		call	_ZN7_thread15thread_dispatchEv
 460      E7800000 
 461              	.LVL22:
  52:src/riscv.cpp ****                 break;
 462              		.loc 1 52 17 is_stmt 1
 463 01f0 6FF05FFC 		j	.L5
 464              	.L12:
  54:src/riscv.cpp ****             case 0x21:{
 465              		.loc 1 54 13
  54:src/riscv.cpp ****             case 0x21:{
 466              		.loc 1 54 23
 467              	.LBB44:
  55:src/riscv.cpp ****                 uint64 handle, init;
 468              		.loc 1 55 17
  57:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 469              		.loc 1 57 17
  57:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 470              		.loc 1 57 58 is_stmt 0
 471              	 #APP
 472              	# 57 "src/riscv.cpp" 1
 473              		mv a0, a1
 474              	# 0 "" 2
 475              	.LVL23:
  58:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (init));
 476              		.loc 1 58 17 is_stmt 1
  58:src/riscv.cpp ****                 asm volatile("mv %0, a2" : "=r" (init));
 477              		.loc 1 58 56 is_stmt 0
 478              	# 58 "src/riscv.cpp" 1
 479              		mv a1, a2
 480              	# 0 "" 2
 481              	.LVL24:
  59:src/riscv.cpp ****                 retval = _sem::open_sem((sem_t*)(handle), init);
 482              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp ****                 retval = _sem::open_sem((sem_t*)(handle), init);
 483              		.loc 1 59 40 is_stmt 0
 484              	 #NO_APP
 485 01fc 9B850500 		sext.w	a1,a1
 486              	.LVL25:
 487 0200 97000000 		call	_ZN4_sem8open_semEPPS_j
 487      E7800000 
 488              	.LVL26:
  60:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 489              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 490              		.loc 1 60 59 is_stmt 0
GAS LISTING /tmp/cchK8ftJ.s 			page 17


 491              	 #APP
 492              	# 60 "src/riscv.cpp" 1
  62:src/riscv.cpp ****                 break;
 493              		mv a0, a0
 494              	# 0 "" 2
 495              		.loc 1 62 17 is_stmt 1
 496              	 #NO_APP
 497 020c 6FF09FFA 		j	.L5
 498              	.LVL27:
 499              	.L11:
 500              	.LBE44:
  64:src/riscv.cpp ****             case 0x22:{
 501              		.loc 1 64 13
  64:src/riscv.cpp ****             case 0x22:{
 502              		.loc 1 64 23
 503              	.LBB45:
  65:src/riscv.cpp ****                 uint64 handle;
 504              		.loc 1 65 17
  66:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 505              		.loc 1 66 17
  66:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 506              		.loc 1 66 58 is_stmt 0
 507              	 #APP
 508              	# 66 "src/riscv.cpp" 1
 509              		mv a0, a1
 510              	# 0 "" 2
 511              	.LVL28:
  67:src/riscv.cpp ****                 retval = _sem::close_sem((sem_t)handle);
 512              		.loc 1 67 17 is_stmt 1
  67:src/riscv.cpp ****                 retval = _sem::close_sem((sem_t)handle);
 513              		.loc 1 67 41 is_stmt 0
 514              	 #NO_APP
 515 0214 97000000 		call	_ZN4_sem9close_semEPS_
 515      E7800000 
 516              	.LVL29:
  68:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 517              		.loc 1 68 17 is_stmt 1
  68:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 518              		.loc 1 68 59 is_stmt 0
 519              	 #APP
 520              	# 68 "src/riscv.cpp" 1
  70:src/riscv.cpp ****                 break;
 521              		mv a0, a0
 522              	# 0 "" 2
 523              		.loc 1 70 17 is_stmt 1
 524              	 #NO_APP
 525 0220 6FF05FF9 		j	.L5
 526              	.LVL30:
 527              	.L10:
 528              	.LBE45:
  72:src/riscv.cpp ****             case 0x23:{
 529              		.loc 1 72 13
  72:src/riscv.cpp ****             case 0x23:{
 530              		.loc 1 72 23
 531              	.LBB46:
  73:src/riscv.cpp ****                 uint64 handle;
 532              		.loc 1 73 17
GAS LISTING /tmp/cchK8ftJ.s 			page 18


  74:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 533              		.loc 1 74 17
  74:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 534              		.loc 1 74 58 is_stmt 0
 535              	 #APP
 536              	# 74 "src/riscv.cpp" 1
 537              		mv a0, a1
 538              	# 0 "" 2
 539              	.LVL31:
  75:src/riscv.cpp ****                 retval = _sem::sem_wait((sem_t)handle);
 540              		.loc 1 75 17 is_stmt 1
  75:src/riscv.cpp ****                 retval = _sem::sem_wait((sem_t)handle);
 541              		.loc 1 75 40 is_stmt 0
 542              	 #NO_APP
 543 0228 97000000 		call	_ZN4_sem8sem_waitEPS_
 543      E7800000 
 544              	.LVL32:
  76:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 545              		.loc 1 76 17 is_stmt 1
  76:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 546              		.loc 1 76 59 is_stmt 0
 547              	 #APP
 548              	# 76 "src/riscv.cpp" 1
  78:src/riscv.cpp ****                 break;
 549              		mv a0, a0
 550              	# 0 "" 2
 551              		.loc 1 78 17 is_stmt 1
 552              	 #NO_APP
 553 0234 6FF01FF8 		j	.L5
 554              	.LVL33:
 555              	.L9:
 556              	.LBE46:
  80:src/riscv.cpp ****             case 0x24:{
 557              		.loc 1 80 13
  80:src/riscv.cpp ****             case 0x24:{
 558              		.loc 1 80 23
 559              	.LBB47:
  81:src/riscv.cpp ****                 uint64 handle;
 560              		.loc 1 81 17
  82:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 561              		.loc 1 82 17
  82:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 562              		.loc 1 82 58 is_stmt 0
 563              	 #APP
 564              	# 82 "src/riscv.cpp" 1
 565              		mv a0, a1
 566              	# 0 "" 2
 567              	.LVL34:
  83:src/riscv.cpp ****                 retval = _sem::sem_signal((sem_t)handle);
 568              		.loc 1 83 17 is_stmt 1
  83:src/riscv.cpp ****                 retval = _sem::sem_signal((sem_t)handle);
 569              		.loc 1 83 42 is_stmt 0
 570              	 #NO_APP
 571 023c 97000000 		call	_ZN4_sem10sem_signalEPS_
 571      E7800000 
 572              	.LVL35:
  84:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
GAS LISTING /tmp/cchK8ftJ.s 			page 19


 573              		.loc 1 84 17 is_stmt 1
  84:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 574              		.loc 1 84 59 is_stmt 0
 575              	 #APP
 576              	# 84 "src/riscv.cpp" 1
  86:src/riscv.cpp ****                 break;
 577              		mv a0, a0
 578              	# 0 "" 2
 579              		.loc 1 86 17 is_stmt 1
 580              	 #NO_APP
 581 0248 6FF0DFF6 		j	.L5
 582              	.LVL36:
 583              	.L8:
 584              	.LBE47:
  88:src/riscv.cpp ****             case 0x26:{
 585              		.loc 1 88 13
  88:src/riscv.cpp ****             case 0x26:{
 586              		.loc 1 88 23
 587              	.LBB48:
  89:src/riscv.cpp ****                 uint64 handle;
 588              		.loc 1 89 17
  90:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 589              		.loc 1 90 17
  90:src/riscv.cpp ****                 asm volatile("mv %0, a1" : "=r" (handle));
 590              		.loc 1 90 58 is_stmt 0
 591              	 #APP
 592              	# 90 "src/riscv.cpp" 1
 593              		mv a0, a1
 594              	# 0 "" 2
 595              	.LVL37:
  91:src/riscv.cpp ****                 retval = _sem::sem_trywait((sem_t)handle);
 596              		.loc 1 91 17 is_stmt 1
  91:src/riscv.cpp ****                 retval = _sem::sem_trywait((sem_t)handle);
 597              		.loc 1 91 43 is_stmt 0
 598              	 #NO_APP
 599 0250 97000000 		call	_ZN4_sem11sem_trywaitEPS_
 599      E7800000 
 600              	.LVL38:
  92:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 601              		.loc 1 92 17 is_stmt 1
  92:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (retval));
 602              		.loc 1 92 59 is_stmt 0
 603              	 #APP
 604              	# 92 "src/riscv.cpp" 1
  94:src/riscv.cpp ****                 break;
 605              		mv a0, a0
 606              	# 0 "" 2
 607              		.loc 1 94 17 is_stmt 1
 608              	 #NO_APP
 609 025c 6FF09FF5 		j	.L5
 610              	.LVL39:
 611              	.L6:
 612              	.LBE48:
  96:src/riscv.cpp ****             case 0x41:{
 613              		.loc 1 96 13
  96:src/riscv.cpp ****             case 0x41:{
 614              		.loc 1 96 23
GAS LISTING /tmp/cchK8ftJ.s 			page 20


 615              	.LBB49:
  97:src/riscv.cpp ****                 char ch = __getc();
 616              		.loc 1 97 17
  97:src/riscv.cpp ****                 char ch = __getc();
 617              		.loc 1 97 33 is_stmt 0
 618 0260 97000000 		call	__getc
 618      E7800000 
 619              	.LVL40:
  98:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ch));
 620              		.loc 1 98 17 is_stmt 1
  98:src/riscv.cpp ****                 asm volatile("mv a0, %0" : : "r" (ch));
 621              		.loc 1 98 55 is_stmt 0
 622              	 #APP
 623              	# 98 "src/riscv.cpp" 1
  99:src/riscv.cpp ****                 break;
 624              		mv a0, a0
 625              	# 0 "" 2
 626              		.loc 1 99 17 is_stmt 1
 627              	 #NO_APP
 628 026c 6FF09FF4 		j	.L5
 629              	.LVL41:
 630              	.L24:
 631              	.LBE49:
 632              	.LBE50:
 633              	.LBE55:
 634              	.LBE56:
 110:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 635              		.loc 1 110 9
 636              	.LBB57:
 637              	.LBB58:
 156:src/../h/riscv.hpp **** }
 638              		.loc 2 156 5
 156:src/../h/riscv.hpp **** }
 639              		.loc 2 156 64 is_stmt 0
 640 0270 93072000 		li	a5,2
 641              	 #APP
 642              	# 156 "src/../h/riscv.hpp" 1
 157:src/../h/riscv.hpp **** 
 643              		csrc sip, a5
 644              	# 0 "" 2
 645              		.loc 2 157 1
 646              	 #NO_APP
 647 0278 6FF0DFF4 		j	.L3
 648              	.LVL42:
 649              	.L25:
 650              	.LBE58:
 651              	.LBE57:
 113:src/riscv.cpp ****         console_handler();
 652              		.loc 1 113 9 is_stmt 1
 113:src/riscv.cpp ****         console_handler();
 653              		.loc 1 113 24 is_stmt 0
 654 027c 97000000 		call	console_handler
 654      E7800000 
 655              	.LVL43:
 656 0284 6FF01FF4 		j	.L3
 657              	.L26:
 123:src/riscv.cpp ****             case 2:
GAS LISTING /tmp/cchK8ftJ.s 			page 21


 658              		.loc 1 123 13 is_stmt 1
 124:src/riscv.cpp ****                 printString(" Nelegelna instrukcija");
 659              		.loc 1 124 17
 124:src/riscv.cpp ****                 printString(" Nelegelna instrukcija");
 660              		.loc 1 124 28 is_stmt 0
 661 0288 17050000 		lla	a0,.LC3
 661      13050500 
 662 0290 97000000 		call	_Z11printStringPKc
 662      E7800000 
 663              	.LVL44:
 125:src/riscv.cpp ****                 break;
 664              		.loc 1 125 17 is_stmt 1
 665 0298 6FF0DFF2 		j	.L3
 666              	.L19:
 126:src/riscv.cpp ****             case 5:
 667              		.loc 1 126 13
 127:src/riscv.cpp ****                 printString(" Nedozvoljena adresa citanja");
 668              		.loc 1 127 17
 127:src/riscv.cpp ****                 printString(" Nedozvoljena adresa citanja");
 669              		.loc 1 127 28 is_stmt 0
 670 029c 17050000 		lla	a0,.LC4
 670      13050500 
 671 02a4 97000000 		call	_Z11printStringPKc
 671      E7800000 
 672              	.LVL45:
 128:src/riscv.cpp ****                 break;
 673              		.loc 1 128 17 is_stmt 1
 674 02ac 6FF09FF1 		j	.L3
 675              	.L20:
 129:src/riscv.cpp ****             case 7:
 676              		.loc 1 129 13
 130:src/riscv.cpp ****                 printString(" Nedozvoljena adresa upisa");
 677              		.loc 1 130 17
 130:src/riscv.cpp ****                 printString(" Nedozvoljena adresa upisa");
 678              		.loc 1 130 28 is_stmt 0
 679 02b0 17050000 		lla	a0,.LC5
 679      13050500 
 680 02b8 97000000 		call	_Z11printStringPKc
 680      E7800000 
 681              	.LVL46:
 131:src/riscv.cpp ****                 break;
 682              		.loc 1 131 17 is_stmt 1
 683 02c0 6FF05FF0 		j	.L3
 684              	.LBE60:
 685              		.cfi_endproc
 686              	.LFE42:
 688              	.Letext0:
 689              		.file 3 "src/../h/../lib/hw.h"
 690              		.file 4 "src/../h/list.hpp"
 691              		.file 5 "src/../h/_thread.hpp"
 692              		.file 6 "src/../test/../h/syscall_c.hpp"
 693              		.file 7 "src/../h/_sem.hpp"
 694              		.file 8 "src/../h/_semQ.h"
 695              		.file 9 "src/../lib/console.h"
 696              		.file 10 "src/../test/printing.hpp"
GAS LISTING /tmp/cchK8ftJ.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cchK8ftJ.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cchK8ftJ.s:16     .text:0000000000000000 .L0 
     /tmp/cchK8ftJ.s:17     .text:0000000000000000 .L0 
     /tmp/cchK8ftJ.s:18     .text:0000000000000004 .L0 
     /tmp/cchK8ftJ.s:20     .text:0000000000000008 .L0 
     /tmp/cchK8ftJ.s:22     .text:000000000000000c .L0 
     /tmp/cchK8ftJ.s:24     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/cchK8ftJ.s:30     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/cchK8ftJ.s:36     .text:0000000000000014 .L0 
     /tmp/cchK8ftJ.s:37     .text:0000000000000018 .L0 
     /tmp/cchK8ftJ.s:38     .text:0000000000000018 .L0 
     /tmp/cchK8ftJ.s:40     .text:000000000000001c .L0 
     /tmp/cchK8ftJ.s:42     .text:0000000000000020 .L0 
     /tmp/cchK8ftJ.s:71     .text:0000000000000020 _ZN5Riscv23interruptRoutineHandlerEv
     /tmp/cchK8ftJ.s:74     .text:0000000000000020 .L0 
     /tmp/cchK8ftJ.s:75     .text:0000000000000020 .L0 
     /tmp/cchK8ftJ.s:76     .text:0000000000000024 .L0 
     /tmp/cchK8ftJ.s:80     .text:0000000000000030 .L0 
     /tmp/cchK8ftJ.s:81     .text:0000000000000030 .L0 
     /tmp/cchK8ftJ.s:82     .text:0000000000000030 .L0 
     /tmp/cchK8ftJ.s:84     .text:0000000000000034 .L0 
     /tmp/cchK8ftJ.s:86     .text:0000000000000034 .L0 
     /tmp/cchK8ftJ.s:87     .text:0000000000000034 .L0 
       src/riscv.cpp:20     .text:0000000000000034 .L0 
     /tmp/cchK8ftJ.s:96     .text:000000000000003c .L0 
     /tmp/cchK8ftJ.s:100    .text:000000000000003c .L0 
     /tmp/cchK8ftJ.s:101    .text:000000000000003c .L0 
     /tmp/cchK8ftJ.s:102    .text:000000000000003c .L0 
  src/../h/riscv.hpp:104    .text:000000000000003c .L0 
     /tmp/cchK8ftJ.s:110    .text:0000000000000044 .L0 
     /tmp/cchK8ftJ.s:111    .text:0000000000000044 .L0 
     /tmp/cchK8ftJ.s:117    .text:0000000000000048 .L0 
     /tmp/cchK8ftJ.s:118    .text:0000000000000048 .L0 
     /tmp/cchK8ftJ.s:120    .text:000000000000004c .L0 
     /tmp/cchK8ftJ.s:123    .text:0000000000000054 .L0 
     /tmp/cchK8ftJ.s:128    .text:0000000000000064 .L0 
     /tmp/cchK8ftJ.s:133    .text:0000000000000074 .L0 
     /tmp/cchK8ftJ.s:134    .text:0000000000000074 .L0 
     /tmp/cchK8ftJ.s:140    .text:0000000000000084 .L0 
     /tmp/cchK8ftJ.s:141    .text:0000000000000084 .L0 
     /tmp/cchK8ftJ.s:142    .text:0000000000000084 .L0 
  src/../h/riscv.hpp:116    .text:0000000000000084 .L0 
     /tmp/cchK8ftJ.s:150    .text:000000000000008c .L0 
     /tmp/cchK8ftJ.s:151    .text:000000000000008c .L0 
     /tmp/cchK8ftJ.s:155    .text:0000000000000090 .L0 
     /tmp/cchK8ftJ.s:161    .text:00000000000000a4 .L0 
     /tmp/cchK8ftJ.s:162    .text:00000000000000a4 .L0 
     /tmp/cchK8ftJ.s:168    .text:00000000000000b4 .L0 
     /tmp/cchK8ftJ.s:169    .text:00000000000000b4 .L0 
     /tmp/cchK8ftJ.s:170    .text:00000000000000b4 .L0 
  src/../h/riscv.hpp:140    .text:00000000000000b4 .L0 
     /tmp/cchK8ftJ.s:178    .text:00000000000000bc .L0 
     /tmp/cchK8ftJ.s:179    .text:00000000000000bc .L0 
GAS LISTING /tmp/cchK8ftJ.s 			page 23


     /tmp/cchK8ftJ.s:183    .text:00000000000000c0 .L0 
     /tmp/cchK8ftJ.s:189    .text:00000000000000d4 .L0 
     /tmp/cchK8ftJ.s:190    .text:00000000000000d4 .L0 
     /tmp/cchK8ftJ.s:194    .text:00000000000000e4 .L0 
     /tmp/cchK8ftJ.s:195    .text:00000000000000e4 .L0 
     /tmp/cchK8ftJ.s:201    .text:00000000000000f8 .L0 
     /tmp/cchK8ftJ.s:208    .text:0000000000000110 .L0 
     /tmp/cchK8ftJ.s:209    .text:0000000000000110 .L0 
     /tmp/cchK8ftJ.s:210    .text:0000000000000110 .L0 
     /tmp/cchK8ftJ.s:215    .text:0000000000000120 .L0 
     /tmp/cchK8ftJ.s:216    .text:0000000000000120 .L0 
     /tmp/cchK8ftJ.s:223    .text:0000000000000124 .L0 
     /tmp/cchK8ftJ.s:224    .text:0000000000000124 .L0 
     /tmp/cchK8ftJ.s:225    .text:0000000000000124 .L0 
  src/../h/riscv.hpp:116    .text:0000000000000124 .L0 
     /tmp/cchK8ftJ.s:233    .text:000000000000012c .L0 
     /tmp/cchK8ftJ.s:234    .text:000000000000012c .L0 
     /tmp/cchK8ftJ.s:238    .text:0000000000000130 .L0 
     /tmp/cchK8ftJ.s:240    .text:0000000000000134 .L0 
     /tmp/cchK8ftJ.s:244    .text:0000000000000138 .L0 
     /tmp/cchK8ftJ.s:245    .text:0000000000000138 .L0 
     /tmp/cchK8ftJ.s:246    .text:0000000000000138 .L0 
  src/../h/riscv.hpp:184    .text:0000000000000138 .L0 
     /tmp/cchK8ftJ.s:254    .text:0000000000000140 .L0 
     /tmp/cchK8ftJ.s:255    .text:0000000000000140 .L0 
     /tmp/cchK8ftJ.s:259    .text:0000000000000144 .L0 
     /tmp/cchK8ftJ.s:262    .text:0000000000000148 .L0 
     /tmp/cchK8ftJ.s:263    .text:0000000000000148 .L0 
     /tmp/cchK8ftJ.s:330    .text:0000000000000174 .L0 
     /tmp/cchK8ftJ.s:332    .text:0000000000000174 .L0 
     /tmp/cchK8ftJ.s:333    .text:0000000000000174 .L0 
     /tmp/cchK8ftJ.s:334    .text:0000000000000174 .L0 
       src/riscv.cpp:36     .text:0000000000000174 .L0 
     /tmp/cchK8ftJ.s:342    .text:000000000000017c .L0 
       src/riscv.cpp:37     .text:000000000000017c .L0 
     /tmp/cchK8ftJ.s:350    .text:0000000000000184 .L0 
       src/riscv.cpp:38     .text:0000000000000184 .L0 
     /tmp/cchK8ftJ.s:358    .text:000000000000018c .L0 
     /tmp/cchK8ftJ.s:359    .text:000000000000018c .L0 
     /tmp/cchK8ftJ.s:365    .text:000000000000019c .L0 
     /tmp/cchK8ftJ.s:366    .text:000000000000019c .L0 
     /tmp/cchK8ftJ.s:373    .text:00000000000001b0 .L0 
       src/riscv.cpp:42     .text:00000000000001b0 .L0 
     /tmp/cchK8ftJ.s:385    .text:00000000000001b4 .L0 
     /tmp/cchK8ftJ.s:386    .text:00000000000001b4 .L0 
     /tmp/cchK8ftJ.s:387    .text:00000000000001b4 .L0 
     /tmp/cchK8ftJ.s:392    .text:00000000000001b8 .L0 
  src/../h/riscv.hpp:122    .text:00000000000001b8 .L0 
     /tmp/cchK8ftJ.s:402    .text:00000000000001bc .L0 
     /tmp/cchK8ftJ.s:403    .text:00000000000001bc .L0 
     /tmp/cchK8ftJ.s:408    .text:00000000000001c0 .L0 
  src/../h/riscv.hpp:190    .text:00000000000001c0 .L0 
     /tmp/cchK8ftJ.s:421    .text:00000000000001c4 .L0 
     /tmp/cchK8ftJ.s:422    .text:00000000000001c8 .L0 
     /tmp/cchK8ftJ.s:423    .text:00000000000001c8 .L0 
     /tmp/cchK8ftJ.s:425    .text:00000000000001cc .L0 
     /tmp/cchK8ftJ.s:426    .text:00000000000001cc .L0 
GAS LISTING /tmp/cchK8ftJ.s 			page 24


     /tmp/cchK8ftJ.s:428    .text:00000000000001d0 .L0 
     /tmp/cchK8ftJ.s:431    .text:00000000000001d4 .L0 
     /tmp/cchK8ftJ.s:435    .text:00000000000001d8 .L0 
     /tmp/cchK8ftJ.s:441    .text:00000000000001d8 .L0 
     /tmp/cchK8ftJ.s:442    .text:00000000000001d8 .L0 
     /tmp/cchK8ftJ.s:443    .text:00000000000001d8 .L0 
     /tmp/cchK8ftJ.s:444    .text:00000000000001d8 .L0 
     /tmp/cchK8ftJ.s:447    .text:00000000000001e0 .L0 
       src/riscv.cpp:47     .text:00000000000001e0 .L0 
     /tmp/cchK8ftJ.s:454    .text:00000000000001e4 .L0 
     /tmp/cchK8ftJ.s:458    .text:00000000000001e8 .L0 
     /tmp/cchK8ftJ.s:459    .text:00000000000001e8 .L0 
     /tmp/cchK8ftJ.s:460    .text:00000000000001e8 .L0 
     /tmp/cchK8ftJ.s:463    .text:00000000000001f0 .L0 
     /tmp/cchK8ftJ.s:466    .text:00000000000001f4 .L0 
     /tmp/cchK8ftJ.s:468    .text:00000000000001f4 .L0 
     /tmp/cchK8ftJ.s:469    .text:00000000000001f4 .L0 
     /tmp/cchK8ftJ.s:470    .text:00000000000001f4 .L0 
       src/riscv.cpp:57     .text:00000000000001f4 .L0 
     /tmp/cchK8ftJ.s:477    .text:00000000000001f8 .L0 
       src/riscv.cpp:58     .text:00000000000001f8 .L0 
     /tmp/cchK8ftJ.s:483    .text:00000000000001fc .L0 
     /tmp/cchK8ftJ.s:485    .text:00000000000001fc .L0 
     /tmp/cchK8ftJ.s:490    .text:0000000000000208 .L0 
       src/riscv.cpp:60     .text:0000000000000208 .L0 
     /tmp/cchK8ftJ.s:497    .text:000000000000020c .L0 
     /tmp/cchK8ftJ.s:502    .text:0000000000000210 .L0 
     /tmp/cchK8ftJ.s:504    .text:0000000000000210 .L0 
     /tmp/cchK8ftJ.s:505    .text:0000000000000210 .L0 
     /tmp/cchK8ftJ.s:506    .text:0000000000000210 .L0 
       src/riscv.cpp:66     .text:0000000000000210 .L0 
     /tmp/cchK8ftJ.s:513    .text:0000000000000214 .L0 
     /tmp/cchK8ftJ.s:515    .text:0000000000000214 .L0 
     /tmp/cchK8ftJ.s:518    .text:000000000000021c .L0 
       src/riscv.cpp:68     .text:000000000000021c .L0 
     /tmp/cchK8ftJ.s:525    .text:0000000000000220 .L0 
     /tmp/cchK8ftJ.s:530    .text:0000000000000224 .L0 
     /tmp/cchK8ftJ.s:532    .text:0000000000000224 .L0 
     /tmp/cchK8ftJ.s:533    .text:0000000000000224 .L0 
     /tmp/cchK8ftJ.s:534    .text:0000000000000224 .L0 
       src/riscv.cpp:74     .text:0000000000000224 .L0 
     /tmp/cchK8ftJ.s:541    .text:0000000000000228 .L0 
     /tmp/cchK8ftJ.s:543    .text:0000000000000228 .L0 
     /tmp/cchK8ftJ.s:546    .text:0000000000000230 .L0 
       src/riscv.cpp:76     .text:0000000000000230 .L0 
     /tmp/cchK8ftJ.s:553    .text:0000000000000234 .L0 
     /tmp/cchK8ftJ.s:558    .text:0000000000000238 .L0 
     /tmp/cchK8ftJ.s:560    .text:0000000000000238 .L0 
     /tmp/cchK8ftJ.s:561    .text:0000000000000238 .L0 
     /tmp/cchK8ftJ.s:562    .text:0000000000000238 .L0 
       src/riscv.cpp:82     .text:0000000000000238 .L0 
     /tmp/cchK8ftJ.s:569    .text:000000000000023c .L0 
     /tmp/cchK8ftJ.s:571    .text:000000000000023c .L0 
     /tmp/cchK8ftJ.s:574    .text:0000000000000244 .L0 
       src/riscv.cpp:84     .text:0000000000000244 .L0 
     /tmp/cchK8ftJ.s:581    .text:0000000000000248 .L0 
     /tmp/cchK8ftJ.s:586    .text:000000000000024c .L0 
GAS LISTING /tmp/cchK8ftJ.s 			page 25


     /tmp/cchK8ftJ.s:588    .text:000000000000024c .L0 
     /tmp/cchK8ftJ.s:589    .text:000000000000024c .L0 
     /tmp/cchK8ftJ.s:590    .text:000000000000024c .L0 
       src/riscv.cpp:90     .text:000000000000024c .L0 
     /tmp/cchK8ftJ.s:597    .text:0000000000000250 .L0 
     /tmp/cchK8ftJ.s:599    .text:0000000000000250 .L0 
     /tmp/cchK8ftJ.s:602    .text:0000000000000258 .L0 
       src/riscv.cpp:92     .text:0000000000000258 .L0 
     /tmp/cchK8ftJ.s:609    .text:000000000000025c .L0 
     /tmp/cchK8ftJ.s:614    .text:0000000000000260 .L0 
     /tmp/cchK8ftJ.s:616    .text:0000000000000260 .L0 
     /tmp/cchK8ftJ.s:617    .text:0000000000000260 .L0 
     /tmp/cchK8ftJ.s:618    .text:0000000000000260 .L0 
     /tmp/cchK8ftJ.s:621    .text:0000000000000268 .L0 
       src/riscv.cpp:98     .text:0000000000000268 .L0 
     /tmp/cchK8ftJ.s:628    .text:000000000000026c .L0 
     /tmp/cchK8ftJ.s:638    .text:0000000000000270 .L0 
     /tmp/cchK8ftJ.s:639    .text:0000000000000270 .L0 
     /tmp/cchK8ftJ.s:640    .text:0000000000000270 .L0 
     /tmp/cchK8ftJ.s:647    .text:0000000000000278 .L0 
     /tmp/cchK8ftJ.s:653    .text:000000000000027c .L0 
     /tmp/cchK8ftJ.s:654    .text:000000000000027c .L0 
     /tmp/cchK8ftJ.s:659    .text:0000000000000288 .L0 
     /tmp/cchK8ftJ.s:660    .text:0000000000000288 .L0 
     /tmp/cchK8ftJ.s:661    .text:0000000000000288 .L0 
     /tmp/cchK8ftJ.s:665    .text:0000000000000298 .L0 
     /tmp/cchK8ftJ.s:668    .text:000000000000029c .L0 
     /tmp/cchK8ftJ.s:669    .text:000000000000029c .L0 
     /tmp/cchK8ftJ.s:670    .text:000000000000029c .L0 
     /tmp/cchK8ftJ.s:674    .text:00000000000002ac .L0 
     /tmp/cchK8ftJ.s:677    .text:00000000000002b0 .L0 
     /tmp/cchK8ftJ.s:678    .text:00000000000002b0 .L0 
     /tmp/cchK8ftJ.s:679    .text:00000000000002b0 .L0 
     /tmp/cchK8ftJ.s:683    .text:00000000000002c0 .L0 
     /tmp/cchK8ftJ.s:685    .text:00000000000002c4 .L0 
     /tmp/cchK8ftJ.s:697    .text:00000000000002c4 .L0 
     /tmp/cchK8ftJ.s:47     .rodata.str1.8:0000000000000000 .LC0
     /tmp/cchK8ftJ.s:134    .text:0000000000000074 .L0 
     /tmp/cchK8ftJ.s:50     .rodata.str1.8:0000000000000010 .LC1
     /tmp/cchK8ftJ.s:162    .text:00000000000000a4 .L0 
     /tmp/cchK8ftJ.s:53     .rodata.str1.8:0000000000000020 .LC2
     /tmp/cchK8ftJ.s:190    .text:00000000000000d4 .L0 
     /tmp/cchK8ftJ.s:65     .rodata.str1.8:0000000000000090 .LC6
     /tmp/cchK8ftJ.s:210    .text:0000000000000110 .L0 
     /tmp/cchK8ftJ.s:276    .rodata:0000000000000000 .L7
     /tmp/cchK8ftJ.s:268    .text:000000000000015c .L0 
     /tmp/cchK8ftJ.s:56     .rodata.str1.8:0000000000000038 .LC3
     /tmp/cchK8ftJ.s:661    .text:0000000000000288 .L0 
     /tmp/cchK8ftJ.s:59     .rodata.str1.8:0000000000000050 .LC4
     /tmp/cchK8ftJ.s:670    .text:000000000000029c .L0 
     /tmp/cchK8ftJ.s:62     .rodata.str1.8:0000000000000070 .LC5
     /tmp/cchK8ftJ.s:679    .text:00000000000002b0 .L0 
     /tmp/cchK8ftJ.s:217    .text:0000000000000124 .L23
     /tmp/cchK8ftJ.s:630    .text:0000000000000270 .L24
     /tmp/cchK8ftJ.s:649    .text:000000000000027c .L25
     /tmp/cchK8ftJ.s:666    .text:000000000000029c .L19
     /tmp/cchK8ftJ.s:675    .text:00000000000002b0 .L20
GAS LISTING /tmp/cchK8ftJ.s 			page 26


     /tmp/cchK8ftJ.s:657    .text:0000000000000288 .L26
     /tmp/cchK8ftJ.s:415    .text:00000000000001c4 .L3
     /tmp/cchK8ftJ.s:381    .text:00000000000001b4 .L5
     /tmp/cchK8ftJ.s:327    .text:0000000000000174 .L15
     /tmp/cchK8ftJ.s:434    .text:00000000000001d8 .L14
     /tmp/cchK8ftJ.s:456    .text:00000000000001e8 .L13
     /tmp/cchK8ftJ.s:464    .text:00000000000001f4 .L12
     /tmp/cchK8ftJ.s:499    .text:0000000000000210 .L11
     /tmp/cchK8ftJ.s:527    .text:0000000000000224 .L10
     /tmp/cchK8ftJ.s:555    .text:0000000000000238 .L9
     /tmp/cchK8ftJ.s:583    .text:000000000000024c .L8
     /tmp/cchK8ftJ.s:611    .text:0000000000000260 .L6
     /tmp/cchK8ftJ.s:2228   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cchK8ftJ.s:3420   .debug_str:00000000000000e0 .LASF146
     /tmp/cchK8ftJ.s:3600   .debug_str:000000000000070b .LASF147
     /tmp/cchK8ftJ.s:3496   .debug_str:00000000000003e8 .LASF148
     /tmp/cchK8ftJ.s:8      .text:0000000000000000 .Ltext0
     /tmp/cchK8ftJ.s:688    .text:00000000000002c4 .Letext0
     /tmp/cchK8ftJ.s:3386   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cchK8ftJ.s:3574   .debug_str:0000000000000647 .LASF0
     /tmp/cchK8ftJ.s:3594   .debug_str:00000000000006d6 .LASF1
     /tmp/cchK8ftJ.s:3556   .debug_str:00000000000005d3 .LASF2
     /tmp/cchK8ftJ.s:3518   .debug_str:00000000000004b7 .LASF4
     /tmp/cchK8ftJ.s:3634   .debug_str:0000000000000811 .LASF3
     /tmp/cchK8ftJ.s:3422   .debug_str:00000000000001a4 .LASF5
     /tmp/cchK8ftJ.s:3598   .debug_str:00000000000006f8 .LASF6
     /tmp/cchK8ftJ.s:3572   .debug_str:0000000000000634 .LASF7
     /tmp/cchK8ftJ.s:3676   .debug_str:0000000000000942 .LASF8
     /tmp/cchK8ftJ.s:3492   .debug_str:00000000000003d2 .LASF9
     /tmp/cchK8ftJ.s:3612   .debug_str:000000000000075d .LASF10
     /tmp/cchK8ftJ.s:3664   .debug_str:0000000000000900 .LASF11
     /tmp/cchK8ftJ.s:3426   .debug_str:00000000000001b1 .LASF12
     /tmp/cchK8ftJ.s:3398   .debug_str:0000000000000043 .LASF13
     /tmp/cchK8ftJ.s:3438   .debug_str:00000000000001f5 .LASF14
     /tmp/cchK8ftJ.s:3628   .debug_str:00000000000007c2 .LASF15
     /tmp/cchK8ftJ.s:3454   .debug_str:000000000000029c .LASF16
     /tmp/cchK8ftJ.s:3590   .debug_str:00000000000006c5 .LASF60
     /tmp/cchK8ftJ.s:3532   .debug_str:0000000000000517 .LASF149
     /tmp/cchK8ftJ.s:3644   .debug_str:0000000000000877 .LASF17
     /tmp/cchK8ftJ.s:3588   .debug_str:00000000000006bc .LASF18
     /tmp/cchK8ftJ.s:3526   .debug_str:00000000000004eb .LASF19
     /tmp/cchK8ftJ.s:3626   .debug_str:00000000000007b7 .LASF20
     /tmp/cchK8ftJ.s:3692   .debug_str:00000000000009bf .LASF22
     /tmp/cchK8ftJ.s:3510   .debug_str:000000000000046d .LASF21
     /tmp/cchK8ftJ.s:3610   .debug_str:000000000000073f .LASF23
     /tmp/cchK8ftJ.s:3418   .debug_str:00000000000000d2 .LASF24
     /tmp/cchK8ftJ.s:3468   .debug_str:00000000000002ff .LASF25
     /tmp/cchK8ftJ.s:3646   .debug_str:0000000000000880 .LASF26
     /tmp/cchK8ftJ.s:3396   .debug_str:0000000000000029 .LASF27
     /tmp/cchK8ftJ.s:3400   .debug_str:0000000000000053 .LASF28
     /tmp/cchK8ftJ.s:3472   .debug_str:0000000000000322 .LASF30
     /tmp/cchK8ftJ.s:3466   .debug_str:00000000000002f6 .LASF32
     /tmp/cchK8ftJ.s:3464   .debug_str:00000000000002e1 .LASF34
     /tmp/cchK8ftJ.s:3638   .debug_str:000000000000084f .LASF29
     /tmp/cchK8ftJ.s:3616   .debug_str:0000000000000771 .LASF31
     /tmp/cchK8ftJ.s:3656   .debug_str:00000000000008c6 .LASF33
     /tmp/cchK8ftJ.s:3650   .debug_str:0000000000000894 .LASF35
GAS LISTING /tmp/cchK8ftJ.s 			page 27


     /tmp/cchK8ftJ.s:3482   .debug_str:0000000000000384 .LASF36
     /tmp/cchK8ftJ.s:3456   .debug_str:00000000000002b2 .LASF37
     /tmp/cchK8ftJ.s:3394   .debug_str:0000000000000021 .LASF38
     /tmp/cchK8ftJ.s:3504   .debug_str:000000000000044b .LASF39
     /tmp/cchK8ftJ.s:3658   .debug_str:00000000000008cd .LASF40
     /tmp/cchK8ftJ.s:3432   .debug_str:00000000000001cd .LASF41
     /tmp/cchK8ftJ.s:3698   .debug_str:00000000000009ee .LASF42
     /tmp/cchK8ftJ.s:3474   .debug_str:0000000000000337 .LASF43
     /tmp/cchK8ftJ.s:3576   .debug_str:0000000000000654 .LASF44
     /tmp/cchK8ftJ.s:3690   .debug_str:00000000000009ac .LASF45
     /tmp/cchK8ftJ.s:3414   .debug_str:00000000000000c3 .LASF46
     /tmp/cchK8ftJ.s:3480   .debug_str:0000000000000371 .LASF47
     /tmp/cchK8ftJ.s:3490   .debug_str:00000000000003cc .LASF48
     /tmp/cchK8ftJ.s:3654   .debug_str:00000000000008b4 .LASF49
     /tmp/cchK8ftJ.s:3410   .debug_str:00000000000000a6 .LASF50
     /tmp/cchK8ftJ.s:3702   .debug_str:0000000000000a02 .LASF51
     /tmp/cchK8ftJ.s:3696   .debug_str:00000000000009e3 .LASF52
     /tmp/cchK8ftJ.s:3632   .debug_str:00000000000007f9 .LASF53
     /tmp/cchK8ftJ.s:3592   .debug_str:00000000000006cb .LASF54
     /tmp/cchK8ftJ.s:3538   .debug_str:0000000000000539 .LASF55
     /tmp/cchK8ftJ.s:3436   .debug_str:00000000000001eb .LASF56
     /tmp/cchK8ftJ.s:3512   .debug_str:000000000000047e .LASF57
     /tmp/cchK8ftJ.s:3564   .debug_str:0000000000000612 .LASF58
     /tmp/cchK8ftJ.s:3500   .debug_str:0000000000000418 .LASF59
     /tmp/cchK8ftJ.s:3622   .debug_str:000000000000079a .LASF102
     /tmp/cchK8ftJ.s:3440   .debug_str:0000000000000201 .LASF104
     /tmp/cchK8ftJ.s:3524   .debug_str:00000000000004dd .LASF61
     /tmp/cchK8ftJ.s:3542   .debug_str:000000000000055a .LASF82
     /tmp/cchK8ftJ.s:3624   .debug_str:00000000000007b2 .LASF62
     /tmp/cchK8ftJ.s:3568   .debug_str:0000000000000626 .LASF63
     /tmp/cchK8ftJ.s:3402   .debug_str:000000000000005c .LASF100
     /tmp/cchK8ftJ.s:3458   .debug_str:00000000000002c6 .LASF64
     /tmp/cchK8ftJ.s:3548   .debug_str:0000000000000591 .LASF65
     /tmp/cchK8ftJ.s:3516   .debug_str:00000000000004b2 .LASF66
     /tmp/cchK8ftJ.s:3578   .debug_str:000000000000065b .LASF68
     /tmp/cchK8ftJ.s:3550   .debug_str:0000000000000596 .LASF73
     /tmp/cchK8ftJ.s:3566   .debug_str:000000000000061c .LASF150
     /tmp/cchK8ftJ.s:3660   .debug_str:00000000000008d5 .LASF151
     /tmp/cchK8ftJ.s:3540   .debug_str:0000000000000551 .LASF67
     /tmp/cchK8ftJ.s:3478   .debug_str:0000000000000350 .LASF69
     /tmp/cchK8ftJ.s:3494   .debug_str:00000000000003e0 .LASF70
     /tmp/cchK8ftJ.s:3580   .debug_str:0000000000000672 .LASF71
     /tmp/cchK8ftJ.s:3560   .debug_str:00000000000005ed .LASF72
     /tmp/cchK8ftJ.s:3682   .debug_str:0000000000000966 .LASF74
     /tmp/cchK8ftJ.s:3434   .debug_str:00000000000001e1 .LASF75
     /tmp/cchK8ftJ.s:3484   .debug_str:000000000000038c .LASF76
     /tmp/cchK8ftJ.s:3582   .debug_str:0000000000000692 .LASF77
     /tmp/cchK8ftJ.s:3630   .debug_str:00000000000007d8 .LASF78
     /tmp/cchK8ftJ.s:3534   .debug_str:0000000000000522 .LASF79
     /tmp/cchK8ftJ.s:3514   .debug_str:0000000000000494 .LASF80
     /tmp/cchK8ftJ.s:3416   .debug_str:00000000000000ca .LASF81
     /tmp/cchK8ftJ.s:3406   .debug_str:000000000000008b .LASF83
     /tmp/cchK8ftJ.s:3470   .debug_str:000000000000031a .LASF152
     /tmp/cchK8ftJ.s:3668   .debug_str:0000000000000918 .LASF84
     /tmp/cchK8ftJ.s:3604   .debug_str:0000000000000724 .LASF85
     /tmp/cchK8ftJ.s:3602   .debug_str:0000000000000719 .LASF86
     /tmp/cchK8ftJ.s:3552   .debug_str:00000000000005b1 .LASF87
GAS LISTING /tmp/cchK8ftJ.s 			page 28


     /tmp/cchK8ftJ.s:3558   .debug_str:00000000000005e1 .LASF88
     /tmp/cchK8ftJ.s:3446   .debug_str:000000000000023c .LASF89
     /tmp/cchK8ftJ.s:3680   .debug_str:0000000000000958 .LASF90
     /tmp/cchK8ftJ.s:3636   .debug_str:0000000000000823 .LASF91
     /tmp/cchK8ftJ.s:3614   .debug_str:000000000000076c .LASF153
     /tmp/cchK8ftJ.s:3694   .debug_str:00000000000009d7 .LASF92
     /tmp/cchK8ftJ.s:3488   .debug_str:00000000000003b1 .LASF93
     /tmp/cchK8ftJ.s:3530   .debug_str:00000000000004fc .LASF94
     /tmp/cchK8ftJ.s:3430   .debug_str:00000000000001c8 .LASF95
     /tmp/cchK8ftJ.s:3442   .debug_str:0000000000000226 .LASF96
     /tmp/cchK8ftJ.s:3528   .debug_str:00000000000004f4 .LASF97
     /tmp/cchK8ftJ.s:3522   .debug_str:00000000000004d4 .LASF98
     /tmp/cchK8ftJ.s:3448   .debug_str:0000000000000257 .LASF99
     /tmp/cchK8ftJ.s:3544   .debug_str:000000000000055f .LASF101
     /tmp/cchK8ftJ.s:3444   .debug_str:000000000000022c .LASF103
     /tmp/cchK8ftJ.s:3450   .debug_str:0000000000000265 .LASF105
     /tmp/cchK8ftJ.s:3536   .debug_str:000000000000052b .LASF106
     /tmp/cchK8ftJ.s:3502   .debug_str:000000000000042e .LASF107
     /tmp/cchK8ftJ.s:3388   .debug_str:0000000000000000 .LASF108
     /tmp/cchK8ftJ.s:3476   .debug_str:000000000000034b .LASF109
     /tmp/cchK8ftJ.s:3424   .debug_str:00000000000001ab .LASF110
     /tmp/cchK8ftJ.s:3688   .debug_str:00000000000009a7 .LASF111
     /tmp/cchK8ftJ.s:3508   .debug_str:0000000000000464 .LASF112
     /tmp/cchK8ftJ.s:3684   .debug_str:0000000000000988 .LASF113
     /tmp/cchK8ftJ.s:3670   .debug_str:0000000000000921 .LASF114
     /tmp/cchK8ftJ.s:3412   .debug_str:00000000000000ac .LASF115
     /tmp/cchK8ftJ.s:3570   .debug_str:000000000000062b .LASF116
     /tmp/cchK8ftJ.s:3520   .debug_str:00000000000004be .LASF117
     /tmp/cchK8ftJ.s:3672   .debug_str:000000000000092b .LASF118
     /tmp/cchK8ftJ.s:3586   .debug_str:00000000000006a2 .LASF119
     /tmp/cchK8ftJ.s:3674   .debug_str:0000000000000937 .LASF120
     /tmp/cchK8ftJ.s:3562   .debug_str:00000000000005f9 .LASF121
     /tmp/cchK8ftJ.s:3652   .debug_str:00000000000008a7 .LASF122
     /tmp/cchK8ftJ.s:3390   .debug_str:0000000000000009 .LASF123
     /tmp/cchK8ftJ.s:3678   .debug_str:0000000000000952 .LASF124
     /tmp/cchK8ftJ.s:3452   .debug_str:0000000000000284 .LASF154
     /tmp/cchK8ftJ.s:3392   .debug_str:0000000000000011 .LASF155
     /tmp/cchK8ftJ.s:3486   .debug_str:00000000000003ab .LASF125
     /tmp/cchK8ftJ.s:3640   .debug_str:0000000000000856 .LASF126
     /tmp/cchK8ftJ.s:3642   .debug_str:0000000000000868 .LASF127
     /tmp/cchK8ftJ.s:72     .text:0000000000000020 .LFB42
     /tmp/cchK8ftJ.s:686    .text:00000000000002c4 .LFE42
     /tmp/cchK8ftJ.s:3460   .debug_str:00000000000002cb .LASF128
     /tmp/cchK8ftJ.s:3554   .debug_str:00000000000005cc .LASF129
     /tmp/cchK8ftJ.s:3201   .debug_loc:0000000000000000 .LLST0
     /tmp/cchK8ftJ.s:3428   .debug_str:00000000000001c1 .LASF130
     /tmp/cchK8ftJ.s:3272   .debug_loc:0000000000000135 .LLST1
     /tmp/cchK8ftJ.s:3378   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cchK8ftJ.s:3584   .debug_str:000000000000069d .LASF131
     /tmp/cchK8ftJ.s:3620   .debug_str:0000000000000792 .LASF132
     /tmp/cchK8ftJ.s:331    .text:0000000000000174 .LBB43
     /tmp/cchK8ftJ.s:382    .text:00000000000001b4 .LBE43
     /tmp/cchK8ftJ.s:3648   .debug_str:000000000000088d .LASF133
     /tmp/cchK8ftJ.s:3618   .debug_str:0000000000000784 .LASF134
     /tmp/cchK8ftJ.s:3700   .debug_str:00000000000009f6 .LASF135
     /tmp/cchK8ftJ.s:3283   .debug_loc:000000000000016b .LLST2
     /tmp/cchK8ftJ.s:361    .text:0000000000000198 .LVL9
GAS LISTING /tmp/cchK8ftJ.s 			page 29


     /tmp/cchK8ftJ.s:371    .text:00000000000001b0 .LVL12
     /tmp/cchK8ftJ.s:467    .text:00000000000001f4 .LBB44
     /tmp/cchK8ftJ.s:500    .text:0000000000000210 .LBE44
     /tmp/cchK8ftJ.s:3294   .debug_loc:00000000000001a1 .LLST3
     /tmp/cchK8ftJ.s:3606   .debug_str:0000000000000734 .LASF136
     /tmp/cchK8ftJ.s:3301   .debug_loc:00000000000001c4 .LLST4
     /tmp/cchK8ftJ.s:488    .text:0000000000000208 .LVL26
     /tmp/cchK8ftJ.s:503    .text:0000000000000210 .LBB45
     /tmp/cchK8ftJ.s:528    .text:0000000000000224 .LBE45
     /tmp/cchK8ftJ.s:3308   .debug_loc:00000000000001e7 .LLST5
     /tmp/cchK8ftJ.s:516    .text:000000000000021c .LVL29
     /tmp/cchK8ftJ.s:531    .text:0000000000000224 .LBB46
     /tmp/cchK8ftJ.s:556    .text:0000000000000238 .LBE46
     /tmp/cchK8ftJ.s:3315   .debug_loc:000000000000020a .LLST6
     /tmp/cchK8ftJ.s:544    .text:0000000000000230 .LVL32
     /tmp/cchK8ftJ.s:559    .text:0000000000000238 .LBB47
     /tmp/cchK8ftJ.s:584    .text:000000000000024c .LBE47
     /tmp/cchK8ftJ.s:3322   .debug_loc:000000000000022d .LLST7
     /tmp/cchK8ftJ.s:572    .text:0000000000000244 .LVL35
     /tmp/cchK8ftJ.s:587    .text:000000000000024c .LBB48
     /tmp/cchK8ftJ.s:612    .text:0000000000000260 .LBE48
     /tmp/cchK8ftJ.s:3329   .debug_loc:0000000000000250 .LLST8
     /tmp/cchK8ftJ.s:600    .text:0000000000000258 .LVL38
     /tmp/cchK8ftJ.s:615    .text:0000000000000260 .LBB49
     /tmp/cchK8ftJ.s:631    .text:0000000000000270 .LBE49
     /tmp/cchK8ftJ.s:3336   .debug_loc:0000000000000273 .LLST9
     /tmp/cchK8ftJ.s:619    .text:0000000000000268 .LVL40
     /tmp/cchK8ftJ.s:221    .text:0000000000000124 .LBB37
     /tmp/cchK8ftJ.s:236    .text:0000000000000130 .LBE37
     /tmp/cchK8ftJ.s:242    .text:0000000000000138 .LBB39
     /tmp/cchK8ftJ.s:257    .text:0000000000000144 .LBE39
     /tmp/cchK8ftJ.s:389    .text:00000000000001b8 .LBB51
     /tmp/cchK8ftJ.s:400    .text:00000000000001bc .LBE51
     /tmp/cchK8ftJ.s:3343   .debug_loc:0000000000000296 .LLST10
     /tmp/cchK8ftJ.s:405    .text:00000000000001c0 .LBB53
     /tmp/cchK8ftJ.s:417    .text:00000000000001c4 .LBE53
     /tmp/cchK8ftJ.s:3350   .debug_loc:00000000000002b9 .LLST11
     /tmp/cchK8ftJ.s:445    .text:00000000000001e0 .LVL20
     /tmp/cchK8ftJ.s:461    .text:00000000000001f0 .LVL22
     /tmp/cchK8ftJ.s:97     .text:000000000000003c .LBB29
     /tmp/cchK8ftJ.s:114    .text:0000000000000048 .LBE29
     /tmp/cchK8ftJ.s:138    .text:0000000000000084 .LBB32
     /tmp/cchK8ftJ.s:153    .text:0000000000000090 .LBE32
     /tmp/cchK8ftJ.s:166    .text:00000000000000b4 .LBB34
     /tmp/cchK8ftJ.s:181    .text:00000000000000c0 .LBE34
     /tmp/cchK8ftJ.s:636    .text:0000000000000270 .LBB57
     /tmp/cchK8ftJ.s:651    .text:000000000000027c .LBE57
     /tmp/cchK8ftJ.s:3357   .debug_loc:00000000000002dc .LLST12
     /tmp/cchK8ftJ.s:136    .text:0000000000000084 .LVL2
     /tmp/cchK8ftJ.s:159    .text:00000000000000a4 .LVL3
     /tmp/cchK8ftJ.s:164    .text:00000000000000b4 .LVL4
     /tmp/cchK8ftJ.s:187    .text:00000000000000d4 .LVL5
     /tmp/cchK8ftJ.s:192    .text:00000000000000e4 .LVL6
     /tmp/cchK8ftJ.s:199    .text:00000000000000f8 .LVL7
     /tmp/cchK8ftJ.s:212    .text:0000000000000120 .LVL8
     /tmp/cchK8ftJ.s:655    .text:0000000000000284 .LVL43
     /tmp/cchK8ftJ.s:663    .text:0000000000000298 .LVL44
GAS LISTING /tmp/cchK8ftJ.s 			page 30


     /tmp/cchK8ftJ.s:672    .text:00000000000002ac .LVL45
     /tmp/cchK8ftJ.s:681    .text:00000000000002c0 .LVL46
     /tmp/cchK8ftJ.s:3506   .debug_str:000000000000045f .LASF137
     /tmp/cchK8ftJ.s:13     .text:0000000000000000 .LFB41
     /tmp/cchK8ftJ.s:43     .text:0000000000000020 .LFE41
     /tmp/cchK8ftJ.s:3498   .debug_str:0000000000000413 .LASF138
     /tmp/cchK8ftJ.s:3546   .debug_str:000000000000058b .LASF139
     /tmp/cchK8ftJ.s:3608   .debug_str:0000000000000739 .LASF156
     /tmp/cchK8ftJ.s:3662   .debug_str:00000000000008f0 .LASF157
     /tmp/cchK8ftJ.s:3686   .debug_str:00000000000009a0 .LASF140
     /tmp/cchK8ftJ.s:3408   .debug_str:0000000000000093 .LASF141
     /tmp/cchK8ftJ.s:3404   .debug_str:000000000000007f .LASF142
     /tmp/cchK8ftJ.s:3596   .debug_str:00000000000006e9 .LASF143
     /tmp/cchK8ftJ.s:3666   .debug_str:000000000000090f .LASF144
     /tmp/cchK8ftJ.s:3462   .debug_str:00000000000002d1 .LASF145
     /tmp/cchK8ftJ.s:95     .text:000000000000003c .LVL0
     /tmp/cchK8ftJ.s:379    .text:00000000000001b4 .LVL13
     /tmp/cchK8ftJ.s:433    .text:00000000000001d8 .LVL19
     /tmp/cchK8ftJ.s:455    .text:00000000000001e8 .LVL21
     /tmp/cchK8ftJ.s:498    .text:0000000000000210 .LVL27
     /tmp/cchK8ftJ.s:526    .text:0000000000000224 .LVL30
     /tmp/cchK8ftJ.s:554    .text:0000000000000238 .LVL33
     /tmp/cchK8ftJ.s:582    .text:000000000000024c .LVL36
     /tmp/cchK8ftJ.s:610    .text:0000000000000260 .LVL39
     /tmp/cchK8ftJ.s:112    .text:0000000000000048 .LVL1
     /tmp/cchK8ftJ.s:429    .text:00000000000001d0 .LVL18
     /tmp/cchK8ftJ.s:363    .text:000000000000019c .LVL10
     /tmp/cchK8ftJ.s:367    .text:00000000000001a0 .LVL11
     /tmp/cchK8ftJ.s:475    .text:00000000000001f8 .LVL23
     /tmp/cchK8ftJ.s:481    .text:00000000000001fc .LVL24
     /tmp/cchK8ftJ.s:486    .text:0000000000000200 .LVL25
     /tmp/cchK8ftJ.s:511    .text:0000000000000214 .LVL28
     /tmp/cchK8ftJ.s:539    .text:0000000000000228 .LVL31
     /tmp/cchK8ftJ.s:567    .text:000000000000023c .LVL34
     /tmp/cchK8ftJ.s:595    .text:0000000000000250 .LVL37
     /tmp/cchK8ftJ.s:629    .text:0000000000000270 .LVL41
     /tmp/cchK8ftJ.s:388    .text:00000000000001b8 .LVL14
     /tmp/cchK8ftJ.s:397    .text:00000000000001bc .LVL15
     /tmp/cchK8ftJ.s:404    .text:00000000000001c0 .LVL16
     /tmp/cchK8ftJ.s:413    .text:00000000000001c4 .LVL17
     /tmp/cchK8ftJ.s:648    .text:000000000000027c .LVL42
     /tmp/cchK8ftJ.s:698    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cchK8ftJ.s:219    .text:0000000000000124 .LBB36
     /tmp/cchK8ftJ.s:418    .text:00000000000001c4 .LBE36
     /tmp/cchK8ftJ.s:437    .text:00000000000001d8 .LBB56
     /tmp/cchK8ftJ.s:634    .text:0000000000000270 .LBE56

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z8printIntiii
_Znam
_ZN7_thread13create_threadEPPS_PFvPvES2_S2_
_ZN7_thread11thread_exitEv
_ZN7_thread15thread_dispatchEv
_ZN4_sem8open_semEPPS_j
_ZN4_sem9close_semEPS_
_ZN4_sem8sem_waitEPS_
GAS LISTING /tmp/cchK8ftJ.s 			page 31


_ZN4_sem10sem_signalEPS_
_ZN4_sem11sem_trywaitEPS_
__getc
console_handler
